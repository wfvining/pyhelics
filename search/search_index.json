{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyHELICS \u00b6 Python HELICS bindings pip install helics Documentation \u00b6 To use the project: import helics as h h . helicsGetVersion () See https://docs.helics.org for more information about how to use HELICS. This package uses cffi to provide a Python interface to the HELICS C API . By default, when you install from PyPI, the version number of the package will match the version of HELICS that is installed. For example, if you run the following: pip install helics You will also get precompiled binaries of HELICS for your platform if they exist. If they don\u2019t exist, a source distribution will be installed in which case the user must provide the location of the binaries. For more information, see https://python.helics.org/installation .","title":"Home"},{"location":"#pyhelics","text":"Python HELICS bindings pip install helics","title":"PyHELICS"},{"location":"#documentation","text":"To use the project: import helics as h h . helicsGetVersion () See https://docs.helics.org for more information about how to use HELICS. This package uses cffi to provide a Python interface to the HELICS C API . By default, when you install from PyPI, the version number of the package will match the version of HELICS that is installed. For example, if you run the following: pip install helics You will also get precompiled binaries of HELICS for your platform if they exist. If they don\u2019t exist, a source distribution will be installed in which case the user must provide the location of the binaries. For more information, see https://python.helics.org/installation .","title":"Documentation"},{"location":"installation/","text":"Installation \u00b6 This package uses cffi to interface with the HELICS library. The source for this package contains only pure python code. Python helics packages with version numbers greater than v2.6.0 use this new cffi interface. Versions equal to and prior to v2.6.0 used swig to generate the Python API. Install from PyPI (recommended) \u00b6 $ pip install helics This will give you the latest version of the python helics interface. If you already have helics installed, you can upgrade to the latest version by using the following: $ pip install helics --upgrade You can install a specific version by using the following: $ pip install helics By default, when you install from PyPI, the version number of the package will match the version of HELICS that is installed. For example, if you run the following: $ pip install helics You will also get precompiled binaries of HELICS for your platform if they exist. If they don\u2019t exist, a source distribution will be installed in which case the user must provide the location of the binaries. See the next section for more information about how to do that. Custom version of HELICS \u00b6 The python package in this repository uses a environment variable called PYHELICS_INSTALL to choose the location of the precompiled binaries of the C HELICS library. If you wish to change the version of HELICS used, you can set this environment variable to point to the location of an HELICS installation. For example, let\u2019s say as a user you want to use HELICS in a Conda environment. $ conda create -n helics-py3-env python = 3 -y $ conda activate helics-py3-env Running import helics in python in this environment throws an error because python package hasn\u2019t been installed yet. $ python -c 'import helics' Traceback ( most recent call last ) : File \"<string>\" , line 1 , in <module> ModuleNotFoundError: No module named 'helics' You can install helics using pip . $ pip install helics pip install helics Collecting helics Downloading helics-2.6.1.post0-py3-none-macosx_10_9_x86_64.whl ( 6 .6 MB ) | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 6 .6 MB 2 .3 MB/s Collecting enum34> = 1 .1.10 Using cached enum34-1.1.10-py3-none-any.whl ( 11 kB ) Collecting cffi> = 1 .0.0 Using cached cffi-1.14.3-2-cp38-cp38-macosx_10_9_x86_64.whl ( 176 kB ) Collecting pycparser Using cached pycparser-2.20-py2.py3-none-any.whl ( 112 kB ) Installing collected packages: enum34, pycparser, cffi, helics Successfully installed cffi-1.14.3 enum34-1.1.10 helics-2.6.1.post0 pycparser-2.20 Now that you have installed the python package, you can check that it works: $ python -c \"import helics; print(helics.helicsGetVersion())\" 2 .6.1 ( 2020 -10-15 ) This installs the Python package helics-2.6.1.post0 and it comes with precompiled binaries for HELICS version 2.6.1 that we released on 2020-10-15. Let\u2019s say you\u2019ve made modification to the HELICS library or compiled it with some different flags. Or you are interested in a using an older version of HELICS. You can do that with this python package by changing the PYHELICS_INSTALL environment variable. As an example, if you want to use the Python package with HELICS v2.5.2, you can clone the git repository for HELICS, build from source and install it to any location. In this example, I chose to install it in ~/local/helics-v2.5.2 . $ git clone https://github.com/GMLC-TDC/HELICS $ cd HELICS $ git checkout v2.5.2 $ mkdir -p build $ cmake -DCMAKE_INSTALL_PREFIX = ~/local/helics-v2.5.2 .. $ make -j8 && make install Now in bash, you can set the environment variable: $ export PYHELICS_INSTALL = ~/local/helics-v2.5.2 Now when you import helics and print the version you\u2019ll get 2.5.2 (2020-06-14) . $ python -c \"import helics; print(helics.helicsGetVersion())\" 2 .5.2 ( 2020 -06-14 ) If you want to build from source and use the develop branch: $ git checkout develop $ git submodule update $ cmake -DCMAKE_INSTALL_PREFIX = ~/local/helics-develop .. $ make -j8 && make install $ export PYHELICS_INSTALL = ~/local/helics-develop $ python -c \"import helics; print(helics.helicsGetVersion())\" 2 .6.0-develop-g3a460f1f ( 2020 -09-24 ) The Python HELICS cffi interface is tested with the latest version of HELICS. If you find any issues with earlier versions of HELICS, please report them on https://github.com/GMLC-TDC/HELICS/issues . From Source \u00b6 Download \u00b6 In order to run this package, you will need to download HELICS. You can use this package to download HELICS. $ git clone https://github.com/GMLC-TDC/pyhelics $ cd pyhelics $ python setup.py download Alternatively, you can install HELICS in any way you like and point this package to the correct installation. You can do this by setting the PYHELICS_INSTALL environment variable, as described in the previous section. The path to the installation must be the root of the installation. On Linux or Mac, add the following to your ~/.bashrc . $ export PYHELICS_INSTALL = \"/path/to/helics_installation\" where $ tree /path/to/helics_installation helics_installation \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 helics \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 cmake \u2502 \u251c\u2500\u2500 libhelicsSharedLib.2.6.1.dylib \u2502 \u251c\u2500\u2500 libhelicsSharedLib.2.dylib -> libhelicsSharedLib.2.6.1.dylib \u2502 \u251c\u2500\u2500 libhelicsSharedLib.dylib -> libhelicsSharedLib.2.dylib \u2502 \u251c\u2500\u2500 libzmq.5.2.2.dylib \u2502 \u251c\u2500\u2500 libzmq.5.dylib -> libzmq.5.2.2.dylib \u2502 \u251c\u2500\u2500 libzmq.dylib -> libzmq.5.dylib \u2502 \u2514\u2500\u2500 pkgconfig \u2514\u2500\u2500 share \u251c\u2500\u2500 doc \u251c\u2500\u2500 helics \u2514\u2500\u2500 man On Windows, follow instructions online to set a user environment variable to the path of the HELICS installation. You can also use set PYHELICS_INSTALL=\"C:\\path\\to\\helics_installation\" in a command line session. Install \u00b6 Next, you can install pyhelics by either using pip or setting your PYTHONPATH $ git clone https://github.com/GMLC-TDC/pyhelics $ cd pyhelics $ python -m pip install -e . This will install pyhelics . Run the following to ensure that everything is working as expected. import helics as h print(h.__file__) # this should print the path to the __init__.py file in the pyhelics repository print(h.helicsGetVersion()) # this should print the version of the HELICS library in the PYHELICS_INSTALL environment or the latest version of HELICS See Migration from HELICS2 to HELICS3 for more information on changes between this version and the SWIG version of the HELICS library.","title":"Installation"},{"location":"installation/#installation","text":"This package uses cffi to interface with the HELICS library. The source for this package contains only pure python code. Python helics packages with version numbers greater than v2.6.0 use this new cffi interface. Versions equal to and prior to v2.6.0 used swig to generate the Python API.","title":"Installation"},{"location":"installation/#install-from-pypi-recommended","text":"$ pip install helics This will give you the latest version of the python helics interface. If you already have helics installed, you can upgrade to the latest version by using the following: $ pip install helics --upgrade You can install a specific version by using the following: $ pip install helics By default, when you install from PyPI, the version number of the package will match the version of HELICS that is installed. For example, if you run the following: $ pip install helics You will also get precompiled binaries of HELICS for your platform if they exist. If they don\u2019t exist, a source distribution will be installed in which case the user must provide the location of the binaries. See the next section for more information about how to do that.","title":"Install from PyPI (recommended)"},{"location":"installation/#custom-version-of-helics","text":"The python package in this repository uses a environment variable called PYHELICS_INSTALL to choose the location of the precompiled binaries of the C HELICS library. If you wish to change the version of HELICS used, you can set this environment variable to point to the location of an HELICS installation. For example, let\u2019s say as a user you want to use HELICS in a Conda environment. $ conda create -n helics-py3-env python = 3 -y $ conda activate helics-py3-env Running import helics in python in this environment throws an error because python package hasn\u2019t been installed yet. $ python -c 'import helics' Traceback ( most recent call last ) : File \"<string>\" , line 1 , in <module> ModuleNotFoundError: No module named 'helics' You can install helics using pip . $ pip install helics pip install helics Collecting helics Downloading helics-2.6.1.post0-py3-none-macosx_10_9_x86_64.whl ( 6 .6 MB ) | \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 6 .6 MB 2 .3 MB/s Collecting enum34> = 1 .1.10 Using cached enum34-1.1.10-py3-none-any.whl ( 11 kB ) Collecting cffi> = 1 .0.0 Using cached cffi-1.14.3-2-cp38-cp38-macosx_10_9_x86_64.whl ( 176 kB ) Collecting pycparser Using cached pycparser-2.20-py2.py3-none-any.whl ( 112 kB ) Installing collected packages: enum34, pycparser, cffi, helics Successfully installed cffi-1.14.3 enum34-1.1.10 helics-2.6.1.post0 pycparser-2.20 Now that you have installed the python package, you can check that it works: $ python -c \"import helics; print(helics.helicsGetVersion())\" 2 .6.1 ( 2020 -10-15 ) This installs the Python package helics-2.6.1.post0 and it comes with precompiled binaries for HELICS version 2.6.1 that we released on 2020-10-15. Let\u2019s say you\u2019ve made modification to the HELICS library or compiled it with some different flags. Or you are interested in a using an older version of HELICS. You can do that with this python package by changing the PYHELICS_INSTALL environment variable. As an example, if you want to use the Python package with HELICS v2.5.2, you can clone the git repository for HELICS, build from source and install it to any location. In this example, I chose to install it in ~/local/helics-v2.5.2 . $ git clone https://github.com/GMLC-TDC/HELICS $ cd HELICS $ git checkout v2.5.2 $ mkdir -p build $ cmake -DCMAKE_INSTALL_PREFIX = ~/local/helics-v2.5.2 .. $ make -j8 && make install Now in bash, you can set the environment variable: $ export PYHELICS_INSTALL = ~/local/helics-v2.5.2 Now when you import helics and print the version you\u2019ll get 2.5.2 (2020-06-14) . $ python -c \"import helics; print(helics.helicsGetVersion())\" 2 .5.2 ( 2020 -06-14 ) If you want to build from source and use the develop branch: $ git checkout develop $ git submodule update $ cmake -DCMAKE_INSTALL_PREFIX = ~/local/helics-develop .. $ make -j8 && make install $ export PYHELICS_INSTALL = ~/local/helics-develop $ python -c \"import helics; print(helics.helicsGetVersion())\" 2 .6.0-develop-g3a460f1f ( 2020 -09-24 ) The Python HELICS cffi interface is tested with the latest version of HELICS. If you find any issues with earlier versions of HELICS, please report them on https://github.com/GMLC-TDC/HELICS/issues .","title":"Custom version of HELICS"},{"location":"installation/#from-source","text":"","title":"From Source"},{"location":"installation/#download","text":"In order to run this package, you will need to download HELICS. You can use this package to download HELICS. $ git clone https://github.com/GMLC-TDC/pyhelics $ cd pyhelics $ python setup.py download Alternatively, you can install HELICS in any way you like and point this package to the correct installation. You can do this by setting the PYHELICS_INSTALL environment variable, as described in the previous section. The path to the installation must be the root of the installation. On Linux or Mac, add the following to your ~/.bashrc . $ export PYHELICS_INSTALL = \"/path/to/helics_installation\" where $ tree /path/to/helics_installation helics_installation \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 helics \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 cmake \u2502 \u251c\u2500\u2500 libhelicsSharedLib.2.6.1.dylib \u2502 \u251c\u2500\u2500 libhelicsSharedLib.2.dylib -> libhelicsSharedLib.2.6.1.dylib \u2502 \u251c\u2500\u2500 libhelicsSharedLib.dylib -> libhelicsSharedLib.2.dylib \u2502 \u251c\u2500\u2500 libzmq.5.2.2.dylib \u2502 \u251c\u2500\u2500 libzmq.5.dylib -> libzmq.5.2.2.dylib \u2502 \u251c\u2500\u2500 libzmq.dylib -> libzmq.5.dylib \u2502 \u2514\u2500\u2500 pkgconfig \u2514\u2500\u2500 share \u251c\u2500\u2500 doc \u251c\u2500\u2500 helics \u2514\u2500\u2500 man On Windows, follow instructions online to set a user environment variable to the path of the HELICS installation. You can also use set PYHELICS_INSTALL=\"C:\\path\\to\\helics_installation\" in a command line session.","title":"Download"},{"location":"installation/#install","text":"Next, you can install pyhelics by either using pip or setting your PYTHONPATH $ git clone https://github.com/GMLC-TDC/pyhelics $ cd pyhelics $ python -m pip install -e . This will install pyhelics . Run the following to ensure that everything is working as expected. import helics as h print(h.__file__) # this should print the path to the __init__.py file in the pyhelics repository print(h.helicsGetVersion()) # this should print the version of the HELICS library in the PYHELICS_INSTALL environment or the latest version of HELICS See Migration from HELICS2 to HELICS3 for more information on changes between this version and the SWIG version of the HELICS library.","title":"Install"},{"location":"interface/","text":"","title":"Interface"},{"location":"migration-helics2-helics3/","text":"Migrating python code from HELICS v2.x.x to HELICS v3.x.x \u00b6 This document will describe the path to migrate your python code from HELICS version 2.x.x to version 3.x.x. pyhelics is backward and forward compatible. So you won\u2019t need to make any of these changes. The following document is for reference only. See this commit for a diff of all the changes . You can also see the tests folder on github for more examples on how to use the various functions. See the Pythonic Interface for all the new functionality that is available in pyhelics. Functions \u00b6 Related to HelicsMessage Previously you may have add code to deal with message s like this: # helics v2 m = h . helicsEndpointGetMessage ( endpoint ) assert m . source == \"port1\" assert m . original_source == \"port1\" assert m . destination == \"port2\" assert m . data == len ( data ) assert m . time == 2.5 The return object of helicsEndpointGetMessage(endpoint) is now a opaque object and you will have to use helics* functions to get the various attributes of that object. # helics v3 m = h . helicsEndpointGetMessage ( endpoint ) assert h . helicsMessageGetSource ( m ) == \"port1\" assert h . helicsMessageGetOriginalSource ( m ) == \"port1\" assert h . helicsMessageGetDestination ( m ) == \"port2\" assert h . helicsMessageGetRawDataSize ( m ) == len ( data ) assert h . helicsMessageGetTime ( m ) == 2.5 Functions named with MessageObject are renamed to use Message . This is all handled transparently in pyhelics, so you don\u2019t need to deal with it. This function has been renamed: helicsMessageCheckFlag -> helicsMessageGetFlagOption to be consistent with helicsMessageSetFlagOption . Related to raw data Additionally, any function that takes bytes as an input must be passed in a python bytestring. If you have a regular python unicode string, as the user yoou are responsible for converting to a byte string with an encoding of your choice. To convert a python unicode string to a byte string, you can do \"hello world\".encode() . You can even specify the encoding: \"hello world\".encode() . Similarly, any helics function that returns a byte string must be handled correctly on the user end. As a user, you are at the moment required to know the encoding of the message in order to convert it to the correct string. All functions that have Raw in the name are replaced with functions that have Bytes in the name. e.g. helicsMessageGetRawData -> helicsMessageGetBytes Related to complex numbers Previously, you would need to pass real and imaginary components of complex numbers as separate floating point values. # helics v2 h . helicsInputSetDefaultComplex ( sub , - 9.9 , 2.5 ) Now you can pass them as a complex number. # helics v3 h . helicsInputSetDefaultComplex ( sub , - 9.9 + 2.5 j ) These are the full list of functions: helicsInputGetComplex helicsPublicationPublishComplex helicsInputSetDefaultComplex that are affected by this change. Related to endpoints The following functions have been renamed and the argument order has been updated: helicsEndpointSendMessageRaw -> helicsEndpointSendBytesTo helicsEndpointSendEventRaw -> helicsEndpointSendBytesToAt Related to counting \u00b6 The following functions have been renamed: helicsFederatePendingMessages -> helicsFederatePendingMessagesCount helicsEndpointPendingMessages -> helicsEndpointPendingMessagesCount Enumerations \u00b6 Enumerations are constants now, and are represented by upper case variables: # helics v2 h . helicsFederateInfoSetIntegerProperty ( fedInfo1 , h . helics_property_int_log_level , 1 ) h . helicsFederateInfoSetIntegerProperty ( fedInfo1 , h . helics_property_int_max_iterations , 100 ) # helics v3 h . helicsFederateInfoSetIntegerProperty ( fedInfo1 , h . HELICS_PROPERTY_INT_LOG_LEVEL , 1 ) h . helicsFederateInfoSetIntegerProperty ( fedInfo1 , h . HELICS_PROPERTY_INT_MAX_ITERATIONS , 100 ) New functionality \u00b6 If you would like to use callbacks you can do the following in HELICS v3.x.x: @h . ffi . callback ( \"void logger(HelicsMessage, void* userData)\" ) def filterFunc1 ( mess , user_data ): time = h . helicsMessageGetTime ( mess ) user_data = h . ffi . from_handle ( user_data ) h . helicsMessageSetTime ( mess , time + 2.5 ) user_data += 1 class UserData ( object ): def __init__ ( self , x ): self . x = x ... user_data = UserData ( 5 ) handle = h . ffi . new_handle ( user_data ) h . helicsFilterSetCustomCallback ( f1 , filterFunc1 , handle ) ... Find the signature of the function that you\u2019d like to call, use h.ffi.callback as a python decorator for that function. In HELICS v3, @h . ffi . callback ( \"void logger(HelicsMessage, void* userData)\" ) In HELICS v2.x.x, use helics_message_object instead. @h . ffi . callback ( \"void logger(helics_message_object, void* userData)\" ) Then, you can pass the variable that contains a reference to this C function to a helics callback function. The user is responsible for managing memory with relation to these objects. See cffi \u2018s documentation for more information.","title":"Migration v2 -> v3"},{"location":"migration-helics2-helics3/#migrating-python-code-from-helics-v2xx-to-helics-v3xx","text":"This document will describe the path to migrate your python code from HELICS version 2.x.x to version 3.x.x. pyhelics is backward and forward compatible. So you won\u2019t need to make any of these changes. The following document is for reference only. See this commit for a diff of all the changes . You can also see the tests folder on github for more examples on how to use the various functions. See the Pythonic Interface for all the new functionality that is available in pyhelics.","title":"Migrating python code from HELICS v2.x.x to HELICS v3.x.x"},{"location":"migration-helics2-helics3/#functions","text":"Related to HelicsMessage Previously you may have add code to deal with message s like this: # helics v2 m = h . helicsEndpointGetMessage ( endpoint ) assert m . source == \"port1\" assert m . original_source == \"port1\" assert m . destination == \"port2\" assert m . data == len ( data ) assert m . time == 2.5 The return object of helicsEndpointGetMessage(endpoint) is now a opaque object and you will have to use helics* functions to get the various attributes of that object. # helics v3 m = h . helicsEndpointGetMessage ( endpoint ) assert h . helicsMessageGetSource ( m ) == \"port1\" assert h . helicsMessageGetOriginalSource ( m ) == \"port1\" assert h . helicsMessageGetDestination ( m ) == \"port2\" assert h . helicsMessageGetRawDataSize ( m ) == len ( data ) assert h . helicsMessageGetTime ( m ) == 2.5 Functions named with MessageObject are renamed to use Message . This is all handled transparently in pyhelics, so you don\u2019t need to deal with it. This function has been renamed: helicsMessageCheckFlag -> helicsMessageGetFlagOption to be consistent with helicsMessageSetFlagOption . Related to raw data Additionally, any function that takes bytes as an input must be passed in a python bytestring. If you have a regular python unicode string, as the user yoou are responsible for converting to a byte string with an encoding of your choice. To convert a python unicode string to a byte string, you can do \"hello world\".encode() . You can even specify the encoding: \"hello world\".encode() . Similarly, any helics function that returns a byte string must be handled correctly on the user end. As a user, you are at the moment required to know the encoding of the message in order to convert it to the correct string. All functions that have Raw in the name are replaced with functions that have Bytes in the name. e.g. helicsMessageGetRawData -> helicsMessageGetBytes Related to complex numbers Previously, you would need to pass real and imaginary components of complex numbers as separate floating point values. # helics v2 h . helicsInputSetDefaultComplex ( sub , - 9.9 , 2.5 ) Now you can pass them as a complex number. # helics v3 h . helicsInputSetDefaultComplex ( sub , - 9.9 + 2.5 j ) These are the full list of functions: helicsInputGetComplex helicsPublicationPublishComplex helicsInputSetDefaultComplex that are affected by this change. Related to endpoints The following functions have been renamed and the argument order has been updated: helicsEndpointSendMessageRaw -> helicsEndpointSendBytesTo helicsEndpointSendEventRaw -> helicsEndpointSendBytesToAt","title":"Functions"},{"location":"migration-helics2-helics3/#related-to-counting","text":"The following functions have been renamed: helicsFederatePendingMessages -> helicsFederatePendingMessagesCount helicsEndpointPendingMessages -> helicsEndpointPendingMessagesCount","title":"Related to counting"},{"location":"migration-helics2-helics3/#enumerations","text":"Enumerations are constants now, and are represented by upper case variables: # helics v2 h . helicsFederateInfoSetIntegerProperty ( fedInfo1 , h . helics_property_int_log_level , 1 ) h . helicsFederateInfoSetIntegerProperty ( fedInfo1 , h . helics_property_int_max_iterations , 100 ) # helics v3 h . helicsFederateInfoSetIntegerProperty ( fedInfo1 , h . HELICS_PROPERTY_INT_LOG_LEVEL , 1 ) h . helicsFederateInfoSetIntegerProperty ( fedInfo1 , h . HELICS_PROPERTY_INT_MAX_ITERATIONS , 100 )","title":"Enumerations"},{"location":"migration-helics2-helics3/#new-functionality","text":"If you would like to use callbacks you can do the following in HELICS v3.x.x: @h . ffi . callback ( \"void logger(HelicsMessage, void* userData)\" ) def filterFunc1 ( mess , user_data ): time = h . helicsMessageGetTime ( mess ) user_data = h . ffi . from_handle ( user_data ) h . helicsMessageSetTime ( mess , time + 2.5 ) user_data += 1 class UserData ( object ): def __init__ ( self , x ): self . x = x ... user_data = UserData ( 5 ) handle = h . ffi . new_handle ( user_data ) h . helicsFilterSetCustomCallback ( f1 , filterFunc1 , handle ) ... Find the signature of the function that you\u2019d like to call, use h.ffi.callback as a python decorator for that function. In HELICS v3, @h . ffi . callback ( \"void logger(HelicsMessage, void* userData)\" ) In HELICS v2.x.x, use helics_message_object instead. @h . ffi . callback ( \"void logger(helics_message_object, void* userData)\" ) Then, you can pass the variable that contains a reference to this C function to a helics callback function. The user is responsible for managing memory with relation to these objects. See cffi \u2018s documentation for more information.","title":"New functionality"},{"location":"pythonic-interface/","text":"Pythonic interface \u00b6 Example of what it looks like to use the Pythonic interface: import helics as h broker = h . helicsCreateBroker ( \"zmq\" , \"\" , \"-f 1 --name=mainbroker\" ) fedinfo = h . helicsCreateFederateInfo () fedinfo . core_name = \"TestFederate\" fedinfo . core_type = \"zmq\" fedinfo . core_init = \"-f 1 --broker=mainbroker\" mFed = h . helicsCreateCombinationFederate ( \"TestFederate\" , fedinfo ) mFed . register_endpoint ( \"ep1\" ) mFed . register_global_endpoint ( \"ep2\" ) mFed . property [ h . HELICS_PROPERTY_TIME_DELTA ] = 1.0 pub = mFed . register_publication ( \"publication\" , h . HELICS_DATA_TYPE_STRING , \"custom-units\" ) sub = mFed . register_subscription ( \"TestFederate/publication\" , \"custom-units\" ) sub . option [ \"CONNECTION_REQUIRED\" ] = 1 sub . set_default ( b \"hello\" ) sub . set_default ( \"world\" ) sub . set_default ( 0 ) sub . set_default ( True ) sub . set_default ( 1.1 ) sub . set_default ( 2 + 1.1 j ) sub . set_default ([ 1.0 , 2.0 , 3.0 ]) sub . info = \"hello world\" mFed . publications [ \"TestFederate/publication\" ] . option [ \"CONNECTION_REQUIRED\" ] = 1 mFed . enter_executing_mode () data = \"random-data\" mFed . endpoints [ \"TestFederate/ep1\" ] . default_destination = \"ep2\" mFed . endpoints [ \"TestFederate/ep1\" ] . info = \"information\" mFed . endpoints [ \"TestFederate/ep1\" ] . send_data ( data , \"ep2\" , 1.0 ) mFed . publications [ \"TestFederate/publication\" ] . publish ( \"first-time\" ) assert mFed . request_time ( 2.0 ) == 1.0 print ( \"\"\"mFed.subscriptions[\"TestFederate/publication\"].bytes: \"\"\" , mFed . subscriptions [ \"TestFederate/publication\" ] . bytes ) assert mFed . subscriptions [ \"TestFederate/publication\" ] . bytes == b \"first-time\" print ( \"Exiting...\" )","title":"Pythonic API"},{"location":"pythonic-interface/#pythonic-interface","text":"Example of what it looks like to use the Pythonic interface: import helics as h broker = h . helicsCreateBroker ( \"zmq\" , \"\" , \"-f 1 --name=mainbroker\" ) fedinfo = h . helicsCreateFederateInfo () fedinfo . core_name = \"TestFederate\" fedinfo . core_type = \"zmq\" fedinfo . core_init = \"-f 1 --broker=mainbroker\" mFed = h . helicsCreateCombinationFederate ( \"TestFederate\" , fedinfo ) mFed . register_endpoint ( \"ep1\" ) mFed . register_global_endpoint ( \"ep2\" ) mFed . property [ h . HELICS_PROPERTY_TIME_DELTA ] = 1.0 pub = mFed . register_publication ( \"publication\" , h . HELICS_DATA_TYPE_STRING , \"custom-units\" ) sub = mFed . register_subscription ( \"TestFederate/publication\" , \"custom-units\" ) sub . option [ \"CONNECTION_REQUIRED\" ] = 1 sub . set_default ( b \"hello\" ) sub . set_default ( \"world\" ) sub . set_default ( 0 ) sub . set_default ( True ) sub . set_default ( 1.1 ) sub . set_default ( 2 + 1.1 j ) sub . set_default ([ 1.0 , 2.0 , 3.0 ]) sub . info = \"hello world\" mFed . publications [ \"TestFederate/publication\" ] . option [ \"CONNECTION_REQUIRED\" ] = 1 mFed . enter_executing_mode () data = \"random-data\" mFed . endpoints [ \"TestFederate/ep1\" ] . default_destination = \"ep2\" mFed . endpoints [ \"TestFederate/ep1\" ] . info = \"information\" mFed . endpoints [ \"TestFederate/ep1\" ] . send_data ( data , \"ep2\" , 1.0 ) mFed . publications [ \"TestFederate/publication\" ] . publish ( \"first-time\" ) assert mFed . request_time ( 2.0 ) == 1.0 print ( \"\"\"mFed.subscriptions[\"TestFederate/publication\"].bytes: \"\"\" , mFed . subscriptions [ \"TestFederate/publication\" ] . bytes ) assert mFed . subscriptions [ \"TestFederate/publication\" ] . bytes == b \"first-time\" print ( \"Exiting...\" )","title":"Pythonic interface"},{"location":"usage/","text":"Usage \u00b6 This document will a simple 2 federate co-simulation in Python. Broker \u00b6 import helics as h broker = h . helicsCreateBroker ( \"zmq\" , \"\" , \"-f 2 --name=mainbroker\" ) while h . helicsBrokerIsConnected ( broker ): time . sleep ( 1 ) Federate 1 \u00b6 import time import helics as h from math import pi fedinfo = h . helicsCreateFederateInfo () h . helicsFederateInfoSetCoreName ( fedinfo , \"Federate1\" ) h . helicsFederateInfoSetCoreTypeFromString ( fedinfo , \"zmq\" ) h . helicsFederateInfoSetCoreInitString ( fedinfo , \"--broker=mainbroker --federates=1\" ) h . helicsFederateInfoSetTimeProperty ( fedinfo , h . HELICS_PROPERTY_TIME_DELTA , 0.01 ) vfed = h . helicsCreateValueFederate ( \"Federate1\" , fedinfo ) pub = h . helicsFederateRegisterGlobalTypePublication ( vfed , \"topic_name\" , \"double\" , \"\" ) h . helicsFederateEnterExecutingMode ( vfed ) this_time = 0.0 for t in range ( 5 , 10 ): currenttime = h . helicsFederateRequestTime ( vfed , t ) h . helicsPublicationPublishDouble ( pub , pi ) print ( \"SENDER: Sending value pi = {} at time {} to RECEIVER\" . format ( pi , currenttime )) time . sleep ( 1 ) h . helicsFederateFinalize ( vfed ) h . helicsFederateFree ( vfed ) h . helicsCloseLibrary () Federate 2 \u00b6 import helics as h fedinfo = h . helicsCreateFederateInfo () h . helicsFederateInfoSetCoreName ( fedinfo , \"Federate2\" ) h . helicsFederateInfoSetCoreTypeFromString ( fedinfo , \"zmq\" ) h . helicsFederateInfoSetCoreInitString ( fedinfo , \"--federates=1\" ) h . helicsFederateInfoSetTimeProperty ( fedinfo , h . HELICS_PROPERTY_TIME_DELTA , 0.01 ) vfed = h . helicsCreateValueFederate ( \"Federate2\" , fedinfo ) sub = h . helicsFederateRegisterSubscription ( vfed , \"topic_name\" , \"\" ) h . helicsFederateEnterExecutingMode ( vfed ) value = 0.0 currenttime = - 1 while currenttime <= 100 : currenttime = h . helicsFederateRequestTime ( vfed , 100 ) value = h . helicsInputGetString ( sub ) print ( \"RECEIVER: Received value = {} at time {} from SENDER\" . format ( value , currenttime )) h . helicsFederateFinalize ( vfed ) h . helicsFederateFree ( vfed ) h . helicsCloseLibrary ()","title":"Usage"},{"location":"usage/#usage","text":"This document will a simple 2 federate co-simulation in Python.","title":"Usage"},{"location":"usage/#broker","text":"import helics as h broker = h . helicsCreateBroker ( \"zmq\" , \"\" , \"-f 2 --name=mainbroker\" ) while h . helicsBrokerIsConnected ( broker ): time . sleep ( 1 )","title":"Broker"},{"location":"usage/#federate-1","text":"import time import helics as h from math import pi fedinfo = h . helicsCreateFederateInfo () h . helicsFederateInfoSetCoreName ( fedinfo , \"Federate1\" ) h . helicsFederateInfoSetCoreTypeFromString ( fedinfo , \"zmq\" ) h . helicsFederateInfoSetCoreInitString ( fedinfo , \"--broker=mainbroker --federates=1\" ) h . helicsFederateInfoSetTimeProperty ( fedinfo , h . HELICS_PROPERTY_TIME_DELTA , 0.01 ) vfed = h . helicsCreateValueFederate ( \"Federate1\" , fedinfo ) pub = h . helicsFederateRegisterGlobalTypePublication ( vfed , \"topic_name\" , \"double\" , \"\" ) h . helicsFederateEnterExecutingMode ( vfed ) this_time = 0.0 for t in range ( 5 , 10 ): currenttime = h . helicsFederateRequestTime ( vfed , t ) h . helicsPublicationPublishDouble ( pub , pi ) print ( \"SENDER: Sending value pi = {} at time {} to RECEIVER\" . format ( pi , currenttime )) time . sleep ( 1 ) h . helicsFederateFinalize ( vfed ) h . helicsFederateFree ( vfed ) h . helicsCloseLibrary ()","title":"Federate 1"},{"location":"usage/#federate-2","text":"import helics as h fedinfo = h . helicsCreateFederateInfo () h . helicsFederateInfoSetCoreName ( fedinfo , \"Federate2\" ) h . helicsFederateInfoSetCoreTypeFromString ( fedinfo , \"zmq\" ) h . helicsFederateInfoSetCoreInitString ( fedinfo , \"--federates=1\" ) h . helicsFederateInfoSetTimeProperty ( fedinfo , h . HELICS_PROPERTY_TIME_DELTA , 0.01 ) vfed = h . helicsCreateValueFederate ( \"Federate2\" , fedinfo ) sub = h . helicsFederateRegisterSubscription ( vfed , \"topic_name\" , \"\" ) h . helicsFederateEnterExecutingMode ( vfed ) value = 0.0 currenttime = - 1 while currenttime <= 100 : currenttime = h . helicsFederateRequestTime ( vfed , 100 ) value = h . helicsInputGetString ( sub ) print ( \"RECEIVER: Received value = {} at time {} from SENDER\" . format ( value , currenttime )) h . helicsFederateFinalize ( vfed ) h . helicsFederateFree ( vfed ) h . helicsCloseLibrary ()","title":"Federate 2"},{"location":"api/","text":"Module helics \u00b6 Submodules \u00b6 helics.capi helics.helics-broker-cli helics.helics_build helics.vcredist","title":"API"},{"location":"api/#module-helics","text":"","title":"Module helics"},{"location":"api/#submodules","text":"helics.capi helics.helics-broker-cli helics.helics_build helics.vcredist","title":"Submodules"},{"location":"api/capi-py/","text":"Module helics.capi \u00b6 Classes \u00b6 HelicsBroker \u00b6 class HelicsBroker ( handle ) Base classes \u00b6 helics.capi._HelicsCHandle Instance attributes \u00b6 address Get the connection address for the broker. identifier Get the local identification for the broker. name Get the local identification for the broker. Methods \u00b6 add_destination_filter_to_endpoint def add_destination_filter_to_endpoint ( self , filter : str , target : str ) Create a filter connection between a named filter and a named endpoint for destination processing. Parameters filter : the name of the filter. target : the name of the source target. add_source_filter_to_endpoint def add_source_filter_to_endpoint ( self , filter : str , target : str ) Create a filter connection between a named filter and a named endpoint for messages coming from that endpoint. Parameters filter : the name of the filter. target : the name of the source target. data_link def data_link ( self , source : str , target : str ) Create a data link between a named publication and a named input. Parameters source : the name of the publication. target : the name of the input. disconnect def disconnect ( self ) Disconnect the broker from any other brokers and communications. is_connected def is_connected ( self ) Check if the broker is connected. query def query ( self , target : str , query : str ) -> JSONType Make a query of the broker. This call is blocking until the value is returned which may take some time depending on the size of the federation and the specific string being queried. Parameters target : the target of the query can be \u201cfederation\u201d, \u201cfederate\u201d, \u201cbroker\u201d, \u201ccore\u201d, or a specific name of a federate, core, or broker. query : a string with the query, see other documentation for specific properties to query, can be defined by the federate. Returns: a string with the value requested. This is either going to be a vector of strings value or a JSON string stored in the first element of the vector. The string \u201c#invalid\u201d is returned if the query was not valid. set_global def set_global ( self , name : str , value : str ) Set a federation global value. This overwrites any previous value for this name. globals can be queried with a target of \u201cglobal\u201d and query of the value to Query. Parameters name : the name of the global to set. value : the value of the global. wait_for_disconnect def wait_for_disconnect ( self , ms_to_wait : int = - 1 ) Waits in the current thread until the broker is disconnected. Parameters ms_to_wait : the timeout to wait for disconnect (-1) implies no timeout Returns: True if the disconnect was successful false if it timed out HelicsCloningFilter \u00b6 class HelicsCloningFilter ( handle ) Base classes \u00b6 HelicsFilter Instance attributes \u00b6 info Get the interface information field of the filter. name HelicsCombinationFederate \u00b6 class HelicsCombinationFederate ( handle ) Base classes \u00b6 HelicsMessageFederate HelicsValueFederate Instance attributes \u00b6 core current_time n_endpoints n_filters n_inputs n_pending_messages Returns the number of pending receives for all endpoints. n_publications Get the number of publications in this federate. n_subscriptions Get the number of inputs in this federate. name separator state HelicsCore \u00b6 class HelicsCore ( handle ) Base classes \u00b6 helics.capi._HelicsCHandle Instance attributes \u00b6 address Get the connection network or connection address for the core. identifier Get an identifier string for the core. Methods \u00b6 clone def clone ( self ) disconnect def disconnect ( self ) Disconnect the core from its broker. is_connected def is_connected ( self ) -> bool Check if the core is connected to the broker. is_valid def is_valid ( self ) -> bool Check if the core is valid. query def query ( self , target : str , query : str ) -> JSONType Make a query of the core. This call is blocking until the value is returned which may take some time depending on the size of the federation and the specific string being queried target : the target of the query can be \u201cfederation\u201d, \u201cfederate\u201d, \u201cbroker\u201d, \u201ccore\u201d, or a specific name of a federate, core, or broker query : a string with the query, see other documentation for specific properties to query, can be defined by the federate Returns: a string with the value requested. this is either going to be a vector of strings value or a JSON string stored in the first element of the vector. The string \u201c#invalid\u201d is returned if the query was not valid register_cloning_filter def register_cloning_filter ( self , delivery_endpoint : str ) -> HelicsCloningFilter Create a cloning Filter on the specified federate. Cloning filters copy a message and send it to multiple locations source and destination can be added through other functions Parameters delivery_endpoint : the specified endpoint to deliver the message Returns: a helics.HelicsFilter object. register_filter def register_filter ( self , kind : HelicsFilterType , name : str = \"\" ) -> HelicsFilter Create a destination Filter on the specified federate. Filters can be created through a federate or a core , linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior kind : the type of filter to create name : the name of the filter (can be NULL) Returns: a helics.HelicsFilter object. set_global def set_global ( self , name : str , value : str ) Set a global federation value. Parameters name : the name of the global value to set value : actual value of the global variable set_ready_to_init def set_ready_to_init ( self ) Set the core to ready to enter init. This function only needs to be called for cores that don\u2019t have any federates but may have filters for cores with federates it won\u2019t do anything. wait_for_disconnect def wait_for_disconnect ( self , ms_to_wait : int = - 1 ) -> bool Waits in the current thread until the broker is disconnected Parameters ms_to_wait : the timeout to wait for disconnect (-1) implies no timeout Returns: true if the disconnect was successful false if it timed out. HelicsCoreType \u00b6 class HelicsCoreType ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) DEFAULT = 0 TEST = 3 INTERPROCESS = 4 IPC = 5 TCP = 6 UDP = 7 NNG = 9 ZMQ_TEST = 10 TCP_SS = 11 HTTP = 12 WEBSOCKET = 14 INPROC = 18 NULL = 66 Base classes \u00b6 enum.IntEnum HelicsDataType \u00b6 class HelicsDataType ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) STRING = 0 DOUBLE = 1 INT = 2 COMPLEX = 3 VECTOR = 4 COMPLEX_VECTOR = 5 NAMED_POINT = 6 BOOLEAN = 7 TIME = 8 RAW = 25 MULTI = 33 ANY = 25262 Base classes \u00b6 enum.IntEnum HelicsEndpoint \u00b6 class HelicsEndpoint ( handle ) Base classes \u00b6 helics.capi._HelicsCHandle Instance attributes \u00b6 default_destination Get the default destination for an endpoint. info Get the interface information field of the filter. n_pending_messages Returns the number of pending receives for endpoint. name Get the name of the endpoint. type Get the specified type of the endpoint. Methods \u00b6 create_message def create_message ( self ) -> HelicsMessage Create a message object. get_message def get_message ( self ) -> HelicsMessage Get a packet from an endpoint. has_message def has_message ( self ) -> bool Checks if endpoint has unread messages. is_valid def is_valid ( self ) -> bool Check if the input is valid. send_data def send_data ( self , data : Union [ bytes , HelicsMessage ], destination : str = None , time = None ) HelicsError \u00b6 class HelicsError ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) FATAL = -404 EXTERNAL_TYPE = -203 OTHER = -101 INSUFFICIENT_SPACE = -18 EXECUTION_FAILURE = -14 INVALID_FUNCTION_CALL = -10 INVALID_STATE_TRANSITION = -9 WARNING = -8 SYSTEM_FAILURE = -6 DISCARD = -5 INVALID_ARGUMENT = -4 INVALID_OBJECT = -3 CONNECTION_FAILURE = -2 REGISTRATION_FAILURE = -1 OK = 0 Base classes \u00b6 enum.IntEnum HelicsException \u00b6 class HelicsException ( self , * args , ** kwargs ) Common base class for all non-exit exceptions. Base classes \u00b6 builtins.Exception HelicsFederate \u00b6 class HelicsFederate ( self , handle ) Initialize self. See help(type(self)) for accurate signature. Base classes \u00b6 helics.capi._HelicsCHandle Instance attributes \u00b6 core current_time n_endpoints n_filters n_inputs n_pending_messages Returns the number of pending receives for all endpoints. n_publications name separator state Methods \u00b6 add_dependency def add_dependency ( self , federate_name ) Add a dependency for this federate. Adds an additional internal time dependency for the federate. Parameters fed_name : the name of the federate to add a dependency on. enter_executing_mode def enter_executing_mode ( self , iterate : HelicsIterationRequest = HelicsIterationRequest . NO_ITERATION ) Enter the normal execution mode. Call will block until all federates have entered this mode. Parameters iterate : An optional flag indicating the desired iteration mode. enter_executing_mode_async def enter_executing_mode_async ( self , iterate : HelicsIterationRequest = HelicsIterationRequest . NO_ITERATION ) Enter the normal execution mode. Call will return immediately but enter_executing_mode_complete should be called to complete the operation. Parameters iterate : An optional flag indicating the desired iteration mode. enter_executing_mode_complete def enter_executing_mode_complete ( self ) Complete the async call for entering Execution state. Call will not block but will return quickly. The enter_initializing_mode_complete must be called before doing other operations. enter_initializing_mode def enter_initializing_mode ( self ) Enter the initialization mode after all interfaces have been defined. The call will block until all federates have entered initialization mode. enter_initializing_mode_async def enter_initializing_mode_async ( self ) Enter the initialization mode after all interfaces have been defined. The call will not block but a call to enter_initializing_mode_complete should be made to complete the call sequence. enter_initializing_mode_complete def enter_initializing_mode_complete ( self ) Second part of the async process for entering initializationState call after a call to enter_initializing_mode_async if call any other time it will throw an InvalidFunctionCall exception finalize def finalize ( self ) Terminate the simulation. Call is will block until the finalize has been acknowledged, no commands that interact with the core may be called after this function function. finalize_async def finalize_async ( self ) Terminate the simulation in a non-blocking call. self.finalize_complete() must be called after this call to complete the finalize procedure. finalize_complete def finalize_complete ( self ) Complete the asynchronous terminate pair. get_filter_by_index def get_filter_by_index ( self , filter_index ) Get a filter by index. Parameters index : the index of a filter. Returns: A reference to a filter object which could be invalid if filter_name is not valid. get_filter_by_name def get_filter_by_name ( self , filter_name ) Get the id of a source filter from the name of the endpoint. Parameters filter_name : the name of the filter. Returns: a reference to a filter object which could be invalid if filter_name is not valid. global_error def global_error ( self , error_code : int , error_string : str ) Generate a global error to terminate the federation. Parameters error_code : an error code to give to the error. error_string : a string message associated with the error. is_async_operation_completed def is_async_operation_completed ( self ) Called after one of the async calls and will indicate true if an async operation has completed. Only call from the same thread as the one that called the initial async call and will return false if called when no aysnc operation is in flight local_error def local_error ( self , error_code : int , error_string : str ) Generate a local federate error. Parameters error_code : an error code to give to the error. error_string : a string message associated with the error. log_message def log_message ( self , message : str , level : HelicsLogLevel ) Log an message. query def query ( self , target : str , query : str ) -> JSONType Make a query of the federate. This call is blocking until the value is returned which make take some time depending on the size of the federation and the specific string being queried. Parameters target : the target of the query can be \u201cfederation\u201d, \u201cfederate\u201d, \u201cbroker\u201d, \u201ccore\u201d, or a specific name of a federate, core, or broker. query : a string with the query see other documentation for specific properties to query, can be defined by the federate. Returns: a string with the value requested. this is either going to be a vector of strings value or a JSON string stored in the first element of the vector. The string \u201c#invalid\u201d is returned if the query was not valid. register_cloning_filter def register_cloning_filter ( self , delivery_endpoint : str ) -> HelicsCloningFilter Create a HelicsCloningFilter on the specified federate. Cloning filters copy a message and send it to multiple locations source and destination can be added through other functions. Parameters delivery_endpoint : the specified endpoint to deliver the message. Returns: A HelicsCloningFilter object. register_filter def register_filter ( self , kind : HelicsFilterType , filter_name : str ) -> HelicsFilter Define a filter interface. A filter will modify messages coming from or going to target endpoints. Parameters kind : the type of the filter to register. filter_name : the name of the filter. register_global_cloning_filter def register_global_cloning_filter ( self , delivery_endpoint : str ) -> HelicsCloningFilter Create a cloning Filter on the specified federate Cloning filters copy a message and send it to multiple locations source and destination can be added through other functions. Parameters delivery_endpoint : the specified endpoint to deliver the message. Returns: A CloningFilter object. register_global_filter def register_global_filter ( self , kind : HelicsFilterType , filter_name : str ) -> HelicsFilter Define a filter interface. A filter will modify messages coming from or going to target endpoints. Parameters kind : the type of the filter to register. filter_name : the name of the filter. register_interfaces def register_interfaces ( self , config ) Register a set of interfaces defined in a file. Call is only valid in startup mode Parameters configString : the location of the file or config String to load to generate the interfaces request_next_step def request_next_step ( self ) -> HelicsTime Request a time advancement to the next allowed time. Returns: The granted time step. request_time def request_time ( self , time : HelicsTime ) -> HelicsTime Parameters time : the next requested time step. Returns: The granted time step. request_time_advance def request_time_advance ( self , time_delta : HelicsTime ) -> HelicsTime Request a time advancement to the next allowed time. Parameters timeDelta : The amount of time requested to advance. Returns: The granted time step. request_time_async def request_time_async ( self , time : HelicsTime ) Request a time advancement and return immediately for asynchronous function. self.request_time_complete() should be called to finish the operation and get the result. Parameters time : the next requested time step request_time_complete def request_time_complete ( self ) -> HelicsTime Request a time advancement. Returns: the granted time step. request_time_iterative def request_time_iterative ( self , time : float , iterate : HelicsIterationRequest ) -> Tuple [ HelicsTime , HelicsIterationResult ] Request a time advancement. Parameters time : the next requested time step. iterate : a requested iteration mode. Returns: The granted time step in a structure containing a return time and an iteration_result. request_time_iterative_async def request_time_iterative_async ( self , time : float , iterate : HelicsIterationRequest ) Request a time advancement with iterative call and return for asynchronous function. self.request_time_iterative_complete() should be called to finish the operation and get the result. Parameters time : the next requested time step. iterate : a requested iteration level (none, require, optional). request_time_iterative_complete def request_time_iterative_complete ( self ) -> Tuple [ HelicsTime , HelicsIterationResult ] Finalize the time advancement request. Returns: the granted time step and iteration result. set_global def set_global ( self , name : str , value : str ) Set a federation global value. This overwrites any previous value for this name. Parameters name : the name of the global to set. value : the value of the global. HelicsFederateFlag \u00b6 class HelicsFederateFlag ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) OBSERVER = 0 UNINTERRUPTIBLE = 1 INTERRUPTIBLE = 2 SOURCE_ONLY = 4 ONLY_TRANSMIT_ON_CHANGE = 6 ONLY_UPDATE_ON_CHANGE = 8 WAIT_FOR_CURRENT_TIME_UPDATE = 10 RESTRICTIVE_TIME_POLICY = 11 REALTIME = 16 SLOW_RESPONDING = 29 DELAY_INIT_ENTRY = 45 ENABLE_INIT_ENTRY = 47 IGNORE_TIME_MISMATCH_WARNINGS = 67 TERMINATE_ON_ERROR = 72 Base classes \u00b6 enum.IntEnum HelicsFederateInfo \u00b6 class HelicsFederateInfo ( self , handle ) Initialize self. See help(type(self)) for accurate signature. Base classes \u00b6 helics.capi._HelicsCHandle Instance attributes \u00b6 broker broker_init broker_key broker_port core_init core_name core_type local_port separator HelicsFederateState \u00b6 class HelicsFederateState ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) STARTUP = 0 INITIALIZATION = 1 EXECUTION = 2 FINALIZE = 3 ERROR = 4 PENDING_INIT = 5 PENDING_EXEC = 6 PENDING_TIME = 7 PENDING_ITERATIVE_TIME = 8 PENDING_FINALIZE = 9 Base classes \u00b6 enum.IntEnum HelicsFilter \u00b6 class HelicsFilter ( self , handle ) Initialize self. See help(type(self)) for accurate signature. Base classes \u00b6 helics.capi._HelicsCHandle Instance attributes \u00b6 info Get the interface information field of the filter. name Methods \u00b6 add_delivery_endpoint def add_delivery_endpoint ( self , delivery_endpoint : str ) Add a delivery destination from a filter. Parameters delivery_endpoint - A string with the delivery endpoint to add. add_destination_target def add_destination_target ( self , destination : str ) Add a destination target to a cloning filter. All messages going to a destination are copied to the delivery address(es). add_source_target def add_source_target ( self , source : str ) Add a source target to a cloning filter. All messages coming from a source are copied to the delivery address(es). remove_delivery_endpoint def remove_delivery_endpoint ( self , delivery_endpoint : str ) Remove a delivery destination from a filter. Parameters delivery_endpoint - A string with the delivery endpoint to remove. remove_destination_target def remove_destination_target ( self , destination : str ) remove a destination target from a cloning filter. set def set ( self , property : str , value : float ) Set a property on a filter. HelicsFilterType \u00b6 class HelicsFilterType ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) CUSTOM = 0 DELAY = 1 RANDOM_DELAY = 2 RANDOM_DROP = 3 REROUTE = 4 CLONE = 5 FIREWALL = 6 Base classes \u00b6 enum.IntEnum HelicsHandleOption \u00b6 class HelicsHandleOption ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) CONNECTION_REQUIRED = 397 CONNECTION_OPTIONAL = 402 SINGLE_CONNECTION_ONLY = 407 MULTIPLE_CONNECTIONS_ALLOWED = 409 BUFFER_DATA = 411 STRICT_TYPE_CHECKING = 414 IGNORE_UNIT_MISMATCH = 447 ONLY_TRANSMIT_ON_CHANGE = 452 ONLY_UPDATE_ON_CHANGE = 454 IGNORE_INTERRUPTS = 475 MULTI_INPUT_HANDLING_METHOD = 507 INPUT_PRIORITY_LOCATION = 510 CLEAR_PRIORITY_LIST = 512 CONNECTIONS = 522 Base classes \u00b6 enum.IntEnum HelicsInput \u00b6 class HelicsInput ( self , handle ) Initialize self. See help(type(self)) for accurate signature. Base classes \u00b6 helics.capi._HelicsCHandle Instance attributes \u00b6 boolean Get the value as a boolean. bytes Get a raw value as a character vector. complex Get the value as a complex number. double Get the value as a double. info Get the interface information field of the filter. injection_units Get the units associated with an inputs publication. integer Get the current value as a 64 bit integer. key get the Name/Key for the input the name is the local name if given, key is the full key name. name get the Name/Key for the input the name is the local name if given, key is the full key name. named_point Get the current value as a named point. publication_type Get the units associated with a publication of an input. string Get the current value as a string. target Get an associated target. type Get the type of the input. units Get the units associated with a input. vector get the current value as a vector of doubles. Methods \u00b6 add_target def add_target ( self , target : str ) Add a publication target to the input. clear_update def clear_update ( self ) Clear the updated flag. get_last_update_time def get_last_update_time ( self ) -> HelicsTime Get the last time an input was updated. is_updated def is_updated ( self ) -> bool Check if an input is updated. is_valid def is_valid ( self ) -> bool Check if the input is valid. set_default def set_default ( self , data : Union [ bytes , str , int , bool , float , complex , List [ float ]]) Set the default value as a raw data Set the default value as a string Set the default value as an integer Set the default value as a bool Set the default value as a double Set the default value as a vector of doubles HelicsIterationRequest \u00b6 class HelicsIterationRequest ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) NO_ITERATION = 0 FORCE_ITERATION = 1 ITERATE_IF_NEEDED = 2 Base classes \u00b6 enum.IntEnum HelicsIterationResult \u00b6 class HelicsIterationResult ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) NEXT_STEP = 0 ERROR = 1 HALTED = 2 ITERATING = 3 Base classes \u00b6 enum.IntEnum HelicsLogLevel \u00b6 class HelicsLogLevel ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) NO_PRINT = -1 ERROR = 0 WARNING = 1 SUMMARY = 2 CONNECTIONS = 3 INTERFACES = 4 TIMING = 5 DATA = 6 TRACE = 7 Base classes \u00b6 enum.IntEnum HelicsMessage \u00b6 class HelicsMessage ( self , handle ) Initialize self. See help(type(self)) for accurate signature. Base classes \u00b6 helics.capi._HelicsCHandle Instance attributes \u00b6 data destination message_id original_dest original_destination original_source raw_data source time Methods \u00b6 append def append ( self , data : bytes ) is_valid def is_valid ( self ) -> bool HelicsMessageFederate \u00b6 class HelicsMessageFederate ( self , handle ) Initialize self. See help(type(self)) for accurate signature. Base classes \u00b6 HelicsFederate Instance attributes \u00b6 core current_time n_endpoints n_filters n_inputs n_pending_messages Returns the number of pending receives for all endpoints. n_publications name separator state Methods \u00b6 create_message def create_message ( self ) -> HelicsMessage Create a message object. get_endpoint_by_index def get_endpoint_by_index ( self , index : int ) -> HelicsEndpoint Get an Endpoint from an index. Parameters index : the index of the endpoint to retrieve index is 0 based Return an Endpoint get_endpoint_by_name def get_endpoint_by_name ( self , name : str ) -> HelicsEndpoint Get an Endpoint from its name. Parameters name : the name of the endpoint to retrieve. Returns: an Endpoint get_message def get_message ( self ) -> HelicsMessage Get a packet for any endpoints in the federate. has_message def has_message ( self ) -> bool Checks if federate has any messages. register_endpoint def register_endpoint ( self , name : str , kind : str = \"\" ) -> HelicsEndpoint Register an endpoint. Call is only valid in startup mode name : the name of the endpoint kind : the defined type of the interface for endpoint checking if requested Returns: an Endpoint Object register_global_endpoint def register_global_endpoint ( self , name : str , kind : str = \"\" ) -> HelicsEndpoint Register an endpoint directly without prepending the federate name. name : the name of the endpoint kind : the defined type of the interface for endpoint checking if requested Returns: an Endpoint Object HelicsMultiInputMode \u00b6 class HelicsMultiInputMode ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) NO_OP = 0 VECTORIZE_OPERATION = 1 AND_OPERATION = 2 OR_OPERATION = 3 SUM_OPERATION = 4 DIFF_OPERATION = 5 MAX_OPERATION = 6 MIN_OPERATION = 7 AVERAGE_OPERATION = 8 Base classes \u00b6 enum.IntEnum HelicsProperty \u00b6 class HelicsProperty ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) TIME_DELTA = 137 TIME_PERIOD = 140 TIME_OFFSET = 141 TIME_RT_LAG = 143 TIME_RT_LEAD = 144 TIME_RT_TOLERANCE = 145 TIME_INPUT_DELAY = 148 TIME_OUTPUT_DELAY = 150 INT_MAX_ITERATIONS = 259 INT_LOG_LEVEL = 271 INT_FILE_LOG_LEVEL = 272 INT_CONSOLE_LOG_LEVEL = 274 Base classes \u00b6 enum.IntEnum HelicsPublication \u00b6 class HelicsPublication ( self , handle ) Initialize self. See help(type(self)) for accurate signature. Base classes \u00b6 helics.capi._HelicsCHandle Instance attributes \u00b6 info Get the interface information field of the publication. key Get the key for the publication. name Get the key for the publication. type Get the type for the publication. units Get the units of the publication. Methods \u00b6 is_valid def is_valid ( self ) -> bool Check if the publication is valid. publish def publish ( self , data : Union [ bytes , str , int , complex , float , List [ float ], Tuple [ str , float ], bool ]) publish raw bytes publish a string publish an int value publish a double publish a complex number publish a vector of doubles publish a named point with a string and double publish a boolean value HelicsQuery \u00b6 class HelicsQuery ( handle ) Base classes \u00b6 helics.capi._HelicsCHandle HelicsValueFederate \u00b6 class HelicsValueFederate ( handle ) Base classes \u00b6 HelicsFederate Instance attributes \u00b6 core current_time n_endpoints n_filters n_inputs n_pending_messages Returns the number of pending receives for all endpoints. n_publications Get the number of publications in this federate. n_subscriptions Get the number of inputs in this federate. name separator state Methods \u00b6 clear_updates def clear_updates ( self ) Clear all the update flags from all federate inputs. get_publication_by_index def get_publication_by_index ( self , index : int ) -> HelicsPublication Get a publication by index. Parameters index : a 0 based index of the publication to retrieve Returns: a Publication object get_publication_by_name def get_publication_by_name ( self , name : str ) -> HelicsPublication Get publication by name. get_subscription_by_index def get_subscription_by_index ( self , index : int ) -> HelicsInput Get a subscription by index. get_subscription_by_name def get_subscription_by_name ( self , name : str ) -> HelicsInput Get an input by index. publish_json def publish_json ( self , data : Union [ dict , str ]) Publish data contained in a JSON file. register_from_publication_json def register_from_publication_json ( self , data : Union [ dict , str ]) -> HelicsPublication Register publications from a JSON output file or string. Generates interface based on the data contained in a JSON file or string. register_global_input def register_global_input ( self , name : str , kind : Union [ str , HelicsDataType ], units : str = \"\" ) -> HelicsInput Register an input. Call is only valid in startup mode. Parameters name : the name of the input kind : a string defining the type of the input units : a string defining the units of the input [optional] Returns: an input object for use as an identifier. register_global_publication def register_global_publication ( self , name : str , kind : Union [ str , HelicsDataType ], units : str = \"\" ) -> HelicsPublication Register a publication Call is only valid in startup mode Parameters name : the name of the publication kind : the type of the publication units : a string defining the units of the publication [optional] Returns: a publication object for use as an identifier register_input def register_input ( self , name : str , kind : Union [ str , HelicsDataType ], units : str = \"\" ) -> HelicsInput Register an input. Call is only valid in startup mode. Parameters name : the name of the input kind : the type of input to register units : a string defining the units of the input [optional] Returns: an input id object for use as an identifier register_publication def register_publication ( self , name : str , kind : Union [ str , HelicsDataType ], units : str = \"\" ) -> HelicsPublication Register a publication. Call is only valid in startup mode. Parameters name : the name of the publication. kind : the type of the publication. units : a string defining the units of the publication [optional] Returns: a publication id object for use as an identifier register_subscription def register_subscription ( self , name : str , units : str = \"\" ) -> HelicsInput Functions \u00b6 cchar \u00b6 def cchar ( c : str ) -> str cdouble \u00b6 def cdouble ( d : float ) -> float cstring \u00b6 def cstring ( s : str ) -> str helicsBrokerAddDestinationFilterToEndpoint \u00b6 def helicsBrokerAddDestinationFilterToEndpoint ( broker : HelicsBroker , filter_name : str , endpoint_name : str ) Link a named filter to a destination endpoint. Parameters broker - The broker to generate the connection from. filter - The name of the filter. endpoint - The name of the endpoint to filter the data going to. helicsBrokerAddSourceFilterToEndpoint \u00b6 def helicsBrokerAddSourceFilterToEndpoint ( broker : HelicsBroker , filter_name : str , endpoint_name : str ) Link a named filter to a source endpoint. Parameters broker - The broker to generate the connection from. filter - The name of the filter. endpoint - The name of the endpoint to filter the data from. helicsBrokerClearTimeBarrier \u00b6 def helicsBrokerClearTimeBarrier ( broker : HelicsBroker ) helicsBrokerClone \u00b6 def helicsBrokerClone ( broker : HelicsBroker ) -> HelicsBroker Create a new reference to an existing broker. This will create a new broker object that references the existing broker it must be freed as well. Parameters broker - An existing helics.HelicsBroker . Returns : helics.HelicsBroker . helicsBrokerDataLink \u00b6 def helicsBrokerDataLink ( broker : HelicsBroker , source_name : str , target_name : str ) Link a named publication and named input using a broker. Parameters broker - The broker to generate the connection from. source_name - The name of the publication. target_name - The name of the target to send the publication data. helicsBrokerDestroy \u00b6 def helicsBrokerDestroy ( broker : HelicsBroker ) Disconnect and free a broker. helicsBrokerDisconnect \u00b6 def helicsBrokerDisconnect ( broker : HelicsBroker ) Disconnect a broker. Parameters broker - The broker to disconnect. helicsBrokerFree \u00b6 def helicsBrokerFree ( broker : HelicsBroker ) Release the memory associated with a broker. helicsBrokerGetAddress \u00b6 def helicsBrokerGetAddress ( broker : HelicsBroker ) -> str Get the network address associated with a broker. Parameters broker - The broker to query. Returns : A string with the network address of the broker. helicsBrokerGetIdentifier \u00b6 def helicsBrokerGetIdentifier ( broker : HelicsBroker ) -> str Get an identifier for the broker. Parameters broker - The broker to query. Returns : A string containing the identifier for the broker. helicsBrokerIsConnected \u00b6 def helicsBrokerIsConnected ( broker : HelicsBroker ) -> bool Check if a broker is connected. A connected broker implies it is attached to cores or cores could reach out to communicate. Returns : True if connected, False if not connected. helicsBrokerIsValid \u00b6 def helicsBrokerIsValid ( broker : HelicsBroker ) -> bool Check if a broker object is a valid object. Parameters broker - The helics.HelicsBroker object to test. Returns : True if valid, False if not valid. helicsBrokerMakeConnections \u00b6 def helicsBrokerMakeConnections ( broker : HelicsBroker , file : str ) Load a file containing connection information. Parameters broker - The broker to generate the connections from. file - A JSON or TOML file containing connection information. helicsBrokerSendCommand \u00b6 def helicsBrokerSendCommand ( broker , target , command , err ) helicsBrokerSetGlobal \u00b6 def helicsBrokerSetGlobal ( broker : HelicsBroker , name : str , value : str ) Set a federation global value. This overwrites any previous value for this name. Parameters broker - The broker to set the global through. name - The name of the global to set. value - The value of the global. helicsBrokerSetLogFile \u00b6 def helicsBrokerSetLogFile ( broker : HelicsBroker , log_file : str ) Set the log file on a broker. Parameters broker - The broker to set the log file for. log_file - The name of the file to log to. helicsBrokerSetTimeBarrier \u00b6 def helicsBrokerSetTimeBarrier ( broker : HelicsBroker , barrier_time : HelicsTime ) Set the broker time barrier Parameters \u00b6 broker : the helics.HelicsBroker barrier_time : the barrier time helicsBrokerWaitForDisconnect \u00b6 def helicsBrokerWaitForDisconnect ( broker : HelicsBroker , ms_to_wait : int ) -> bool Wait for the broker to disconnect. Parameters broker - The broker to wait for. ms_to_wait - The time out in millisecond (<0 for infinite timeout). helicsCleanupLibrary \u00b6 def helicsCleanupLibrary () Function to do some housekeeping work. This runs some cleanup routines and tries to close out any residual thread that haven\u2019t been shutdown yet. helicsCloseLibrary \u00b6 def helicsCloseLibrary () Call when done using the helics library. This function will ensure the threads are closed properly. If possible this should be the last call before exiting. helicsCoreAddDestinationFilterToEndpoint \u00b6 def helicsCoreAddDestinationFilterToEndpoint ( core : HelicsCore , filter_name : str , endpoint_name : str ) Link a named filter to a destination endpoint. Parameters core - The core to generate the connection from. filter - The name of the filter. endpoint - The name of the endpoint to filter the data going to. helicsCoreAddSourceFilterToEndpoint \u00b6 def helicsCoreAddSourceFilterToEndpoint ( core : HelicsCore , filter_name : str , endpoint_name : str ) Link a named filter to a source endpoint. Parameters core - The core to generate the connection from. filter - The name of the filter. endpoint - The name of the endpoint to filter the data from. helicsCoreClone \u00b6 def helicsCoreClone ( core : HelicsCore ) -> HelicsCore Create a new reference to an existing core. This will create a new helics.HelicsCore that references the existing core. The new helics.HelicsCore must be freed as well. Parameters core - An existing helics.HelicsCore . Returns : helics.HelicsCore . helicsCoreConnect \u00b6 def helicsCoreConnect ( core : HelicsCore ) -> bool Connect a core to the federate based on current configuration. Parameters core - The core to connect. Returns : True if core is connected successfully, else False . helicsCoreDataLink \u00b6 def helicsCoreDataLink ( core : HelicsCore , source_name : str , target_name : str ) Link a named publication and named input using a core. Parameters core - The core to generate the connection from. source_name - The name of the publication. target_name - The name of the target to send the publication data. helicsCoreDestroy \u00b6 def helicsCoreDestroy ( core : HelicsCore ) Disconnect and free a core. helicsCoreDisconnect \u00b6 def helicsCoreDisconnect ( core : HelicsCore ) Disconnect a core from the federation. Parameters core - The core to query. helicsCoreFree \u00b6 def helicsCoreFree ( core : HelicsCore ) Release the memory associated with a core. helicsCoreGetAddress \u00b6 def helicsCoreGetAddress ( core : HelicsCore ) -> str Get the network address associated with a core. Parameters core - The core to query. Returns : A string with the network address of the broker. helicsCoreGetIdentifier \u00b6 def helicsCoreGetIdentifier ( core : HelicsCore ) -> str Get an identifier for the core. Parameters core - The core to query. Returns : A string with the identifier of the core. helicsCoreIsConnected \u00b6 def helicsCoreIsConnected ( core : HelicsCore ) -> bool Check if a core is connected. A connected core implies it is attached to federates or federates could be attached to it. Returns : True if connected, False if not connected. helicsCoreIsValid \u00b6 def helicsCoreIsValid ( core : HelicsCore ) -> bool Check if a helics.HelicsCore is a valid object. Parameters core - The helics.HelicsCore object to test. Returns : True if valid, False if not valid. helicsCoreMakeConnections \u00b6 def helicsCoreMakeConnections ( core : HelicsCore , file : str ) Load a file containing connection information. Parameters core - The core to generate the connections from. file - A JSON or TOML file containing connection information. helicsCoreRegisterCloningFilter \u00b6 def helicsCoreRegisterCloningFilter ( core : HelicsCore , name : str ) -> HelicsFilter Create a cloning Filter on the specified core. Cloning filters copy a message and send it to multiple locations, source and destination can be added through other functions. Parameters core - The core to register through. name - The name of the filter (can be NULL). Returns : helics.HelicsFilter . helicsCoreRegisterFilter \u00b6 def helicsCoreRegisterFilter ( core : HelicsCore , type : HelicsFilterType , name : str ) -> HelicsFilter Create a source Filter on the specified core. Filters can be created through a federate or a core.handle, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior. Parameters core - The core to register through. type - The type of filter to create helics.HelicsFilterType . name - The name of the filter (can be NULL). Returns : helics.HelicsFilter . helicsCoreSendCommand \u00b6 def helicsCoreSendCommand ( core , target , command , err ) helicsCoreSetGlobal \u00b6 def helicsCoreSetGlobal ( core : HelicsCore , name : str , value : str ) Set a global value in a core. This overwrites any previous value for this name. Parameters core - The core to set the global through. name - The name of the global to set. value - The value of the global. helicsCoreSetLogFile \u00b6 def helicsCoreSetLogFile ( core : HelicsCore , log_file : str ) Set the log file on a core. Parameters core - The core to set the log file for. log_file - The name of the file to log to. helicsCoreSetReadyToInit \u00b6 def helicsCoreSetReadyToInit ( core : HelicsCore ) Set the core to ready for init. This function is used for cores that have filters but no federates so there needs to be a direct signal to the core to trigger the federation initialization. Parameters core - The helics.HelicsCore to enable init values for. helicsCoreWaitForDisconnect \u00b6 def helicsCoreWaitForDisconnect ( core : HelicsCore , ms_to_wait : int ) -> bool Wait for the core to disconnect. Parameters core - The core to wait for. ms_to_wait - The time out in millisecond (<0 for infinite timeout). helicsCreateBroker \u00b6 def helicsCreateBroker ( type : str , name : str = \"\" , init_string : str = \"\" ) -> HelicsBroker Create a broker object Parameters type - The type of the broker to create. name - The name of the broker. It can be a nullptr or empty string to have a name automatically assigned. init_string - An initialization string to send to the core-the format is similar to command line arguments. Typical options include a broker address such as \u2013broker=\u201dXSSAF\u201d if this is a subbroker, or the number of federates, or the address. Returns : helics.HelicsBroker . helicsCreateBrokerFromArgs \u00b6 def helicsCreateBrokerFromArgs ( type : str , name : str , arguments : List [ str ]) -> HelicsBroker Create a helics.HelicsCore by passing command line arguments. Parameters type - The type of the core to create. name - The name of the core. It can be a nullptr or empty string to have a name automatically assigned. arguments - The list of string values from a command line. Returns : helics.HelicsBroker . helicsCreateCombinationFederate \u00b6 def helicsCreateCombinationFederate ( fed_name : str , fi : HelicsFederateInfo = None ) -> HelicsCombinationFederate Create a combination federate from helics.HelicsFederateInfo . Combination federates are both value federates and message federates, objects can be used in all functions that take a helics.HelicsFederate object as an argument. Parameters fed_name - A string with the name of the federate, can be NULL or an empty string to pull the default name from fi. fi - The federate info object that contains details on the federate. Returns : helics.HelicsCombinationFederate . helicsCreateCombinationFederateFromConfig \u00b6 def helicsCreateCombinationFederateFromConfig ( config_file : str ) -> HelicsCombinationFederate Create a combination federate from a JSON file or JSON string or TOML file. Combination federates are both value federates and message federates, objects can be used in all functions that take a helics.HelicsFederate object as an argument. Parameters config_file - A JSON file or a JSON string or TOML file that contains setup and configuration information. Returns : helics.HelicsCombinationFederate . helicsCreateCore \u00b6 def helicsCreateCore ( type : str , name : str , init_string : str ) -> HelicsCore Create a helics.HelicsCore . Parameters type - The type of the core to create. name - The name of the core. It can be a nullptr or empty string to have a name automatically assigned. init_string - An initialization string to send to the core. The format is similar to command line arguments. Typical options include a broker name, the broker address, the number of federates, etc. Returns : helics.HelicsCore . helicsCreateCoreFromArgs \u00b6 def helicsCreateCoreFromArgs ( type : str , name : str , arguments : List [ str ]) -> HelicsCore Create a helics.HelicsCore by passing command line arguments. Parameters type - The type of the core to create. name - The name of the core. It can be a nullptr or empty string to have a name automatically assigned. arguments - The list of string values from a command line. Returns : helics.HelicsCore . helicsCreateFederateInfo \u00b6 def helicsCreateFederateInfo () -> HelicsFederateInfo Create helics.HelicsFederateInfo for specifying federate information when constructing a federate. Returns : helics.HelicsFederateInfo . helicsCreateMessageFederate \u00b6 def helicsCreateMessageFederate ( fed_name : str , fi : HelicsFederateInfo = None ) -> HelicsMessageFederate Create helics.HelicsMessageFederate from helics.HelicsFederateInfo . helics.HelicsMessageFederate objects can be used in all functions that take a helics.HelicsFederate as an argument. Parameters fed_name - The name of the federate to create. fi - The federate info object that contains details on the federate. Returns : helics.HelicsMessageFederate . helicsCreateMessageFederateFromConfig \u00b6 def helicsCreateMessageFederateFromConfig ( config_file : str ) -> HelicsMessageFederate Create helics.HelicsMessageFederate from a JSON file or JSON string or TOML file. helics.HelicsMessageFederate objects can be used in all functions that take a helics.HelicsFederate object as an argument. Parameters config_file - A config (JSON,TOML) file or a JSON string that contains setup and configuration information. Returns : helics.HelicsMessageFederate . helicsCreateQuery \u00b6 def helicsCreateQuery ( target_name : str , query_string : str ) -> HelicsQuery Create a query object. A query object consists of a target and query string. Parameters target_name - The name of the target to query. query_string - The query to make of the target. Returns : helics.HelicsQuery . helicsCreateValueFederate \u00b6 def helicsCreateValueFederate ( fed_name : str , fi : HelicsFederateInfo = None ) -> HelicsValueFederate Creation and destruction of Federates. Create helics.HelicsValueFederate from helics.HelicsFederateInfo . helics.HelicsValueFederate objects can be used in all functions that take a helics.HelicsFederate as an argument. Parameters fed_name - The name of the federate to create, can NULL or an empty string to use the default name from fi or an assigned name. fi - The federate info object that contains details on the federate. Returns : helics.HelicsValueFederate . helicsCreateValueFederateFromConfig \u00b6 def helicsCreateValueFederateFromConfig ( config_file : str ) -> HelicsValueFederate Create helics.HelicsValueFederate from a JSON file, JSON string, or TOML file. helics.HelicsValueFederate objects can be used in all functions that take a helics.HelicsFederate as an argument. Parameters config_file - A JSON file or a JSON string or TOML file that contains setup and configuration information. Returns : helics.HelicsValueFederate . helicsEndpointAddDestinationFilter \u00b6 def helicsEndpointAddDestinationFilter ( endpoint : HelicsEndpoint , filter_name : str ) Add destination filter to endpoint Parameters \u00b6 endpoint - The endpoint. filter_name - The name of the filter. helicsEndpointAddDestinationTarget \u00b6 def helicsEndpointAddDestinationTarget ( endpoint : HelicsEndpoint , destination_name : str ) Add a destination target to a endpoint. All messages coming from a source are copied to the delivery address(es). Parameters \u00b6 endpoint - The given endpoint. source_name - The name of the endpoint to add as a source target. helicsEndpointAddSourceFilter \u00b6 def helicsEndpointAddSourceFilter ( endpoint : HelicsEndpoint , filter_name : str ) Add source filter to endpoint Parameters \u00b6 endpoint - The endpoint. filter_name - The name of the filter. helicsEndpointAddSourceTarget \u00b6 def helicsEndpointAddSourceTarget ( endpoint : HelicsEndpoint , source_name : str ) Add a source target to a endpoint. All messages coming from a source are copied to the delivery address(es). Parameters \u00b6 endpoint - The given endpoint. source_name - The name of the endpoint to add as a source target. helicsEndpointClearMessages \u00b6 def helicsEndpointClearMessages ( endpoint : HelicsEndpoint ) Clear all message from an endpoint. _**Deprecated: Use helics.helicsFederateClearMessages to free all messages, or helics.helicsMessageFree to clear an individual message. Parameters endpoint - The endpoint object to operate on. DEPRECATED helicsEndpointCreateMessage \u00b6 def helicsEndpointCreateMessage ( endpoint : HelicsEndpoint ) -> HelicsMessage Create a new empty message object. The message is empty and isValid will return false since there is no data associated with the message yet. Parameters endpoint - The endpoint object to associate the message with. helicsEndpointCreateMessageObject \u00b6 def helicsEndpointCreateMessageObject ( endpoint : HelicsEndpoint ) -> HelicsMessage Create a new empty message. The message is empty and isValid will return false since there is no data associated with the message yet. Parameters endpoint - The endpoint object to associate the message with. DEPRECATED helicsEndpointGetDefaultDestination \u00b6 def helicsEndpointGetDefaultDestination ( endpoint : HelicsEndpoint ) -> str Get the default destination for an endpoint. Parameters endpoint - The endpoint to set the destination for. Returns : A string with the default destination. helicsEndpointGetInfo \u00b6 def helicsEndpointGetInfo ( endpoint : HelicsEndpoint ) -> str Get the data in the info field of a filter. Parameters end - The filter to query. Returns : A string with the info field string. helicsEndpointGetMessage \u00b6 def helicsEndpointGetMessage ( endpoint : HelicsEndpoint ) -> HelicsMessage Receive a packet from a particular endpoint. Parameters endpoint - The identifier for the endpoint. Returns : A message object. helicsEndpointGetMessageObject \u00b6 def helicsEndpointGetMessageObject ( endpoint : HelicsEndpoint ) -> HelicsMessage Receive a packet from a particular endpoint. Parameters endpoint - The identifier for the endpoint. Returns : A message. DEPRECATED helicsEndpointGetName \u00b6 def helicsEndpointGetName ( endpoint : HelicsEndpoint ) -> str Get the name of an endpoint. Parameters endpoint - The endpoint object in question. Returns : The name of the endpoint. helicsEndpointGetOption \u00b6 def helicsEndpointGetOption ( endpoint : HelicsEndpoint , option : HelicsHandleOption ) -> int Get the value of handle option on an endpoint. Parameters endpoint - The endpoint to modify. option - Integer code for the option to set helics.HelicsHandleOption . Returns : the value of the option, for boolean options will be 0 or 1. helicsEndpointGetType \u00b6 def helicsEndpointGetType ( endpoint : HelicsEndpoint ) -> str Get the type specified for an endpoint. Parameters endpoint - The endpoint object in question. Returns : The defined type of the endpoint. helicsEndpointHasMessage \u00b6 def helicsEndpointHasMessage ( endpoint : HelicsEndpoint ) -> bool Check if a given endpoint has any unread messages. Parameters endpoint - The endpoint to check. Returns : True if the endpoint has a message, False otherwise. helicsEndpointIsValid \u00b6 def helicsEndpointIsValid ( endpoint : HelicsEndpoint ) -> bool Check if an endpoint is valid. Parameters endpoint - The endpoint object to check. Returns : True if the Endpoint object represents a valid endpoint. helicsEndpointPendingMessages \u00b6 def helicsEndpointPendingMessages ( endpoint : HelicsEndpoint ) -> int Returns the number of pending receives for all endpoints of a particular federate. Parameters endpoint - The endpoint to query. helicsEndpointPendingMessagesCount \u00b6 def helicsEndpointPendingMessagesCount ( endpoint : HelicsEndpoint ) -> int Returns the number of pending receives for all endpoints of a particular federate. Parameters endpoint - The endpoint to query. helicsEndpointRemoveTarget \u00b6 def helicsEndpointRemoveTarget ( endpoint : HelicsEndpoint , target : str ) Remove target from endpoint Parameters \u00b6 endpoint - The given endpoint. target_name - The name of the endpoint to remove. helicsEndpointSendBytesTo \u00b6 def helicsEndpointSendBytesTo ( endpoint : HelicsEndpoint , data : bytes , destination : str ) Send a message to the specified destination. Parameters endpoint - The endpoint to send the data from. data - The data to send. destination - The target destination. helicsEndpointSendBytesToAt \u00b6 def helicsEndpointSendBytesToAt ( endpoint : HelicsEndpoint , data : bytes , destination : str , time : HelicsTime ) Send a message at a specific time to the specified destination. Parameters endpoint - The endpoint to send the data from. data - The data to send. destination - The target destination. time - The time the message should be sent. helicsEndpointSendEventRaw \u00b6 def helicsEndpointSendEventRaw ( endpoint : HelicsEndpoint , destination : str , data : bytes , time : HelicsTime , ) Send a message at a specific time to the specified destination. Parameters endpoint - The endpoint to send the data from. destination - The target destination. data - The data to send. time - The time the message should be sent. DEPRECATED Use helicsEndpointSendBytesToAt instead. helicsEndpointSendMessage \u00b6 def helicsEndpointSendMessage ( endpoint : HelicsEndpoint , message : HelicsMessage ) Send a message object from a specific endpoint. Parameters endpoint - The endpoint to send the data from. message - The actual message to send which will be copied. helicsEndpointSendMessageObject \u00b6 def helicsEndpointSendMessageObject ( endpoint : HelicsEndpoint , message : HelicsMessage ) Send a message object from a specific endpoint. Parameters endpoint - The endpoint to send the data from. message - The actual message to send which will be copied. DEPRECATED helicsEndpointSendMessageObjectZeroCopy \u00b6 def helicsEndpointSendMessageObjectZeroCopy ( endpoint : HelicsEndpoint , message : HelicsMessage ) Send a message object from a specific endpoint. Parameters endpoint - The endpoint to send the data from. message - The actual message to send which will be copied. DEPRECATED helicsEndpointSendMessageRaw \u00b6 def helicsEndpointSendMessageRaw ( endpoint : HelicsEndpoint , destination : str , data : bytes ) Send a message to the specified destination. Parameters endpoint - The endpoint to send the data from. destination - The target destination. data - The data to send. DEPRECATED Use helicsEndpointSendBytesTo instead helicsEndpointSetDefaultDestination \u00b6 def helicsEndpointSetDefaultDestination ( endpoint : HelicsEndpoint , destination : str ) Set the default destination for an endpoint if no other endpoint is given. Parameters endpoint - The endpoint to set the destination for. destination - A string naming the desired default endpoint. helicsEndpointSetInfo \u00b6 def helicsEndpointSetInfo ( endpoint : HelicsEndpoint , info : str ) Set the data in the info field for a filter. Parameters endpoint - The endpoint to query. info - The string to set. helicsEndpointSetOption \u00b6 def helicsEndpointSetOption ( endpoint : HelicsEndpoint , option : HelicsHandleOption , value : int ) Set a handle option on an endpoint. Parameters endpoint - The endpoint to modify. option - Integer code for the option to set helics.HelicsHandleOption . value - The value to set the option to. helicsEndpointSubscribe \u00b6 def helicsEndpointSubscribe ( endpoint : HelicsEndpoint , name : str ) Subscribe an endpoint to a publication. Parameters endpoint - The endpoint to use. name - The name of the publication. helicsErrorClear \u00b6 def helicsErrorClear ( err : HelicsError ) Clear an error object. helicsErrorInitialize \u00b6 def helicsErrorInitialize () -> HelicsError Return an initialized error object. helicsFederateAddDependency \u00b6 def helicsFederateAddDependency ( fed : HelicsFederate , name : str ) Add a time dependency for a federate. The federate will depend on the given named federate for time synchronization. Parameters fed - The federate to add the dependency for. name - The name of the federate to depend on. helicsFederateClearMessages \u00b6 def helicsFederateClearMessages ( fed : HelicsFederate ) Clear all stored messages from a federate. This clears messages retrieved through helics.helicsFederateGetMessage or helics.helicsFederateGetMessageObject . Parameters fed - The federate to clear the message for. helicsFederateClearUpdates \u00b6 def helicsFederateClearUpdates ( fed : HelicsFederate ) Clear all the update flags from a federates inputs. Parameters fed - The value helics.HelicsFederate for which to clear update flags. helicsFederateClone \u00b6 def helicsFederateClone ( fed : HelicsFederate ) -> HelicsFederate Create a new reference to an existing federate. This will create a new helics.HelicsFederate object that references the existing federate. The new object must be freed as well. Parameters fed - An existing helics.HelicsFederate . Returns : helics.HelicsFederate . helicsFederateCreateMessage \u00b6 def helicsFederateCreateMessage ( fed : HelicsFederate ) -> HelicsMessage Create a new empty message object. The message is empty and isValid will return false since there is no data associated with the message yet. Parameters fed - the helics.HelicsFederate to associate the message with. helicsFederateCreateMessageObject \u00b6 def helicsFederateCreateMessageObject ( fed : HelicsFederate ) -> HelicsMessage Create a new empty message object. The message is empty and isValid will return false since there is no data associated with the message yet. Parameters fed - the helics.HelicsFederate to associate the message with. DEPRECATED helicsFederateDestroy \u00b6 def helicsFederateDestroy ( fed : HelicsFederate ) Disconnect and free a federate. helicsFederateEnterExecutingMode \u00b6 def helicsFederateEnterExecutingMode ( fed : HelicsFederate ) Request that the federate enter the Execution mode. This call is blocking until granted entry by the helics.HelicsCore . On return from this call the federate will be at time 0. For an asynchronous alternative call see helics.helicsFederateEnterExecutingModeAsync Parameters fed - A federate to change modes. helicsFederateEnterExecutingModeAsync \u00b6 def helicsFederateEnterExecutingModeAsync ( fed : HelicsFederate ) Request that the federate enter the Execution mode. This call is non-blocking and will return immediately. Call helics.helicsFederateEnterExecutingModeComplete to finish the call sequence Parameters fed - The helics.HelicsFederate to complete the call. helicsFederateEnterExecutingModeComplete \u00b6 def helicsFederateEnterExecutingModeComplete ( fed : HelicsFederate ) Complete the call to helics.helicsFederateEnterExecutingModeAsync . Parameters fed - The helics.HelicsFederate to complete the call. helicsFederateEnterExecutingModeIterative \u00b6 def helicsFederateEnterExecutingModeIterative ( fed : HelicsFederate , iterate : HelicsIterationRequest ) -> HelicsIterationResult Request an iterative time. This call allows for finer grain control of the iterative process than helics.helicsFederateRequestTime . It takes a time and iteration request, and returns a time and iteration status. Parameters fed - The federate to make the request of. iterate - helics.HelicsIterationRequest , i.e. the requested iteration mode. Returns : helics.HelicsIterationResult . helicsFederateEnterExecutingModeIterativeAsync \u00b6 def helicsFederateEnterExecutingModeIterativeAsync ( fed : HelicsFederate , iterate : HelicsIterationRequest ) Request an iterative entry to the execution mode. This call allows for finer grain control of the iterative process than helics.helicsFederateRequestTime . It takes a time and iteration request, and returns a time and iteration status. Parameters fed - The federate to make the request of. iterate - helics.HelicsIterationRequest , i.e. the requested iteration mode. helicsFederateEnterExecutingModeIterativeComplete \u00b6 def helicsFederateEnterExecutingModeIterativeComplete ( fed : HelicsFederate ,) -> HelicsIterationResult Complete the asynchronous iterative call into ExecutionMode. Parameters fed - The federate to make the request of. Returns : helics.HelicsIterationResult . helicsFederateEnterInitializingMode \u00b6 def helicsFederateEnterInitializingMode ( fed : HelicsFederate ) Initialization, execution, and time requests. Enter the initialization state of a federate. The initialization state allows initial values to be set and received if the iteration is requested on entry to the execution state. This is a blocking call and will block until the core allows it to proceed. Parameters fed - The federate to operate on. helicsFederateEnterInitializingModeAsync \u00b6 def helicsFederateEnterInitializingModeAsync ( fed : HelicsFederate ) Non blocking alternative to helics.helicsFederateEnterInitializingMode . The function helicsFederateEnterInitializationModeFinalize must be called to finish the operation. Parameters fed - The federate to operate on. helicsFederateEnterInitializingModeComplete \u00b6 def helicsFederateEnterInitializingModeComplete ( fed : HelicsFederate ) Finalize the entry to initialize mode that was initiated with helics.helicsEnterInitializingModeAsync . Parameters fed - The federate desiring to complete the initialization step. helicsFederateFinalize \u00b6 def helicsFederateFinalize ( fed : HelicsFederate ) Finalize the federate. This function halts all communication in the federate and disconnects it from the core. helicsFederateFinalizeAsync \u00b6 def helicsFederateFinalizeAsync ( fed : HelicsFederate ) Finalize the federate in an async call. helicsFederateFinalizeComplete \u00b6 def helicsFederateFinalizeComplete ( fed : HelicsFederate ) Complete the asynchronous finalize call. helicsFederateFree \u00b6 def helicsFederateFree ( fed : HelicsFederate ) Release the memory associated with a federate. helicsFederateGetCommand \u00b6 def helicsFederateGetCommand ( fed : HelicsFederate ) -> str helicsFederateGetCommandSource \u00b6 def helicsFederateGetCommandSource ( fed : HelicsFederate ) -> str helicsFederateGetCore \u00b6 def helicsFederateGetCore ( fed : HelicsFederate ) -> HelicsCore Get the helics.HelicsCore associated with a federate. Parameters fed - helics.HelicsFederate . Returns : helics.HelicsCore . helicsFederateGetCoreObject \u00b6 def helicsFederateGetCoreObject ( fed : HelicsFederate ) -> HelicsCore Get the helics.HelicsCore associated with a federate. Parameters fed - helics.HelicsFederate . Returns : helics.HelicsCore . helicsFederateGetCurrentTime \u00b6 def helicsFederateGetCurrentTime ( fed : HelicsFederate ) -> HelicsTime Get the current time of the federate. Parameters fed - The helics.HelicsFederate to query. Returns : helics.HelicsTime . helicsFederateGetEndpoint \u00b6 def helicsFederateGetEndpoint ( fed : HelicsFederate , name : str ) -> HelicsEndpoint Get an endpoint object from a name. Parameters fed - The message helics.HelicsFederate to use to get the endpoint. name - The name of the endpoint. Returns : helics.HelicsEndpoint . helicsFederateGetEndpointByIndex \u00b6 def helicsFederateGetEndpointByIndex ( fed : HelicsFederate , index : int ) -> HelicsEndpoint Get an endpoint by its index, typically already created via registerInterfaces file or something of that nature. Parameters fed - The helics.HelicsFederate in which to create a publication. index - The index of the publication to get. Returns : helics.HelicsEndpoint . helicsFederateGetEndpointCount \u00b6 def helicsFederateGetEndpointCount ( fed : HelicsFederate ) -> int Get the number of endpoints in a federate. Parameters fed - The message federate to query. Returns : (-1) if fed was not a valid federate, otherwise returns the number of endpoints. helicsFederateGetFilter \u00b6 def helicsFederateGetFilter ( fed : HelicsFederate , name : str ) -> HelicsFilter Get a filter by its name, typically already created via registerInterfaces file or something of that nature. Parameters fed - The helics.HelicsFederate to use to get the filter. name - The name of the filter. Returns : helics.HelicsFilter . helicsFederateGetFilterByIndex \u00b6 def helicsFederateGetFilterByIndex ( fed : HelicsFederate , index : int ) -> HelicsFilter Get a filter by its index, typically already created via registerInterfaces file or something of that nature. Parameters fed - The helics.HelicsFederate in which to create a publication. index - The index of the publication to get. Returns : helics.HelicsFilter . helicsFederateGetFilterCount \u00b6 def helicsFederateGetFilterCount ( fed : HelicsFederate ) -> int Get the number of filters registered through a federate. Parameters fed - The helics.HelicsFederate to use to get the filter. Returns : A count of the number of filters registered through a federate. helicsFederateGetFlagOption \u00b6 def helicsFederateGetFlagOption ( fed : HelicsFederate , flag : HelicsFederateFlag ) -> bool Get a flag value for a federate. Parameters fed - The federate to get the flag for. flag - The helics.HelicsFederateFlag to query. helicsFederateGetInput \u00b6 def helicsFederateGetInput ( fed : HelicsFederate , name : str ) -> HelicsInput Get an input object from a name. Parameters fed - The value helics.HelicsFederate to use to get the publication. name - The name of the input. Returns : helics.HelicsInput . helicsFederateGetInputByIndex \u00b6 def helicsFederateGetInputByIndex ( fed : HelicsFederate , index : int ) -> HelicsInput Get an input by its index, typically already created via registerInterfaces file or something of that nature. Parameters fed - The helics.HelicsFederate in which to create a publication. index - The index of the publication to get. Returns : helics.HelicsInput helicsFederateGetInputCount \u00b6 def helicsFederateGetInputCount ( fed : HelicsFederate ) -> int Get the number of subscriptions in a federate. Returns : (-1) if fed was not a valid federate otherwise returns the number of subscriptions. helicsFederateGetIntegerProperty \u00b6 def helicsFederateGetIntegerProperty ( fed : HelicsFederate , property : HelicsProperty ) -> int Get the current value of an integer property (such as a logging level). Parameters fed - The federate to get the flag for. property - A code for the property to set helics.HelicsProperty . helicsFederateGetMessage \u00b6 def helicsFederateGetMessage ( fed : HelicsFederate ) -> HelicsMessage Receive a communication message for any endpoint in the federate. The return order will be in order of endpoint creation. So all messages that are available for the first endpoint.handle, then all for the second, and so on. Within a single endpoint.handle, the messages are ordered by time, then source_id, then order of arrival. Returns : A helics.HelicsMessage which references the data in the message. helicsFederateGetMessageObject \u00b6 def helicsFederateGetMessageObject ( fed : HelicsFederate ) -> HelicsMessage Receive a communication message for any endpoint in the federate. The return order will be in order of endpoint creation. So all messages that are available for the first endpoint.handle, then all for the second, and so on. Within a single endpoint.handle, the messages are ordered by time, then source_id, then order of arrival. Returns : A helics.HelicsMessage which references the data in the message. DEPRECATED helicsFederateGetName \u00b6 def helicsFederateGetName ( fed : HelicsFederate ) -> str Get the name of the federate. Parameters fed - The helics.HelicsFederate to query. Returns : A string with the name. helicsFederateGetPublication \u00b6 def helicsFederateGetPublication ( fed : HelicsFederate , name : str ) -> HelicsPublication Get a helics.HelicsPublication from a name. Parameters fed - The value helics.HelicsFederate to use to get the publication. name - The name of the publication. Returns : helics.HelicsPublication . helicsFederateGetPublicationByIndex \u00b6 def helicsFederateGetPublicationByIndex ( fed : HelicsFederate , index : int ) -> HelicsPublication Get a publication by its index, typically already created via registerInterfaces file or something of that nature. Parameters fed - The helics.HelicsFederate in which to create a publication. index - The index of the publication to get. Returns : helics.HelicsPublication . helicsFederateGetPublicationCount \u00b6 def helicsFederateGetPublicationCount ( fed : HelicsFederate ) -> int Get the number of publications in a federate. Returns : (-1) if fed was not a valid federate otherwise returns the number of publications. helicsFederateGetState \u00b6 def helicsFederateGetState ( fed : HelicsFederate ) -> HelicsFederateState Get the current state of a federate. Parameters fed - The federate to query. Returns : helics.HelicsFederateState . helicsFederateGetSubscription \u00b6 def helicsFederateGetSubscription ( fed : HelicsFederate , name : str ) -> HelicsInput Get an input object from a subscription target. Parameters fed - The value helics.HelicsFederate to use to get the publication. name - The name of the publication that a subscription is targeting. Returns : helics.HelicsInput helicsFederateGetTimeProperty \u00b6 def helicsFederateGetTimeProperty ( fed : HelicsFederate , time_property : int ) -> HelicsTime Get the current value of a time based property in a federate. Parameters fed - The federate query. time_property - The property to query. Returns : helics.HelicsTime . helicsFederateGlobalError \u00b6 def helicsFederateGlobalError ( fed : HelicsFederate , error_code : int , error_string : str ) Generate a global error from a federate. A global error halts the co-simulation completely. Parameters fed - The federate to create an error in. error_code - The integer code for the error. error_string - A string describing the error. helicsFederateHasMessage \u00b6 def helicsFederateHasMessage ( fed : HelicsFederate ) -> bool Check if the federate has any outstanding messages. Parameters fed - The federate to check. Returns : True if the federate has a message waiting, False otherwise. helicsFederateInfoClone \u00b6 def helicsFederateInfoClone ( fi : HelicsFederateInfo ) -> HelicsFederateInfo Create helics.HelicsFederateInfo from an existing one and clone the information. Parameters fi - A federateInfo object to duplicate. Returns : helics.HelicsFederateInfo . helicsFederateInfoFree \u00b6 def helicsFederateInfoFree ( fi : HelicsFederateInfo ) Delete the memory associated with helics.HelicsFederateInfo . helicsFederateInfoLoadFromArgs \u00b6 def helicsFederateInfoLoadFromArgs ( fi : HelicsFederateInfo , arguments : List [ str ]) Load federate info from command line arguments. Parameters fi - A federateInfo object. argc - The number of command line arguments. argv - An array of strings from the command line. helicsFederateInfoSetBroker \u00b6 def helicsFederateInfoSetBroker ( fi : HelicsFederateInfo , broker_string : str ) Set the name or connection information for a broker. This is only used if the core is automatically created, the broker information will be transferred to the core for connection. Parameters fi - The federate info object to alter. broker_string - A string which defines the connection information for a broker either a name or an address. helicsFederateInfoSetBrokerInitString \u00b6 def helicsFederateInfoSetBrokerInitString ( fi : HelicsFederateInfo , broker_init_string : str ) Set the initialization string that a core will pass to a generated broker usually in the form of command line arguments. Parameters fi - The federate info object to alter. broker_init_string - A string with command line arguments for a generated broker. helicsFederateInfoSetBrokerKey \u00b6 def helicsFederateInfoSetBrokerKey ( fi : HelicsFederateInfo , broker_key : str ) Set the key for a broker connection. This is only used if the core is automatically created, the broker information will be transferred to the core for connection. Parameters fi - The federate info object to alter. broker_key - A string containing a key for the broker to connect. helicsFederateInfoSetBrokerPort \u00b6 def helicsFederateInfoSetBrokerPort ( fi : HelicsFederateInfo , broker_port : Union [ int , str ]) Set the port to use for the broker. This is only used if the core is automatically created, the broker information will be transferred to the core for connection. This will only be useful for network broker connections. Parameters fi - The federate info object to alter. broker_port - The integer port number to use for connection with a broker. helicsFederateInfoSetCoreInitString \u00b6 def helicsFederateInfoSetCoreInitString ( fi : HelicsFederateInfo , core_init_string : str ) Set the initialization string for the core usually in the form of command line arguments. Parameters fi - The federate info object to alter. core_init_string - A string containing command line arguments to be passed to the core. helicsFederateInfoSetCoreName \u00b6 def helicsFederateInfoSetCoreName ( fi : HelicsFederateInfo , core_name : str ) Set the name of the core to link to for a federate. Parameters fi - The federate info object to alter. core_name - The identifier for a core to link to. helicsFederateInfoSetCoreType \u00b6 def helicsFederateInfoSetCoreType ( fi : HelicsFederateInfo , core_type : HelicsCoreType ) Set the core type by integer code. Valid values available by definitions in api-data.h . Parameters fi - The federate info object to alter. core_type - An numerical code for a core type see helics.HelicsCoreType . helicsFederateInfoSetCoreTypeFromString \u00b6 def helicsFederateInfoSetCoreTypeFromString ( fi : HelicsFederateInfo , core_type : str ) Set the core type from a string. Parameters fi - The federate info object to alter. core_type - A string naming a core type. helicsFederateInfoSetFlagOption \u00b6 def helicsFederateInfoSetFlagOption ( fi : HelicsFederateInfo , flag : HelicsFederateFlag , value : bool ) Set a flag in the info structure Valid flags are available helics.HelicsFederateFlag . Parameters fi - The federate info object to alter. flag - A numerical index for a flag. value - The desired value of the flag True or False . helicsFederateInfoSetIntegerProperty \u00b6 def helicsFederateInfoSetIntegerProperty ( fi : HelicsFederateInfo , property : HelicsProperty , value : int ) Set an integer property for a federate. Set known properties. Parameters fi - The federateInfo object to alter. property - helics.HelicsProperty . value - The value to set the property to. helicsFederateInfoSetLocalPort \u00b6 def helicsFederateInfoSetLocalPort ( fi : HelicsFederateInfo , local_port : Union [ int , str ]) Set the local port to use. This is only used if the core is automatically created, the port information will be transferred to the core for connection. Parameters fi - The federate info object to alter. local_port - A string with the port information to use as the local server port can be a number or \u201cauto\u201d or \u201cos_local\u201d. helicsFederateInfoSetSeparator \u00b6 def helicsFederateInfoSetSeparator ( fi : HelicsFederateInfo , separator : str ) Set the separator character in the info structure. The separator character is the separation character for local publications/endpoints in creating their global name. For example if the separator character is \u2018/\u2019 then a local endpoint would have a globally reachable name of fedName/localName. Parameters fi - The federate info object to alter. separator - The character to use as a separator. helicsFederateInfoSetTimeProperty \u00b6 def helicsFederateInfoSetTimeProperty ( fi : HelicsFederateInfo , time_property : HelicsProperty , value : HelicsTime ) Set the output delay for a federate. Parameters fi - The federate info object to alter. time_property - An integer representation of the time based property to set see helics.HelicsProperty . propertyValue - The value of the property to set the timeProperty to. helicsFederateIsAsyncOperationCompleted \u00b6 def helicsFederateIsAsyncOperationCompleted ( fed : HelicsFederate ) -> bool Check if the current Asynchronous operation has completed. Parameters fed - The federate to operate on. Returns : True if current operation has completed, else False . helicsFederateIsValid \u00b6 def helicsFederateIsValid ( fed : HelicsFederate ) -> bool Check if a helics.HelicsFederate is valid. Returns : True if the federate is a valid active federate, False otherwise. helicsFederateLocalError \u00b6 def helicsFederateLocalError ( fed : HelicsFederate , error_code : int , error_string : str ) Generate a local error in a federate. This will propagate through the co-simulation but not necessarily halt the co-simulation, it has a similar effect to finalize but does allow some interaction with a core for a brief time. Parameters fed - The federate to create an error in. error_code - The integer code for the error. error_string - A string describing the error. helicsFederateLogDebugMessage \u00b6 def helicsFederateLogDebugMessage ( fed : HelicsFederate , log_message : str ) Log a debug message through a federate. Parameters fed - The federate to log the debug message through. log_message - The message to put in the log. helicsFederateLogErrorMessage \u00b6 def helicsFederateLogErrorMessage ( fed : HelicsFederate , log_message : str ) Log an error message through a federate. Parameters fed - The federate to log the error message through. log_message - The message to put in the log. helicsFederateLogInfoMessage \u00b6 def helicsFederateLogInfoMessage ( fed : HelicsFederate , log_message : str ) Log an info message through a federate. Parameters fed - The federate to log the info message through. log_message - The message to put in the log. helicsFederateLogLevelMessage \u00b6 def helicsFederateLogLevelMessage ( fed : HelicsFederate , log_level : HelicsLogLevel , log_message : str ) Log a message through a federate. Parameters fed - The federate to log the message through. log_level - The level of the message to log see helics.HelicsLogLevel . log_message - The message to put in the log. helicsFederateLogWarningMessage \u00b6 def helicsFederateLogWarningMessage ( fed : HelicsFederate , log_message : str ) Log a warning message through a federate. Parameters fed - The federate to log the warning message through. log_message - The message to put in the log. helicsFederatePendingMessages \u00b6 def helicsFederatePendingMessages ( fed : HelicsFederate ) -> int Returns the number of pending receives for the specified destination endpoint. Parameters fed - The federate to get the number of waiting messages from. DEPRECATED helicsFederatePendingMessagesCount \u00b6 def helicsFederatePendingMessagesCount ( fed : HelicsFederate ) -> int Returns the number of pending receives for the specified destination endpoint. Parameters fed - The federate to get the number of waiting messages from. helicsFederatePublishJSON \u00b6 def helicsFederatePublishJSON ( fed : HelicsFederate , json : str ) Publish data contained in a JSON file or string. Parameters fed - The value helics.HelicsFederate through which to publish the data. json - The publication file name or literal JSON data string. helicsFederateRegisterCloningFilter \u00b6 def helicsFederateRegisterCloningFilter ( fed : HelicsFederate , name : str ) -> HelicsFilter Create a cloning Filter on the specified federate. Cloning filters copy a message and send it to multiple locations, source and destination can be added through other functions. Parameters fed - The federate to register through. name - The name of the filter (can be NULL). Returns : helics.HelicsFilter . helicsFederateRegisterEndpoint \u00b6 def helicsFederateRegisterEndpoint ( fed : HelicsFederate , name : str , type : str ) -> HelicsEndpoint MessageFederate Calls. Create an endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints. Parameters fed - The helics.HelicsFederate in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate. name - The identifier for the endpoint. This will be prepended with the federate name for the global identifier. type - A string describing the expected type of the publication (optional). Returns : helics.HelicsEndpoint . helicsFederateRegisterFilter \u00b6 def helicsFederateRegisterFilter ( fed : HelicsFederate , type : HelicsFilterType , name : str ) -> HelicsFilter Create a source Filter on the specified federate. Filters can be created through a federate or a core.handle, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior. Parameters fed - The federate to register through. type - The type of filter to create helics.HelicsFilterType . name - The name of the filter (can be NULL). Returns : helics.HelicsFilter . helicsFederateRegisterFromPublicationJSON \u00b6 def helicsFederateRegisterFromPublicationJSON ( fed : HelicsFederate , json : str ) Register the publications via JSON publication string. Parameters fed - The value helics.HelicsFederate to use to register the publications. json - The JSON publication string. helicsFederateRegisterGlobalCloningFilter \u00b6 def helicsFederateRegisterGlobalCloningFilter ( fed : HelicsFederate , name : str ) -> HelicsFilter Create a global cloning Filter on the specified federate. Cloning filters copy a message and send it to multiple locations, source and destination can be added through other functions. Parameters fed - The federate to register through. name - The name of the filter (can be NULL). Returns : helics.HelicsFilter . helicsFederateRegisterGlobalEndpoint \u00b6 def helicsFederateRegisterGlobalEndpoint ( fed : HelicsFederate , name : str , type : str = \"\" ) -> HelicsEndpoint Create an endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints. Parameters fed - The helics.HelicsFederate in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate. name - The identifier for the endpoint.handle, the given name is the global identifier. type - A string describing the expected type of the publication (optional). Returns : helics.HelicsEndpoint . helicsFederateRegisterGlobalFilter \u00b6 def helicsFederateRegisterGlobalFilter ( fed : HelicsFederate , type : HelicsFilterType , name : str ) -> HelicsFilter Create a global source filter through a federate. Filters can be created through a federate or a core.handle, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior. Parameters fed - The federate to register through. type - The type of filter to create helics.HelicsFilterType . name - The name of the filter (can be NULL). Returns : helics.HelicsFilter . helicsFederateRegisterGlobalInput \u00b6 def helicsFederateRegisterGlobalInput ( fed : HelicsFederate , name : str , type : HelicsDataType , units : str ) -> HelicsPublication Register a global named input. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication. type - A code identifying the type of the input see helics.HelicsDataType for available options. units - A string listing the units of the subscription maybe NULL. Returns : helics.HelicsPublication . helicsFederateRegisterGlobalPublication \u00b6 def helicsFederateRegisterGlobalPublication ( fed : HelicsFederate , name : str , type : HelicsDataType , units : str = \"\" ) -> HelicsPublication Register a global named publication with an arbitrary type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication. type - A code identifying the type of the input see helics.HelicsDataType for available options. units - A string listing the units of the subscription (optional). Returns : helics.HelicsPublication . helicsFederateRegisterGlobalTargetedEndpoint \u00b6 def helicsFederateRegisterGlobalTargetedEndpoint ( fed : HelicsFederate , name : str , type : str ) Create a globally targeted endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints. Parameters \u00b6 fed - The helics.HelicsFederate in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate. name - The identifier for the endpoint. This will be prepended with the federate name for the global identifier. type - A string describing the expected type of the publication (optional). Returns : helics.HelicsEndpoint . helicsFederateRegisterGlobalTypeInput \u00b6 def helicsFederateRegisterGlobalTypeInput ( fed : HelicsFederate , name : str , type : str , units : str ) -> HelicsInput Register a global publication with an arbitrary type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication. type - A string defining the type of the input. units - A string listing the units of the subscription maybe NULL. Returns : helics.HelicsPublication . helicsFederateRegisterGlobalTypePublication \u00b6 def helicsFederateRegisterGlobalTypePublication ( fed : HelicsFederate , name : str , type : str , units : str ) -> HelicsPublication Register a global publication with a defined type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication. type - A string describing the expected type of the publication. units - A string listing the units of the subscription (optional). Returns : helics.HelicsPublication . helicsFederateRegisterInput \u00b6 def helicsFederateRegisterInput ( fed : HelicsFederate , name : str , type : HelicsDataType , units : str ) -> HelicsInput Register a named input. The input becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions, inputs, and publications. Parameters fed - The helics.HelicsFederate in which to create an input. name - The identifier for the publication the global input name will be prepended with the federate name. type - A code identifying the type of the input see helics.HelicsDataType for available options. units - A string listing the units of the input (optional). Returns : helics.HelicsInput . helicsFederateRegisterInterfaces \u00b6 def helicsFederateRegisterInterfaces ( fed : HelicsFederate , file : str ) Load interfaces from a file. Parameters fed - The federate to which to load interfaces. file - The name of a file to load the interfaces from either JSON, or TOML. helicsFederateRegisterPublication \u00b6 def helicsFederateRegisterPublication ( fed : HelicsFederate , name : str , type : HelicsDataType , units : str ) -> HelicsPublication Register a publication with a known type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication the global publication name will be prepended with the federate name. type - A code identifying the type of the input see helics.HelicsDataType for available options. units - A string listing the units of the subscription (optional). Returns : helics.HelicsPublication . helicsFederateRegisterSubscription \u00b6 def helicsFederateRegisterSubscription ( fed : HelicsFederate , name : str , units : str = \"\" ) -> HelicsInput Functions related to value federates for the C api. Create a subscription. The subscription becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a subscription, must have been created with helics.helicsCreateValueFederate or helics.helicsCreateCombinationFederate . name - The identifier matching a publication to get a subscription for. units - A string listing the units of the subscription (optional). Returns : helics.HelicsSubscription . helicsFederateRegisterTargetedEndpoint \u00b6 def helicsFederateRegisterTargetedEndpoint ( fed : HelicsFederate , name : str , type : str ) Create an targeted endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints. Parameters \u00b6 fed - The helics.HelicsFederate in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate. name - The identifier for the endpoint. This will be prepended with the federate name for the global identifier. type - A string describing the expected type of the publication (optional). Returns : helics.HelicsEndpoint . helicsFederateRegisterTypeInput \u00b6 def helicsFederateRegisterTypeInput ( fed : HelicsFederate , name : str , type : str , units : str ) -> HelicsInput Register an input with a defined type. The input becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions, inputs, and publications. Parameters fed - The helics.HelicsFederate in which to create an input. name - The identifier for the input. type - A string describing the expected type of the input. units - A string listing the units of the input maybe NULL. Returns : helics.HelicsPublication . helicsFederateRegisterTypePublication \u00b6 def helicsFederateRegisterTypePublication ( fed : HelicsFederate , name : str , type : str , units : str ) -> HelicsPublication Register a publication with a defined type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication. type - A string labeling the type of the publication. units - A string listing the units of the subscription (optional). Returns : helics.HelicsPublication . helicsFederateRequestNextStep \u00b6 def helicsFederateRequestNextStep ( fed : HelicsFederate ) -> HelicsTime Request the next time step for federate execution. Feds should have setup the period or minDelta for this to work well but it will request the next time step which is the current time plus the minimum time step. Parameters fed - The federate to make the request of. Returns : helics.HelicsTime . helicsFederateRequestTime \u00b6 def helicsFederateRequestTime ( fed : HelicsFederate , request_time : HelicsTime ) -> HelicsTime Request the next time for federate execution. Parameters fed - The federate to make the request of. request_time - The next requested time. Returns : helics.HelicsTime . helicsFederateRequestTimeAdvance \u00b6 def helicsFederateRequestTimeAdvance ( fed : HelicsFederate , time_delta : HelicsTime ) -> HelicsTime Request the next time for federate execution. Parameters fed - The federate to make the request of. time_delta - The requested amount of time to advance. Returns : helics.HelicsTime . helicsFederateRequestTimeAsync \u00b6 def helicsFederateRequestTimeAsync ( fed : HelicsFederate , request_time : HelicsTime ) Request the next time for federate execution in an asynchronous call. Call helics.helicsFederateRequestTimeComplete to finish the call. Parameters fed - The federate to make the request of. request_time - The next requested time. helicsFederateRequestTimeComplete \u00b6 def helicsFederateRequestTimeComplete ( fed : HelicsFederate ) -> HelicsTime Complete an asynchronous requestTime call. Parameters fed - The federate to make the request of. helicsFederateRequestTimeIterative \u00b6 def helicsFederateRequestTimeIterative ( fed : HelicsFederate , request_time : HelicsTime , iterate : HelicsIterationRequest ) -> Tuple [ HelicsTime , HelicsIterationResult ] Request an iterative time. This call allows for finer grain control of the iterative process than helics.helicsFederateRequestTime . It takes a time and iteration request, and returns a time and iteration status. Parameters fed - The federate to make the request of. request_time - The next desired time. iterate - helics.HelicsIterationRequest , i.e. the requested iteration mode. Returns : (helics.HelicsTime, helics.HelicsIterationResult) . helicsFederateRequestTimeIterativeAsync \u00b6 def helicsFederateRequestTimeIterativeAsync ( fed : HelicsFederate , request_time : HelicsTime , iterate : HelicsIterationRequest ) Request an iterative time through an asynchronous call. This call allows for finer grain control of the iterative process than helics.helicsFederateRequestTime . It takes a time and iteration request, and returns a time and iteration status. Call helics.helicsFederateRequestTimeIterativeComplete to finish the process. Parameters fed - The federate to make the request of. request_time - The next desired time. iterate - helics.HelicsIterationRequest , i.e. the requested iteration mode. helicsFederateRequestTimeIterativeComplete \u00b6 def helicsFederateRequestTimeIterativeComplete ( fed : HelicsFederate ) -> Tuple [ HelicsTime , HelicsIterationResult ] Complete an iterative time request asynchronous call. Parameters fed - The federate to make the request of. Returns : The iteration specification of the result. helicsFederateSendCommand \u00b6 def helicsFederateSendCommand ( fed : HelicsFederate , target : str , command : str ) helicsFederateSetFlagOption \u00b6 def helicsFederateSetFlagOption ( fed : HelicsFederate , flag : int , value : bool ) Set a flag for the federate. Parameters fed - The federate to alter a flag for. flag - The flag to change. value - The new value of the flag. 0 for false, !=0 for true. helicsFederateSetGlobal \u00b6 def helicsFederateSetGlobal ( fed : HelicsFederate , name : str , value : str ) Set a federation global value through a federate. This overwrites any previous value for this name. Parameters fed - The federate to set the global through. name - The name of the global to set. value - The value of the global. helicsFederateSetIntegerProperty \u00b6 def helicsFederateSetIntegerProperty ( fed : HelicsFederate , property : HelicsProperty , value : int ) Set an integer based property of a federate. Parameters fed - The federate to change the property for. property - helics.HelicsProperty . value - The value of the property. helicsFederateSetLogFile \u00b6 def helicsFederateSetLogFile ( fed : HelicsFederate , log_file : str ) Set the logging file for a federate (actually on the core associated with a federate). Parameters fed - The federate to set the log file for. log_file - The name of the log file. helicsFederateSetLoggingCallback \u00b6 def helicsFederateSetLoggingCallback ( fed : HelicsFederate , logger , user_data ) Set the logging callback for a helics.HelicsFederate Add a logging callback function for the C. The logging callback will be called when a message flows into a helics.HelicsFederate from the core or from a federate. Parameters \u00b6 fed : the helics.HelicsFederate that is created with helics.helicsCreateValueFederate , helics.helicsCreateMessageFederate or helics.helicsCreateCombinationFederate logger : a callback with signature void(int, const char *, const char *, void *); the function arguments are loglevel, an identifier string, and a message string, and a pointer to user data user_data : a pointer to user data that is passed to the function when executing helicsFederateSetSeparator \u00b6 def helicsFederateSetSeparator ( fed : HelicsFederate , separator : str ) Set the separator character in a federate. The separator character is the separation character for local publications/endpoints in creating their global name. For example if the separator character is \u2018/\u2019 then a local endpoint would have a globally reachable name of fedName/localName. Parameters fed - The federate info object to alter. separator - The character to use as a separator. helicsFederateSetTimeProperty \u00b6 def helicsFederateSetTimeProperty ( fed : HelicsFederate , time_property : int , time : HelicsTime ) Set a time based property for a federate. Parameters fed - The helics.HelicsFederate to set the property for. time_property - A integer code for a time property. time - The requested value of the property. helicsFederateWaitCommand \u00b6 def helicsFederateWaitCommand ( fed : HelicsFederate ) -> str helicsFilterAddDeliveryEndpoint \u00b6 def helicsFilterAddDeliveryEndpoint ( filter : HelicsFilter , delivery_endpoint : str ) Clone filter functions. Functions that manipulate cloning filters in some way. Add a delivery endpoint to a cloning filter. All cloned messages are sent to the delivery address(es). Parameters filter - The given filter. delivery_endpoint - The name of the endpoint to deliver messages to. helicsFilterAddDestinationTarget \u00b6 def helicsFilterAddDestinationTarget ( filter : HelicsFilter , destination : str ) Add a destination target to a filter. All messages going to a destination are copied to the delivery address(es). Parameters filter - The given filter to add a destination target to. destination - The name of the endpoint to add as a destination target. helicsFilterAddSourceTarget \u00b6 def helicsFilterAddSourceTarget ( filter : HelicsFilter , source_name : str ) Add a source target to a filter. All messages coming from a source are copied to the delivery address(es). Parameters filter - The given filter. source_name - The name of the endpoint to add as a source target. helicsFilterGetInfo \u00b6 def helicsFilterGetInfo ( filter : HelicsFilter ) -> str Get the data in the info field of a filter. Parameters filter - The given filter. Returns : A string with the info field string. helicsFilterGetName \u00b6 def helicsFilterGetName ( filter : HelicsFilter ) -> str Get the name of the filter and store in the given string. Parameters filter - The given filter. Returns : A string with the name of the filter. helicsFilterGetOption \u00b6 def helicsFilterGetOption ( filter : HelicsFilter , option : HelicsHandleOption ) -> int Get a handle option for the filter. Parameters filter - The given filter to query. option - The option to query helics.HelicsHandleOption . Returns : int . helicsFilterIsValid \u00b6 def helicsFilterIsValid ( filter : HelicsFilter ) -> bool Check if a filter is valid. Parameters filter - The filter object to check. Returns : True if the Filter object represents a valid filter. helicsFilterRemoveDeliveryEndpoint \u00b6 def helicsFilterRemoveDeliveryEndpoint ( filter : HelicsFilter , delivery_endpoint : str ) Remove a delivery destination from a cloning filter. Parameters filter - The given filter (must be a cloning filter). delivery_endpoint - A string with the delivery endpoint to remove. helicsFilterRemoveTarget \u00b6 def helicsFilterRemoveTarget ( filter : HelicsFilter , target_name : str ) Remove a destination target from a filter. Parameters filter - The given filter. target_name - The named endpoint to remove as a target. helicsFilterSet \u00b6 def helicsFilterSet ( filter : HelicsFilter , property : str , value : float ) Set a property on a filter. Parameters filter - The filter to modify. property - A string containing the property to set. value - A numerical value for the property. helicsFilterSetCustomCallback \u00b6 def helicsFilterSetCustomCallback ( filter : HelicsFilter , callback , userdata ) helicsFilterSetInfo \u00b6 def helicsFilterSetInfo ( filter : HelicsFilter , info : str ) Set the data in the info field for a filter Parameters filter - The given filter. info - The string to set. helicsFilterSetOption \u00b6 def helicsFilterSetOption ( filter : HelicsFilter , option : HelicsHandleOption , value : int ) Set the data in the info field for a filter. Parameters filter - The given filter. option - The option to set helics.HelicsHandleOption . value - The value of the option commonly 0 for false 1 for true. helicsFilterSetString \u00b6 def helicsFilterSetString ( filter : HelicsFilter , property : str , value : str ) Set a string property on a filter. Parameters filter - The filter to modify. property - A string containing the property to set. value - A string containing the new value. helicsGetBuildFlags \u00b6 def helicsGetBuildFlags () -> str Get the build flags used to compile HELICS. helicsGetCompilerVersion \u00b6 def helicsGetCompilerVersion () -> str Get the compiler version used to compile HELICS. helicsGetFederateByName \u00b6 def helicsGetFederateByName ( fed_name : str ) -> HelicsFederate Get an existing helics.HelicsFederate from a core by name. The federate must have been created by one of the other functions and at least one of the objects referencing the created federate must still be active in the process. Parameters fed_name - The name of the federate to retrieve. Returns : helics.HelicsFederate . helicsGetFlagIndex \u00b6 def helicsGetFlagIndex ( value : str ) -> HelicsFederateFlag Get a property index for use in helics.helicsFederateInfoSetFlagOption , helics.helicsFederateSetFlagOption . Parameters value - A string with the option name. Returns : An int with the property code or (-1) if not a valid property. helicsGetOptionIndex \u00b6 def helicsGetOptionIndex ( value : str ) -> HelicsHandleOption Get an option index for use in helics.helicsPublicationSetOption , helics.helicsInputSetOption , helics.helicsEndpointSetOption , helics.helicsFilterSetOption , and the corresponding get functions Parameters value - A string with the option name Returns : An int with the option index or (-1) if not a valid property. helicsGetOptionValue \u00b6 def helicsGetOptionValue ( value : str ) -> int Get an option value for use in helics.helicsPublicationSetOption , helics.helicsInputSetOption , helics.helicsEndpointSetOption , helics.helicsFilterSetOption . Parameters value - A string representing the value Returns : An int with the option value or (-1) if not a valid value. helicsGetPropertyIndex \u00b6 def helicsGetPropertyIndex ( value : str ) -> HelicsProperty Get a property index for use in helics.helicsFederateInfoSetFlagOption , helics.helicsFederateInfoSetTimeProperty , or helics.helicsFederateInfoSetIntegerProperty . Parameters value - A string with the property name. Returns : An int with the property code or (-1) if not a valid property. helicsGetVersion \u00b6 def helicsGetVersion () -> str Get a version string for HELICS. helicsInputAddTarget \u00b6 def helicsInputAddTarget ( ipt : HelicsInput , target_name : str ) Add a publication to the list of data that an input subscribes to. Parameters ipt - The named input to modify. target_name - The name of a publication that an input should subscribe to. helicsInputClearUpdate \u00b6 def helicsInputClearUpdate ( ipt : HelicsInput ) Clear the updated flag from an input. helicsInputGetBoolean \u00b6 def helicsInputGetBoolean ( ipt : HelicsInput ) -> bool Get a boolean value from a subscription. Parameters ipt - The input to get the data for. Returns : A boolean value of current input value. helicsInputGetByteCount \u00b6 def helicsInputGetByteCount ( ipt : HelicsInput ) -> int Data can be returned in a number of formats, for instance if data is published as a double it can be returned as a string and vice versa, not all translations make that much sense but they do work. Get the size of the raw value for subscription. Returns : The size of the raw data/string in bytes. helicsInputGetBytes \u00b6 def helicsInputGetBytes ( ipt : HelicsInput ) -> bytes Get the raw data for the latest value of a subscription. Parameters ipt - The input to get the data for. Returns : Raw string data. helicsInputGetChar \u00b6 def helicsInputGetChar ( ipt : HelicsInput ) -> str Get a single character value from an input. Parameters ipt - The input to get the data for. Returns : The resulting character value. helicsInputGetComplex \u00b6 def helicsInputGetComplex ( ipt : HelicsInput ) -> Tuple [ float , float ] Get a pair of double forming a complex number from a subscriptions. Parameters ipt - The input to get the data for. Returns : a pair of floating point values that represent the real and imag values helicsInputGetComplexObject \u00b6 def helicsInputGetComplexObject ( ipt : HelicsInput ) -> Tuple [ float , float ] Get a complex object from an input object. Parameters ipt - The input to get the data for. Returns : complex . helicsInputGetDouble \u00b6 def helicsInputGetDouble ( ipt : HelicsInput ) -> float Get a double value from a subscription.. Parameters ipt - The input to get the data for. Returns : The double value of the input. helicsInputGetExtractionUnits \u00b6 def helicsInputGetExtractionUnits ( ipt : HelicsInput ) -> str Get the units of an input. The same as helics.helicsInputGetUnits . Parameters ipt - The input to query. Returns : A string with the units information. helicsInputGetInfo \u00b6 def helicsInputGetInfo ( ipt : HelicsInput ) -> str Get the data in the info field of an input. Parameters ipt - The input to query. Returns : A string with the info field string. helicsInputGetInjectionUnits \u00b6 def helicsInputGetInjectionUnits ( ipt : HelicsInput ) -> str Get the units of the publication that an input is linked to. Parameters ipt - The input to query. Returns : A string with the units information. helicsInputGetInteger \u00b6 def helicsInputGetInteger ( ipt : HelicsInput ) -> int Get an integer value from a subscription. Parameters ipt - The input to get the data for. Returns : An int64_t value with the current value of the input. helicsInputGetKey \u00b6 def helicsInputGetKey ( ipt : HelicsInput ) -> str Get the name of an input. Parameters ipt - The input to query Returns : A string with the name information. helicsInputGetName \u00b6 def helicsInputGetName ( ipt : HelicsInput ) -> str Get the name of an input. Parameters ipt - The input to query Returns : A string with the name information. helicsInputGetNamedPoint \u00b6 def helicsInputGetNamedPoint ( ipt : HelicsInput ) -> Tuple [ str , float ] Get a named point from a subscription. Parameters ipt - The input to get the result for. Returns : a string and a double value for the named point helicsInputGetOption \u00b6 def helicsInputGetOption ( ipt : HelicsInput , option : HelicsHandleOption ) -> int Get the current value of an input handle option. Parameters ipt - The input to query. option - Integer representation of the option in question see helics.HelicsHandleOption . Returns : An integer value with the current value of the given option. helicsInputGetPublicationType \u00b6 def helicsInputGetPublicationType ( ipt : HelicsInput ) -> str Get the type the publisher to an input is sending. Parameters ipt - The input to query Returns : A string with the type information. helicsInputGetRawValue \u00b6 def helicsInputGetRawValue ( ipt : HelicsInput ) -> bytes Get the raw data for the latest value of a subscription. Parameters ipt - The input to get the data for. Returns : Raw string data. DEPRECATED helicsInputGetRawValueSize \u00b6 def helicsInputGetRawValueSize ( ipt : HelicsInput ) -> int Data can be returned in a number of formats, for instance if data is published as a double it can be returned as a string and vice versa, not all translations make that much sense but they do work. Get the size of the raw value for subscription. Returns : The size of the raw data/string in bytes. DEPRECATED helicsInputGetString \u00b6 def helicsInputGetString ( ipt : HelicsInput ) -> str Get a string value from a subscription. Parameters ipt - The input to get the data for. Returns : A string data helicsInputGetStringSize \u00b6 def helicsInputGetStringSize ( ipt : HelicsInput ) -> int Get the size of a value for subscription assuming return as a string. Returns : The size of the string. helicsInputGetTime \u00b6 def helicsInputGetTime ( ipt : HelicsInput ) -> HelicsTime Get a time value from a subscription. Parameters ipt - The input to get the data for. Returns : The resulting time value. helicsInputGetType \u00b6 def helicsInputGetType ( ipt : HelicsInput ) -> str Get the type of an input. Parameters ipt - The input to query Returns : A string with the type information. helicsInputGetUnits \u00b6 def helicsInputGetUnits ( ipt : HelicsInput ) -> str Get the units of an input. Parameters ipt - The input to query. Returns : A string with the units information. helicsInputGetVector \u00b6 def helicsInputGetVector ( ipt : HelicsInput ) -> List [ float ] Get a vector from a subscription. Parameters ipt - The input to get the result for. Returns : a list of floating point values helicsInputGetVectorSize \u00b6 def helicsInputGetVectorSize ( ipt : HelicsInput ) -> int Get the size of a value for subscription assuming return as an array of doubles. Returns : The number of doubles in a returned vector. helicsInputIsUpdated \u00b6 def helicsInputIsUpdated ( ipt : HelicsInput ) -> bool Check if a particular subscription was updated. Returns : True if it has been updated since the last value retrieval. helicsInputIsValid \u00b6 def helicsInputIsValid ( ipt : HelicsInput ) -> bool Check if an input is valid. Parameters ipt - The input to check Returns : True if the Input object represents a valid input. helicsInputLastUpdateTime \u00b6 def helicsInputLastUpdateTime ( ipt : HelicsInput ) -> HelicsTime Get the last time a subscription was updated. helicsInputSetDefaultBoolean \u00b6 def helicsInputSetDefaultBoolean ( ipt : HelicsInput , value : bool ) Set the default as a boolean. Parameters ipt - The input to set the default for. value - The default boolean value. helicsInputSetDefaultBytes \u00b6 def helicsInputSetDefaultBytes ( ipt : HelicsInput , data : bytes ) Default Value functions. These functions set the default value for a subscription. That is the value returned if nothing was published from elsewhere. Set the default as a raw data array. Parameters ipt - The input to set the default for. data - A pointer to the raw data to use for the default. helicsInputSetDefaultChar \u00b6 def helicsInputSetDefaultChar ( ipt : HelicsInput , value : str ) Set the default as a char. Parameters ipt - The input to set the default for. value - The default char value. helicsInputSetDefaultComplex \u00b6 def helicsInputSetDefaultComplex ( ipt : HelicsInput , real : float , imag : float = 0 ) Set the default as a complex number. Parameters ipt - The input to set the default for. real - The default real value. imag - The default imaginary value. helicsInputSetDefaultDouble \u00b6 def helicsInputSetDefaultDouble ( ipt : HelicsInput , value : float ) Set the default as a double. Parameters ipt - The input to set the default for. value - The default double value. helicsInputSetDefaultInteger \u00b6 def helicsInputSetDefaultInteger ( ipt : HelicsInput , value : int ) Set the default as an integer. Parameters ipt - The input to set the default for. value - The default integer. helicsInputSetDefaultNamedPoint \u00b6 def helicsInputSetDefaultNamedPoint ( ipt : HelicsInput , string : str , value : float ) Set the default as a NamedPoint . Parameters ipt - The input to set the default for. string - A pointer to a string representing the name. value - A double value for the value of the named point. helicsInputSetDefaultRaw \u00b6 def helicsInputSetDefaultRaw ( ipt : HelicsInput , data : bytes ) Default Value functions. These functions set the default value for a subscription. That is the value returned if nothing was published from elsewhere. Set the default as a raw data array. Parameters ipt - The input to set the default for. data - A pointer to the raw data to use for the default. DEPRECATED helicsInputSetDefaultString \u00b6 def helicsInputSetDefaultString ( ipt : HelicsInput , string : str ) Set the default as a string. Parameters ipt - The input to set the default for. string - A pointer to the default string. helicsInputSetDefaultTime \u00b6 def helicsInputSetDefaultTime ( ipt : HelicsInput , value : HelicsTime ) Set the default as a time. Parameters ipt - The input to set the default for. value - The default time value. helicsInputSetDefaultVector \u00b6 def helicsInputSetDefaultVector ( ipt : HelicsInput , vectorInput : List [ float ]) Set the default as a vector of doubles. Parameters ipt - The input to set the default for. vectorInput - A pointer to an array of double data. helicsInputSetInfo \u00b6 def helicsInputSetInfo ( ipt : HelicsInput , info : str ) Set the data in the info field for an input. Parameters ipt - The input to query. info - The string to set. helicsInputSetMinimumChange \u00b6 def helicsInputSetMinimumChange ( ipt : HelicsInput , tolerance : float ) Set the minimum change detection tolerance. Parameters ipt - The input to modify. tolerance - The tolerance level for registering an update, values changing less than this value will not show asbeing updated. helicsInputSetOption \u00b6 def helicsInputSetOption ( ipt : HelicsInput , option : HelicsHandleOption , value : int ) Set an option on an input. Parameters ipt - The input to query. option - The option to set for the input helics.HelicsHandleOption . value - The value to set the option to. helicsIsCoreTypeAvailable \u00b6 def helicsIsCoreTypeAvailable ( type : str ) -> bool Returns True if core/broker type specified is available in current compilation. Parameters type - A string representing a core type. Options include \u201czmq\u201d, \u201cudp\u201d, \u201cipc\u201d, \u201cinterprocess\u201d, \u201ctcp\u201d, \u201cdefault\u201d, \u201cmpi\u201d. Returns : True if type is available, False if type is not available. helicsMessageAppendData \u00b6 def helicsMessageAppendData ( message : HelicsMessage , data : bytes ) Append data to the payload. Parameters message - The message object in question. data - A string containing the message data to append. helicsMessageCheckFlag \u00b6 def helicsMessageCheckFlag ( message : HelicsMessage , flag : int ) -> bool Check if a flag is set on a message. Parameters message - The message object in question. flag - The flag to check should be between [0,15]. Returns : The flags associated with a message. DEPRECATED helicsMessageClearFlags \u00b6 def helicsMessageClearFlags ( message : HelicsMessage ) Clear the flags of a message. Parameters message - The message object in question. helicsMessageClone \u00b6 def helicsMessageClone ( message : HelicsMessage ) -> HelicsMessage Clone a message object. Parameters message - The message object to copy from. Returns : helics.HelicsMessage . helicsMessageCopy \u00b6 def helicsMessageCopy ( source_message : HelicsMessage , destination_message : HelicsMessage ) Copy a message object. Parameters source_message - The message object to copy from. destination_message - The message object to copy to. helicsMessageFree \u00b6 def helicsMessageFree ( message : HelicsMessage ) Free a message object from memory. Memory for message is managed so not using this function does not create memory leaks, this is an indication to the system that the memory for this message is done being used and can be reused for a new message. helics.helicsFederateClearMessages can also be used to clear up all stored messages at once. helicsMessageGetByteCount \u00b6 def helicsMessageGetByteCount ( message : HelicsMessage ) -> int Get the size of the data payload in bytes. Parameters message - The message object in question. Returns : The size of the data payload. helicsMessageGetBytes \u00b6 def helicsMessageGetBytes ( message : HelicsMessage ) -> bytes Get the raw data for a message object. Parameters message - A message object to get the data for. Returns : Raw string data. helicsMessageGetBytesPointer \u00b6 def helicsMessageGetBytesPointer ( message : HelicsMessage ) -> pointer Get a pointer to the raw data of a message. Parameters message - A message object to get the data for. Returns : A pointer to the raw data in memory, the pointer may be NULL if the message is not a valid message. helicsMessageGetDestination \u00b6 def helicsMessageGetDestination ( message : HelicsMessage ) -> str Get the destination endpoint of a message. Parameters message - The message object in question. Returns : A string with the destination endpoint. helicsMessageGetFlagOption \u00b6 def helicsMessageGetFlagOption ( message : HelicsMessage , flag : int ) -> bool Get flag on a message. Parameters message - The message object in question. flag - The flag to check should be between [0,15]. Returns : The flags associated with a message. helicsMessageGetMessageID \u00b6 def helicsMessageGetMessageID ( message : HelicsMessage ) -> int Get the messageID of a message. Parameters message - The message object in question. Returns : The messageID. helicsMessageGetOriginalDestination \u00b6 def helicsMessageGetOriginalDestination ( message : HelicsMessage ) -> str Get the original destination endpoint of a message, the destination may have been modified by filters or other actions. Parameters message - The message object in question. Returns : A string with the original destination of a message. helicsMessageGetOriginalSource \u00b6 def helicsMessageGetOriginalSource ( message : HelicsMessage ) -> str Get the original source endpoint of a message, the source may have been modified by filters or other actions. Parameters message - The message object in question. Returns : A string with the source of a message. helicsMessageGetRawData \u00b6 def helicsMessageGetRawData ( message : HelicsMessage ) -> bytes Get the raw data for a message object. Parameters message - A message object to get the data for. Returns : Raw string data. DEPRECATED helicsMessageGetRawDataPointer \u00b6 def helicsMessageGetRawDataPointer ( message : HelicsMessage ) -> pointer Get a pointer to the raw data of a message. Parameters message - A message object to get the data for. Returns : A pointer to the raw data in memory, the pointer may be NULL if the message is not a valid message. DEPRECATED helicsMessageGetRawDataSize \u00b6 def helicsMessageGetRawDataSize ( message : HelicsMessage ) -> int Get the size of the data payload in bytes. Parameters message - The message object in question. Returns : The size of the data payload. DEPRECATED helicsMessageGetSource \u00b6 def helicsMessageGetSource ( message : HelicsMessage ) -> str Message operation functions. Functions for working with helics message envelopes. Get the source endpoint of a message. Parameters message - The message object in question. Returns : A string with the source endpoint. helicsMessageGetString \u00b6 def helicsMessageGetString ( message : HelicsMessage ) -> str Get the payload of a message as a string. Parameters message - The message object in question. Returns : A string representing the payload of a message. helicsMessageGetTime \u00b6 def helicsMessageGetTime ( message : HelicsMessage ) -> HelicsTime Get the helics time associated with a message. Parameters message - The message object in question. Returns : The time associated with a message. helicsMessageIsValid \u00b6 def helicsMessageIsValid ( message : HelicsMessage ) -> bool A check if the message contains a valid payload. Parameters message - The message object in question. Returns : True if the message contains a payload. helicsMessageReserve \u00b6 def helicsMessageReserve ( message : HelicsMessage , reserve_size : int ) Reserve space in a buffer but don\u2019t actually resize. The message data buffer will be reserved but not resized. Parameters message - The message object in question. reserve_size - The number of bytes to reserve in the message object. helicsMessageResize \u00b6 def helicsMessageResize ( message : HelicsMessage , new_size : int ) Resize the data buffer for a message. The message data buffer will be resized. There are no guarantees on what is in the buffer in newly allocated space. If the allocated space is not sufficient new allocations will occur Parameters message - The message object in question. new_size - The new size in bytes of the buffer. helicsMessageSetData \u00b6 def helicsMessageSetData ( message : HelicsMessage , data : bytes ) Set the data payload of a message as raw data. Parameters message - The message object in question. data - A string containing the message data. helicsMessageSetDestination \u00b6 def helicsMessageSetDestination ( message : HelicsMessage , destination : str ) Set the destination of a message. Parameters message - The message object in question. destination - A string containing the new destination. helicsMessageSetFlagOption \u00b6 def helicsMessageSetFlagOption ( message : HelicsMessage , flag : int , value : bool ) Set a flag on a message. Parameters message - The message object in question. flag - An index of a flag to set on the message. value - The desired value of the flag. helicsMessageSetMessageID \u00b6 def helicsMessageSetMessageID ( message : HelicsMessage , message_id : int ) Set the message ID for the message. Normally this is not needed and the core of HELICS will adjust as needed. Parameters message - The message object in question. message_id - A new message ID. helicsMessageSetOriginalDestination \u00b6 def helicsMessageSetOriginalDestination ( message : HelicsMessage , destination : str ) Set the original destination of a message. Parameters message - The message object in question. destination - A string containing the new original source. helicsMessageSetOriginalSource \u00b6 def helicsMessageSetOriginalSource ( message : HelicsMessage , source : str ) Set the original source of a message. Parameters message - The message object in question. source - A string containing the new original source. helicsMessageSetSource \u00b6 def helicsMessageSetSource ( message : HelicsMessage , source : str ) Set the source of a message. Parameters message - The message object in question. source - A string containing the source. helicsMessageSetString \u00b6 def helicsMessageSetString ( message : HelicsMessage , string : str ) Set the data payload of a message as a string. Parameters message - The message object in question. string - A string containing the message data. helicsMessageSetTime \u00b6 def helicsMessageSetTime ( message : HelicsMessage , time : HelicsTime ) Set the delivery time for a message. Parameters message - The message object in question. time - The time the message should be delivered. helicsPublicationAddTarget \u00b6 def helicsPublicationAddTarget ( pub : HelicsPublication , target_name : str ) Add a named input to the list of targets a publication publishes to. Parameters pub - The publication to add the target for. target_name - The name of an input that the data should be sent to. helicsPublicationGetInfo \u00b6 def helicsPublicationGetInfo ( pub : HelicsPublication ) -> str Get the data in the info field of an publication. Parameters pub - The publication to query. Returns : A string with the info field string. helicsPublicationGetKey \u00b6 def helicsPublicationGetKey ( pub : HelicsPublication ) -> str Get the name of a publication. This will be the global name used to identify the publication to the federation. Parameters pub - The publication to query. Returns : A string with the units information. helicsPublicationGetName \u00b6 def helicsPublicationGetName ( pub : HelicsPublication ) -> str Get the name of a publication. This will be the global name used to identify the publication to the federation. Parameters pub - The publication to query. Returns : A string with the units information. helicsPublicationGetOption \u00b6 def helicsPublicationGetOption ( pub : HelicsPublication , option : HelicsHandleOption ) -> int Get the value of an option for a publication. Parameters pub - The publication to query. option - The value to query see helics.HelicsHandleOption . Returns : A string with the info field string. helicsPublicationGetType \u00b6 def helicsPublicationGetType ( pub : HelicsPublication ) -> str Get the type of a publication. Parameters pub - The publication to query Returns : A string with the publication type information. helicsPublicationGetUnits \u00b6 def helicsPublicationGetUnits ( pub : HelicsPublication ) -> str Get the units of a publication. Parameters pub - The publication to query. Returns : A string with the units information. helicsPublicationIsValid \u00b6 def helicsPublicationIsValid ( pub : HelicsPublication ) -> bool Publication functions. Functions for publishing data of various kinds. The data will get translated to the type specified when the publication was constructed automatically regardless of the function used to publish the data. Check if a publication is valid. Parameters pub - The publication to check Returns : True if the publication is a valid publication. helicsPublicationPublishBoolean \u00b6 def helicsPublicationPublishBoolean ( pub : HelicsPublication , value : bool ) Publish a Boolean Value. Parameters pub - The publication to publish for. value - The boolean value to publish. helicsPublicationPublishBytes \u00b6 def helicsPublicationPublishBytes ( pub : HelicsPublication , data : bytes ) Publish raw data from a char * and length. Parameters pub - The publication to publish for. data - A pointer to the raw data. helicsPublicationPublishChar \u00b6 def helicsPublicationPublishChar ( pub : HelicsPublication , value : str ) Publish a single character. Parameters pub - The publication to publish for. value - The numerical value to publish. helicsPublicationPublishComplex \u00b6 def helicsPublicationPublishComplex ( pub : HelicsPublication , real : float , imag : float = 0 ) Publish a complex value (or pair of values). Parameters pub - The publication to publish for. real - float number or complex number imag - float number helicsPublicationPublishDouble \u00b6 def helicsPublicationPublishDouble ( pub : HelicsPublication , value : float ) Publish a double floating point value. Parameters pub - The publication to publish for. value - The numerical value to publish. helicsPublicationPublishInteger \u00b6 def helicsPublicationPublishInteger ( pub : HelicsPublication , value : int ) Publish an integer value. Parameters pub - The publication to publish for. value - The numerical value to publish. helicsPublicationPublishNamedPoint \u00b6 def helicsPublicationPublishNamedPoint ( pub : HelicsPublication , string : str , value : float ) Publish a named point. Parameters pub - The publication to publish for. string - A string for the name to publish. value - A double for the value to publish. helicsPublicationPublishRaw \u00b6 def helicsPublicationPublishRaw ( pub : HelicsPublication , data : bytes ) Publish raw data from a char * and length. Parameters pub - The publication to publish for. data - A pointer to the raw data. DEPRECATED helicsPublicationPublishString \u00b6 def helicsPublicationPublishString ( pub : HelicsPublication , string : str ) Publish a string. Parameters pub - The publication to publish for. string - The string to publish. helicsPublicationPublishTime \u00b6 def helicsPublicationPublishTime ( pub : HelicsPublication , value : HelicsTime ) Publish a time value. Parameters pub - The publication to publish for. value - The numerical value to publish. helicsPublicationPublishVector \u00b6 def helicsPublicationPublishVector ( pub : HelicsPublication , vectorInput : List [ float ]) Publish a vector of doubles. Parameters pub - The publication to publish for. vectorInput - A pointer to an array of double data. helicsPublicationSetInfo \u00b6 def helicsPublicationSetInfo ( pub : HelicsPublication , info : str ) Set the data in the info field for a publication. Parameters pub - The publication to set the info field for. info - The string to set. helicsPublicationSetMinimumChange \u00b6 def helicsPublicationSetMinimumChange ( pub : HelicsPublication , tolerance : float ) Set the minimum change detection tolerance. Parameters pub - The publication to modify. tolerance - The tolerance level for publication, values changing less than this value will not be published. helicsPublicationSetOption \u00b6 def helicsPublicationSetOption ( pub : HelicsPublication , option : HelicsHandleOption , value : int ) Set the value of an option for a publication. Parameters pub - The publication to query. option - Integer code for the option to set helics.HelicsHandleOption . value - The value to set the option to. helicsQueryBrokerExecute \u00b6 def helicsQueryBrokerExecute ( query : HelicsQuery , broker : HelicsBroker ) -> JSONType Execute a query directly on a broker. The call will block until the query finishes which may require communication or other delays. Parameters query - The query object to use in the query. broker - The broker to send the query to. Returns : String that contains the result of the query that was executed. helicsQueryCoreExecute \u00b6 def helicsQueryCoreExecute ( query : HelicsQuery , core : HelicsCore ) -> JSONType Execute a query directly on a core. The call will block until the query finishes which may require communication or other delays. Parameters query - The query object to use in the query. core - The core to send the query to. Returns : String that contains the result of the query that was executed. helicsQueryExecute \u00b6 def helicsQueryExecute ( query : HelicsQuery , fed : HelicsFederate ) -> JSONType Execute a query. The call will block until the query finishes which may require communication or other delays. Parameters query - The query object to use in the query. fed - A federate to send the query through. Returns : String that contains the result of the query that was executed. helicsQueryExecuteAsync \u00b6 def helicsQueryExecuteAsync ( query : HelicsQuery , fed : HelicsFederate ) Execute a query in a non-blocking call. Parameters query - The query object to use in the query. fed - A federate to send the query through. helicsQueryExecuteComplete \u00b6 def helicsQueryExecuteComplete ( query : HelicsQuery ) -> JSONType Complete the return from a query called with helics.helicsExecuteQueryAsync . The function will block until the query completes isQueryComplete can be called to determine if a query has completed or not. Parameters query - The query object to complete execution of. Returns : String that contains the result of the query that was executed. helicsQueryFree \u00b6 def helicsQueryFree ( query : HelicsQuery ) Free the memory associated with a query object. helicsQueryIsCompleted \u00b6 def helicsQueryIsCompleted ( query : HelicsQuery ) -> bool Check if an asynchronously executed query has completed. This function should usually be called after a QueryExecuteAsync function has been called. Parameters query - The query object to check if completed Returns : Will return True if an asynchronous query has completed or a regular query call was made with a result, and false if an asynchronous query has not completed or is invalid. helicsQuerySetQueryString \u00b6 def helicsQuerySetQueryString ( query : HelicsQuery , query_string : str ) Update the queryString of a query. Parameters query - The query object to change the target of. query_string - the new queryString. helicsQuerySetTarget \u00b6 def helicsQuerySetTarget ( query : HelicsQuery , target_name : str ) Update the target of a query. Parameters query - The query object to change the target of. target_name - the name of the target to query. helicsSubscriptionGetKey \u00b6 def helicsSubscriptionGetKey ( ipt : HelicsInput ) -> str Get the name of a subscription. Returns : A string with the subscription name. helicsSubscriptionGetTarget \u00b6 def helicsSubscriptionGetTarget ( ipt : HelicsInput ) -> str Get the target of a subscription. Returns : A string with the subscription target. loadSym \u00b6 def loadSym ( s ) signal_handler \u00b6 def signal_handler ( sig , frame )","title":"Module helics.capi"},{"location":"api/capi-py/#module-helicscapi","text":"","title":"Module helics.capi"},{"location":"api/capi-py/#classes","text":"","title":"Classes"},{"location":"api/capi-py/#HelicsBroker","text":"class HelicsBroker ( handle )","title":"HelicsBroker"},{"location":"api/capi-py/#HelicsCloningFilter","text":"class HelicsCloningFilter ( handle )","title":"HelicsCloningFilter"},{"location":"api/capi-py/#HelicsCombinationFederate","text":"class HelicsCombinationFederate ( handle )","title":"HelicsCombinationFederate"},{"location":"api/capi-py/#HelicsCore","text":"class HelicsCore ( handle )","title":"HelicsCore"},{"location":"api/capi-py/#HelicsCoreType","text":"class HelicsCoreType ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) DEFAULT = 0 TEST = 3 INTERPROCESS = 4 IPC = 5 TCP = 6 UDP = 7 NNG = 9 ZMQ_TEST = 10 TCP_SS = 11 HTTP = 12 WEBSOCKET = 14 INPROC = 18 NULL = 66","title":"HelicsCoreType"},{"location":"api/capi-py/#HelicsDataType","text":"class HelicsDataType ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) STRING = 0 DOUBLE = 1 INT = 2 COMPLEX = 3 VECTOR = 4 COMPLEX_VECTOR = 5 NAMED_POINT = 6 BOOLEAN = 7 TIME = 8 RAW = 25 MULTI = 33 ANY = 25262","title":"HelicsDataType"},{"location":"api/capi-py/#HelicsEndpoint","text":"class HelicsEndpoint ( handle )","title":"HelicsEndpoint"},{"location":"api/capi-py/#HelicsError","text":"class HelicsError ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) FATAL = -404 EXTERNAL_TYPE = -203 OTHER = -101 INSUFFICIENT_SPACE = -18 EXECUTION_FAILURE = -14 INVALID_FUNCTION_CALL = -10 INVALID_STATE_TRANSITION = -9 WARNING = -8 SYSTEM_FAILURE = -6 DISCARD = -5 INVALID_ARGUMENT = -4 INVALID_OBJECT = -3 CONNECTION_FAILURE = -2 REGISTRATION_FAILURE = -1 OK = 0","title":"HelicsError"},{"location":"api/capi-py/#HelicsException","text":"class HelicsException ( self , * args , ** kwargs ) Common base class for all non-exit exceptions.","title":"HelicsException"},{"location":"api/capi-py/#HelicsFederate","text":"class HelicsFederate ( self , handle ) Initialize self. See help(type(self)) for accurate signature.","title":"HelicsFederate"},{"location":"api/capi-py/#HelicsFederateFlag","text":"class HelicsFederateFlag ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) OBSERVER = 0 UNINTERRUPTIBLE = 1 INTERRUPTIBLE = 2 SOURCE_ONLY = 4 ONLY_TRANSMIT_ON_CHANGE = 6 ONLY_UPDATE_ON_CHANGE = 8 WAIT_FOR_CURRENT_TIME_UPDATE = 10 RESTRICTIVE_TIME_POLICY = 11 REALTIME = 16 SLOW_RESPONDING = 29 DELAY_INIT_ENTRY = 45 ENABLE_INIT_ENTRY = 47 IGNORE_TIME_MISMATCH_WARNINGS = 67 TERMINATE_ON_ERROR = 72","title":"HelicsFederateFlag"},{"location":"api/capi-py/#HelicsFederateInfo","text":"class HelicsFederateInfo ( self , handle ) Initialize self. See help(type(self)) for accurate signature.","title":"HelicsFederateInfo"},{"location":"api/capi-py/#HelicsFederateState","text":"class HelicsFederateState ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) STARTUP = 0 INITIALIZATION = 1 EXECUTION = 2 FINALIZE = 3 ERROR = 4 PENDING_INIT = 5 PENDING_EXEC = 6 PENDING_TIME = 7 PENDING_ITERATIVE_TIME = 8 PENDING_FINALIZE = 9","title":"HelicsFederateState"},{"location":"api/capi-py/#HelicsFilter","text":"class HelicsFilter ( self , handle ) Initialize self. See help(type(self)) for accurate signature.","title":"HelicsFilter"},{"location":"api/capi-py/#HelicsFilterType","text":"class HelicsFilterType ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) CUSTOM = 0 DELAY = 1 RANDOM_DELAY = 2 RANDOM_DROP = 3 REROUTE = 4 CLONE = 5 FIREWALL = 6","title":"HelicsFilterType"},{"location":"api/capi-py/#HelicsHandleOption","text":"class HelicsHandleOption ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) CONNECTION_REQUIRED = 397 CONNECTION_OPTIONAL = 402 SINGLE_CONNECTION_ONLY = 407 MULTIPLE_CONNECTIONS_ALLOWED = 409 BUFFER_DATA = 411 STRICT_TYPE_CHECKING = 414 IGNORE_UNIT_MISMATCH = 447 ONLY_TRANSMIT_ON_CHANGE = 452 ONLY_UPDATE_ON_CHANGE = 454 IGNORE_INTERRUPTS = 475 MULTI_INPUT_HANDLING_METHOD = 507 INPUT_PRIORITY_LOCATION = 510 CLEAR_PRIORITY_LIST = 512 CONNECTIONS = 522","title":"HelicsHandleOption"},{"location":"api/capi-py/#HelicsInput","text":"class HelicsInput ( self , handle ) Initialize self. See help(type(self)) for accurate signature.","title":"HelicsInput"},{"location":"api/capi-py/#HelicsIterationRequest","text":"class HelicsIterationRequest ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) NO_ITERATION = 0 FORCE_ITERATION = 1 ITERATE_IF_NEEDED = 2","title":"HelicsIterationRequest"},{"location":"api/capi-py/#HelicsIterationResult","text":"class HelicsIterationResult ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) NEXT_STEP = 0 ERROR = 1 HALTED = 2 ITERATING = 3","title":"HelicsIterationResult"},{"location":"api/capi-py/#HelicsLogLevel","text":"class HelicsLogLevel ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) NO_PRINT = -1 ERROR = 0 WARNING = 1 SUMMARY = 2 CONNECTIONS = 3 INTERFACES = 4 TIMING = 5 DATA = 6 TRACE = 7","title":"HelicsLogLevel"},{"location":"api/capi-py/#HelicsMessage","text":"class HelicsMessage ( self , handle ) Initialize self. See help(type(self)) for accurate signature.","title":"HelicsMessage"},{"location":"api/capi-py/#HelicsMessageFederate","text":"class HelicsMessageFederate ( self , handle ) Initialize self. See help(type(self)) for accurate signature.","title":"HelicsMessageFederate"},{"location":"api/capi-py/#HelicsMultiInputMode","text":"class HelicsMultiInputMode ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) NO_OP = 0 VECTORIZE_OPERATION = 1 AND_OPERATION = 2 OR_OPERATION = 3 SUM_OPERATION = 4 DIFF_OPERATION = 5 MAX_OPERATION = 6 MIN_OPERATION = 7 AVERAGE_OPERATION = 8","title":"HelicsMultiInputMode"},{"location":"api/capi-py/#HelicsProperty","text":"class HelicsProperty ( value , names = None , * , module = None , qualname = None , type = None , start = 1 ) TIME_DELTA = 137 TIME_PERIOD = 140 TIME_OFFSET = 141 TIME_RT_LAG = 143 TIME_RT_LEAD = 144 TIME_RT_TOLERANCE = 145 TIME_INPUT_DELAY = 148 TIME_OUTPUT_DELAY = 150 INT_MAX_ITERATIONS = 259 INT_LOG_LEVEL = 271 INT_FILE_LOG_LEVEL = 272 INT_CONSOLE_LOG_LEVEL = 274","title":"HelicsProperty"},{"location":"api/capi-py/#HelicsPublication","text":"class HelicsPublication ( self , handle ) Initialize self. See help(type(self)) for accurate signature.","title":"HelicsPublication"},{"location":"api/capi-py/#HelicsQuery","text":"class HelicsQuery ( handle )","title":"HelicsQuery"},{"location":"api/capi-py/#HelicsValueFederate","text":"class HelicsValueFederate ( handle )","title":"HelicsValueFederate"},{"location":"api/capi-py/#functions","text":"","title":"Functions"},{"location":"api/capi-py/#cchar","text":"def cchar ( c : str ) -> str","title":"cchar"},{"location":"api/capi-py/#cdouble","text":"def cdouble ( d : float ) -> float","title":"cdouble"},{"location":"api/capi-py/#cstring","text":"def cstring ( s : str ) -> str","title":"cstring"},{"location":"api/capi-py/#helicsBrokerAddDestinationFilterToEndpoint","text":"def helicsBrokerAddDestinationFilterToEndpoint ( broker : HelicsBroker , filter_name : str , endpoint_name : str ) Link a named filter to a destination endpoint. Parameters broker - The broker to generate the connection from. filter - The name of the filter. endpoint - The name of the endpoint to filter the data going to.","title":"helicsBrokerAddDestinationFilterToEndpoint"},{"location":"api/capi-py/#helicsBrokerAddSourceFilterToEndpoint","text":"def helicsBrokerAddSourceFilterToEndpoint ( broker : HelicsBroker , filter_name : str , endpoint_name : str ) Link a named filter to a source endpoint. Parameters broker - The broker to generate the connection from. filter - The name of the filter. endpoint - The name of the endpoint to filter the data from.","title":"helicsBrokerAddSourceFilterToEndpoint"},{"location":"api/capi-py/#helicsBrokerClearTimeBarrier","text":"def helicsBrokerClearTimeBarrier ( broker : HelicsBroker )","title":"helicsBrokerClearTimeBarrier"},{"location":"api/capi-py/#helicsBrokerClone","text":"def helicsBrokerClone ( broker : HelicsBroker ) -> HelicsBroker Create a new reference to an existing broker. This will create a new broker object that references the existing broker it must be freed as well. Parameters broker - An existing helics.HelicsBroker . Returns : helics.HelicsBroker .","title":"helicsBrokerClone"},{"location":"api/capi-py/#helicsBrokerDataLink","text":"def helicsBrokerDataLink ( broker : HelicsBroker , source_name : str , target_name : str ) Link a named publication and named input using a broker. Parameters broker - The broker to generate the connection from. source_name - The name of the publication. target_name - The name of the target to send the publication data.","title":"helicsBrokerDataLink"},{"location":"api/capi-py/#helicsBrokerDestroy","text":"def helicsBrokerDestroy ( broker : HelicsBroker ) Disconnect and free a broker.","title":"helicsBrokerDestroy"},{"location":"api/capi-py/#helicsBrokerDisconnect","text":"def helicsBrokerDisconnect ( broker : HelicsBroker ) Disconnect a broker. Parameters broker - The broker to disconnect.","title":"helicsBrokerDisconnect"},{"location":"api/capi-py/#helicsBrokerFree","text":"def helicsBrokerFree ( broker : HelicsBroker ) Release the memory associated with a broker.","title":"helicsBrokerFree"},{"location":"api/capi-py/#helicsBrokerGetAddress","text":"def helicsBrokerGetAddress ( broker : HelicsBroker ) -> str Get the network address associated with a broker. Parameters broker - The broker to query. Returns : A string with the network address of the broker.","title":"helicsBrokerGetAddress"},{"location":"api/capi-py/#helicsBrokerGetIdentifier","text":"def helicsBrokerGetIdentifier ( broker : HelicsBroker ) -> str Get an identifier for the broker. Parameters broker - The broker to query. Returns : A string containing the identifier for the broker.","title":"helicsBrokerGetIdentifier"},{"location":"api/capi-py/#helicsBrokerIsConnected","text":"def helicsBrokerIsConnected ( broker : HelicsBroker ) -> bool Check if a broker is connected. A connected broker implies it is attached to cores or cores could reach out to communicate. Returns : True if connected, False if not connected.","title":"helicsBrokerIsConnected"},{"location":"api/capi-py/#helicsBrokerIsValid","text":"def helicsBrokerIsValid ( broker : HelicsBroker ) -> bool Check if a broker object is a valid object. Parameters broker - The helics.HelicsBroker object to test. Returns : True if valid, False if not valid.","title":"helicsBrokerIsValid"},{"location":"api/capi-py/#helicsBrokerMakeConnections","text":"def helicsBrokerMakeConnections ( broker : HelicsBroker , file : str ) Load a file containing connection information. Parameters broker - The broker to generate the connections from. file - A JSON or TOML file containing connection information.","title":"helicsBrokerMakeConnections"},{"location":"api/capi-py/#helicsBrokerSendCommand","text":"def helicsBrokerSendCommand ( broker , target , command , err )","title":"helicsBrokerSendCommand"},{"location":"api/capi-py/#helicsBrokerSetGlobal","text":"def helicsBrokerSetGlobal ( broker : HelicsBroker , name : str , value : str ) Set a federation global value. This overwrites any previous value for this name. Parameters broker - The broker to set the global through. name - The name of the global to set. value - The value of the global.","title":"helicsBrokerSetGlobal"},{"location":"api/capi-py/#helicsBrokerSetLogFile","text":"def helicsBrokerSetLogFile ( broker : HelicsBroker , log_file : str ) Set the log file on a broker. Parameters broker - The broker to set the log file for. log_file - The name of the file to log to.","title":"helicsBrokerSetLogFile"},{"location":"api/capi-py/#helicsBrokerSetTimeBarrier","text":"def helicsBrokerSetTimeBarrier ( broker : HelicsBroker , barrier_time : HelicsTime ) Set the broker time barrier","title":"helicsBrokerSetTimeBarrier"},{"location":"api/capi-py/#parameters","text":"broker : the helics.HelicsBroker barrier_time : the barrier time","title":"Parameters"},{"location":"api/capi-py/#helicsBrokerWaitForDisconnect","text":"def helicsBrokerWaitForDisconnect ( broker : HelicsBroker , ms_to_wait : int ) -> bool Wait for the broker to disconnect. Parameters broker - The broker to wait for. ms_to_wait - The time out in millisecond (<0 for infinite timeout).","title":"helicsBrokerWaitForDisconnect"},{"location":"api/capi-py/#helicsCleanupLibrary","text":"def helicsCleanupLibrary () Function to do some housekeeping work. This runs some cleanup routines and tries to close out any residual thread that haven\u2019t been shutdown yet.","title":"helicsCleanupLibrary"},{"location":"api/capi-py/#helicsCloseLibrary","text":"def helicsCloseLibrary () Call when done using the helics library. This function will ensure the threads are closed properly. If possible this should be the last call before exiting.","title":"helicsCloseLibrary"},{"location":"api/capi-py/#helicsCoreAddDestinationFilterToEndpoint","text":"def helicsCoreAddDestinationFilterToEndpoint ( core : HelicsCore , filter_name : str , endpoint_name : str ) Link a named filter to a destination endpoint. Parameters core - The core to generate the connection from. filter - The name of the filter. endpoint - The name of the endpoint to filter the data going to.","title":"helicsCoreAddDestinationFilterToEndpoint"},{"location":"api/capi-py/#helicsCoreAddSourceFilterToEndpoint","text":"def helicsCoreAddSourceFilterToEndpoint ( core : HelicsCore , filter_name : str , endpoint_name : str ) Link a named filter to a source endpoint. Parameters core - The core to generate the connection from. filter - The name of the filter. endpoint - The name of the endpoint to filter the data from.","title":"helicsCoreAddSourceFilterToEndpoint"},{"location":"api/capi-py/#helicsCoreClone","text":"def helicsCoreClone ( core : HelicsCore ) -> HelicsCore Create a new reference to an existing core. This will create a new helics.HelicsCore that references the existing core. The new helics.HelicsCore must be freed as well. Parameters core - An existing helics.HelicsCore . Returns : helics.HelicsCore .","title":"helicsCoreClone"},{"location":"api/capi-py/#helicsCoreConnect","text":"def helicsCoreConnect ( core : HelicsCore ) -> bool Connect a core to the federate based on current configuration. Parameters core - The core to connect. Returns : True if core is connected successfully, else False .","title":"helicsCoreConnect"},{"location":"api/capi-py/#helicsCoreDataLink","text":"def helicsCoreDataLink ( core : HelicsCore , source_name : str , target_name : str ) Link a named publication and named input using a core. Parameters core - The core to generate the connection from. source_name - The name of the publication. target_name - The name of the target to send the publication data.","title":"helicsCoreDataLink"},{"location":"api/capi-py/#helicsCoreDestroy","text":"def helicsCoreDestroy ( core : HelicsCore ) Disconnect and free a core.","title":"helicsCoreDestroy"},{"location":"api/capi-py/#helicsCoreDisconnect","text":"def helicsCoreDisconnect ( core : HelicsCore ) Disconnect a core from the federation. Parameters core - The core to query.","title":"helicsCoreDisconnect"},{"location":"api/capi-py/#helicsCoreFree","text":"def helicsCoreFree ( core : HelicsCore ) Release the memory associated with a core.","title":"helicsCoreFree"},{"location":"api/capi-py/#helicsCoreGetAddress","text":"def helicsCoreGetAddress ( core : HelicsCore ) -> str Get the network address associated with a core. Parameters core - The core to query. Returns : A string with the network address of the broker.","title":"helicsCoreGetAddress"},{"location":"api/capi-py/#helicsCoreGetIdentifier","text":"def helicsCoreGetIdentifier ( core : HelicsCore ) -> str Get an identifier for the core. Parameters core - The core to query. Returns : A string with the identifier of the core.","title":"helicsCoreGetIdentifier"},{"location":"api/capi-py/#helicsCoreIsConnected","text":"def helicsCoreIsConnected ( core : HelicsCore ) -> bool Check if a core is connected. A connected core implies it is attached to federates or federates could be attached to it. Returns : True if connected, False if not connected.","title":"helicsCoreIsConnected"},{"location":"api/capi-py/#helicsCoreIsValid","text":"def helicsCoreIsValid ( core : HelicsCore ) -> bool Check if a helics.HelicsCore is a valid object. Parameters core - The helics.HelicsCore object to test. Returns : True if valid, False if not valid.","title":"helicsCoreIsValid"},{"location":"api/capi-py/#helicsCoreMakeConnections","text":"def helicsCoreMakeConnections ( core : HelicsCore , file : str ) Load a file containing connection information. Parameters core - The core to generate the connections from. file - A JSON or TOML file containing connection information.","title":"helicsCoreMakeConnections"},{"location":"api/capi-py/#helicsCoreRegisterCloningFilter","text":"def helicsCoreRegisterCloningFilter ( core : HelicsCore , name : str ) -> HelicsFilter Create a cloning Filter on the specified core. Cloning filters copy a message and send it to multiple locations, source and destination can be added through other functions. Parameters core - The core to register through. name - The name of the filter (can be NULL). Returns : helics.HelicsFilter .","title":"helicsCoreRegisterCloningFilter"},{"location":"api/capi-py/#helicsCoreRegisterFilter","text":"def helicsCoreRegisterFilter ( core : HelicsCore , type : HelicsFilterType , name : str ) -> HelicsFilter Create a source Filter on the specified core. Filters can be created through a federate or a core.handle, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior. Parameters core - The core to register through. type - The type of filter to create helics.HelicsFilterType . name - The name of the filter (can be NULL). Returns : helics.HelicsFilter .","title":"helicsCoreRegisterFilter"},{"location":"api/capi-py/#helicsCoreSendCommand","text":"def helicsCoreSendCommand ( core , target , command , err )","title":"helicsCoreSendCommand"},{"location":"api/capi-py/#helicsCoreSetGlobal","text":"def helicsCoreSetGlobal ( core : HelicsCore , name : str , value : str ) Set a global value in a core. This overwrites any previous value for this name. Parameters core - The core to set the global through. name - The name of the global to set. value - The value of the global.","title":"helicsCoreSetGlobal"},{"location":"api/capi-py/#helicsCoreSetLogFile","text":"def helicsCoreSetLogFile ( core : HelicsCore , log_file : str ) Set the log file on a core. Parameters core - The core to set the log file for. log_file - The name of the file to log to.","title":"helicsCoreSetLogFile"},{"location":"api/capi-py/#helicsCoreSetReadyToInit","text":"def helicsCoreSetReadyToInit ( core : HelicsCore ) Set the core to ready for init. This function is used for cores that have filters but no federates so there needs to be a direct signal to the core to trigger the federation initialization. Parameters core - The helics.HelicsCore to enable init values for.","title":"helicsCoreSetReadyToInit"},{"location":"api/capi-py/#helicsCoreWaitForDisconnect","text":"def helicsCoreWaitForDisconnect ( core : HelicsCore , ms_to_wait : int ) -> bool Wait for the core to disconnect. Parameters core - The core to wait for. ms_to_wait - The time out in millisecond (<0 for infinite timeout).","title":"helicsCoreWaitForDisconnect"},{"location":"api/capi-py/#helicsCreateBroker","text":"def helicsCreateBroker ( type : str , name : str = \"\" , init_string : str = \"\" ) -> HelicsBroker Create a broker object Parameters type - The type of the broker to create. name - The name of the broker. It can be a nullptr or empty string to have a name automatically assigned. init_string - An initialization string to send to the core-the format is similar to command line arguments. Typical options include a broker address such as \u2013broker=\u201dXSSAF\u201d if this is a subbroker, or the number of federates, or the address. Returns : helics.HelicsBroker .","title":"helicsCreateBroker"},{"location":"api/capi-py/#helicsCreateBrokerFromArgs","text":"def helicsCreateBrokerFromArgs ( type : str , name : str , arguments : List [ str ]) -> HelicsBroker Create a helics.HelicsCore by passing command line arguments. Parameters type - The type of the core to create. name - The name of the core. It can be a nullptr or empty string to have a name automatically assigned. arguments - The list of string values from a command line. Returns : helics.HelicsBroker .","title":"helicsCreateBrokerFromArgs"},{"location":"api/capi-py/#helicsCreateCombinationFederate","text":"def helicsCreateCombinationFederate ( fed_name : str , fi : HelicsFederateInfo = None ) -> HelicsCombinationFederate Create a combination federate from helics.HelicsFederateInfo . Combination federates are both value federates and message federates, objects can be used in all functions that take a helics.HelicsFederate object as an argument. Parameters fed_name - A string with the name of the federate, can be NULL or an empty string to pull the default name from fi. fi - The federate info object that contains details on the federate. Returns : helics.HelicsCombinationFederate .","title":"helicsCreateCombinationFederate"},{"location":"api/capi-py/#helicsCreateCombinationFederateFromConfig","text":"def helicsCreateCombinationFederateFromConfig ( config_file : str ) -> HelicsCombinationFederate Create a combination federate from a JSON file or JSON string or TOML file. Combination federates are both value federates and message federates, objects can be used in all functions that take a helics.HelicsFederate object as an argument. Parameters config_file - A JSON file or a JSON string or TOML file that contains setup and configuration information. Returns : helics.HelicsCombinationFederate .","title":"helicsCreateCombinationFederateFromConfig"},{"location":"api/capi-py/#helicsCreateCore","text":"def helicsCreateCore ( type : str , name : str , init_string : str ) -> HelicsCore Create a helics.HelicsCore . Parameters type - The type of the core to create. name - The name of the core. It can be a nullptr or empty string to have a name automatically assigned. init_string - An initialization string to send to the core. The format is similar to command line arguments. Typical options include a broker name, the broker address, the number of federates, etc. Returns : helics.HelicsCore .","title":"helicsCreateCore"},{"location":"api/capi-py/#helicsCreateCoreFromArgs","text":"def helicsCreateCoreFromArgs ( type : str , name : str , arguments : List [ str ]) -> HelicsCore Create a helics.HelicsCore by passing command line arguments. Parameters type - The type of the core to create. name - The name of the core. It can be a nullptr or empty string to have a name automatically assigned. arguments - The list of string values from a command line. Returns : helics.HelicsCore .","title":"helicsCreateCoreFromArgs"},{"location":"api/capi-py/#helicsCreateFederateInfo","text":"def helicsCreateFederateInfo () -> HelicsFederateInfo Create helics.HelicsFederateInfo for specifying federate information when constructing a federate. Returns : helics.HelicsFederateInfo .","title":"helicsCreateFederateInfo"},{"location":"api/capi-py/#helicsCreateMessageFederate","text":"def helicsCreateMessageFederate ( fed_name : str , fi : HelicsFederateInfo = None ) -> HelicsMessageFederate Create helics.HelicsMessageFederate from helics.HelicsFederateInfo . helics.HelicsMessageFederate objects can be used in all functions that take a helics.HelicsFederate as an argument. Parameters fed_name - The name of the federate to create. fi - The federate info object that contains details on the federate. Returns : helics.HelicsMessageFederate .","title":"helicsCreateMessageFederate"},{"location":"api/capi-py/#helicsCreateMessageFederateFromConfig","text":"def helicsCreateMessageFederateFromConfig ( config_file : str ) -> HelicsMessageFederate Create helics.HelicsMessageFederate from a JSON file or JSON string or TOML file. helics.HelicsMessageFederate objects can be used in all functions that take a helics.HelicsFederate object as an argument. Parameters config_file - A config (JSON,TOML) file or a JSON string that contains setup and configuration information. Returns : helics.HelicsMessageFederate .","title":"helicsCreateMessageFederateFromConfig"},{"location":"api/capi-py/#helicsCreateQuery","text":"def helicsCreateQuery ( target_name : str , query_string : str ) -> HelicsQuery Create a query object. A query object consists of a target and query string. Parameters target_name - The name of the target to query. query_string - The query to make of the target. Returns : helics.HelicsQuery .","title":"helicsCreateQuery"},{"location":"api/capi-py/#helicsCreateValueFederate","text":"def helicsCreateValueFederate ( fed_name : str , fi : HelicsFederateInfo = None ) -> HelicsValueFederate Creation and destruction of Federates. Create helics.HelicsValueFederate from helics.HelicsFederateInfo . helics.HelicsValueFederate objects can be used in all functions that take a helics.HelicsFederate as an argument. Parameters fed_name - The name of the federate to create, can NULL or an empty string to use the default name from fi or an assigned name. fi - The federate info object that contains details on the federate. Returns : helics.HelicsValueFederate .","title":"helicsCreateValueFederate"},{"location":"api/capi-py/#helicsCreateValueFederateFromConfig","text":"def helicsCreateValueFederateFromConfig ( config_file : str ) -> HelicsValueFederate Create helics.HelicsValueFederate from a JSON file, JSON string, or TOML file. helics.HelicsValueFederate objects can be used in all functions that take a helics.HelicsFederate as an argument. Parameters config_file - A JSON file or a JSON string or TOML file that contains setup and configuration information. Returns : helics.HelicsValueFederate .","title":"helicsCreateValueFederateFromConfig"},{"location":"api/capi-py/#helicsEndpointAddDestinationFilter","text":"def helicsEndpointAddDestinationFilter ( endpoint : HelicsEndpoint , filter_name : str ) Add destination filter to endpoint","title":"helicsEndpointAddDestinationFilter"},{"location":"api/capi-py/#parameters_1","text":"endpoint - The endpoint. filter_name - The name of the filter.","title":"Parameters"},{"location":"api/capi-py/#helicsEndpointAddDestinationTarget","text":"def helicsEndpointAddDestinationTarget ( endpoint : HelicsEndpoint , destination_name : str ) Add a destination target to a endpoint. All messages coming from a source are copied to the delivery address(es).","title":"helicsEndpointAddDestinationTarget"},{"location":"api/capi-py/#parameters_2","text":"endpoint - The given endpoint. source_name - The name of the endpoint to add as a source target.","title":"Parameters"},{"location":"api/capi-py/#helicsEndpointAddSourceFilter","text":"def helicsEndpointAddSourceFilter ( endpoint : HelicsEndpoint , filter_name : str ) Add source filter to endpoint","title":"helicsEndpointAddSourceFilter"},{"location":"api/capi-py/#parameters_3","text":"endpoint - The endpoint. filter_name - The name of the filter.","title":"Parameters"},{"location":"api/capi-py/#helicsEndpointAddSourceTarget","text":"def helicsEndpointAddSourceTarget ( endpoint : HelicsEndpoint , source_name : str ) Add a source target to a endpoint. All messages coming from a source are copied to the delivery address(es).","title":"helicsEndpointAddSourceTarget"},{"location":"api/capi-py/#parameters_4","text":"endpoint - The given endpoint. source_name - The name of the endpoint to add as a source target.","title":"Parameters"},{"location":"api/capi-py/#helicsEndpointClearMessages","text":"def helicsEndpointClearMessages ( endpoint : HelicsEndpoint ) Clear all message from an endpoint. _**Deprecated: Use helics.helicsFederateClearMessages to free all messages, or helics.helicsMessageFree to clear an individual message. Parameters endpoint - The endpoint object to operate on. DEPRECATED","title":"helicsEndpointClearMessages"},{"location":"api/capi-py/#helicsEndpointCreateMessage","text":"def helicsEndpointCreateMessage ( endpoint : HelicsEndpoint ) -> HelicsMessage Create a new empty message object. The message is empty and isValid will return false since there is no data associated with the message yet. Parameters endpoint - The endpoint object to associate the message with.","title":"helicsEndpointCreateMessage"},{"location":"api/capi-py/#helicsEndpointCreateMessageObject","text":"def helicsEndpointCreateMessageObject ( endpoint : HelicsEndpoint ) -> HelicsMessage Create a new empty message. The message is empty and isValid will return false since there is no data associated with the message yet. Parameters endpoint - The endpoint object to associate the message with. DEPRECATED","title":"helicsEndpointCreateMessageObject"},{"location":"api/capi-py/#helicsEndpointGetDefaultDestination","text":"def helicsEndpointGetDefaultDestination ( endpoint : HelicsEndpoint ) -> str Get the default destination for an endpoint. Parameters endpoint - The endpoint to set the destination for. Returns : A string with the default destination.","title":"helicsEndpointGetDefaultDestination"},{"location":"api/capi-py/#helicsEndpointGetInfo","text":"def helicsEndpointGetInfo ( endpoint : HelicsEndpoint ) -> str Get the data in the info field of a filter. Parameters end - The filter to query. Returns : A string with the info field string.","title":"helicsEndpointGetInfo"},{"location":"api/capi-py/#helicsEndpointGetMessage","text":"def helicsEndpointGetMessage ( endpoint : HelicsEndpoint ) -> HelicsMessage Receive a packet from a particular endpoint. Parameters endpoint - The identifier for the endpoint. Returns : A message object.","title":"helicsEndpointGetMessage"},{"location":"api/capi-py/#helicsEndpointGetMessageObject","text":"def helicsEndpointGetMessageObject ( endpoint : HelicsEndpoint ) -> HelicsMessage Receive a packet from a particular endpoint. Parameters endpoint - The identifier for the endpoint. Returns : A message. DEPRECATED","title":"helicsEndpointGetMessageObject"},{"location":"api/capi-py/#helicsEndpointGetName","text":"def helicsEndpointGetName ( endpoint : HelicsEndpoint ) -> str Get the name of an endpoint. Parameters endpoint - The endpoint object in question. Returns : The name of the endpoint.","title":"helicsEndpointGetName"},{"location":"api/capi-py/#helicsEndpointGetOption","text":"def helicsEndpointGetOption ( endpoint : HelicsEndpoint , option : HelicsHandleOption ) -> int Get the value of handle option on an endpoint. Parameters endpoint - The endpoint to modify. option - Integer code for the option to set helics.HelicsHandleOption . Returns : the value of the option, for boolean options will be 0 or 1.","title":"helicsEndpointGetOption"},{"location":"api/capi-py/#helicsEndpointGetType","text":"def helicsEndpointGetType ( endpoint : HelicsEndpoint ) -> str Get the type specified for an endpoint. Parameters endpoint - The endpoint object in question. Returns : The defined type of the endpoint.","title":"helicsEndpointGetType"},{"location":"api/capi-py/#helicsEndpointHasMessage","text":"def helicsEndpointHasMessage ( endpoint : HelicsEndpoint ) -> bool Check if a given endpoint has any unread messages. Parameters endpoint - The endpoint to check. Returns : True if the endpoint has a message, False otherwise.","title":"helicsEndpointHasMessage"},{"location":"api/capi-py/#helicsEndpointIsValid","text":"def helicsEndpointIsValid ( endpoint : HelicsEndpoint ) -> bool Check if an endpoint is valid. Parameters endpoint - The endpoint object to check. Returns : True if the Endpoint object represents a valid endpoint.","title":"helicsEndpointIsValid"},{"location":"api/capi-py/#helicsEndpointPendingMessages","text":"def helicsEndpointPendingMessages ( endpoint : HelicsEndpoint ) -> int Returns the number of pending receives for all endpoints of a particular federate. Parameters endpoint - The endpoint to query.","title":"helicsEndpointPendingMessages"},{"location":"api/capi-py/#helicsEndpointPendingMessagesCount","text":"def helicsEndpointPendingMessagesCount ( endpoint : HelicsEndpoint ) -> int Returns the number of pending receives for all endpoints of a particular federate. Parameters endpoint - The endpoint to query.","title":"helicsEndpointPendingMessagesCount"},{"location":"api/capi-py/#helicsEndpointRemoveTarget","text":"def helicsEndpointRemoveTarget ( endpoint : HelicsEndpoint , target : str ) Remove target from endpoint","title":"helicsEndpointRemoveTarget"},{"location":"api/capi-py/#parameters_5","text":"endpoint - The given endpoint. target_name - The name of the endpoint to remove.","title":"Parameters"},{"location":"api/capi-py/#helicsEndpointSendBytesTo","text":"def helicsEndpointSendBytesTo ( endpoint : HelicsEndpoint , data : bytes , destination : str ) Send a message to the specified destination. Parameters endpoint - The endpoint to send the data from. data - The data to send. destination - The target destination.","title":"helicsEndpointSendBytesTo"},{"location":"api/capi-py/#helicsEndpointSendBytesToAt","text":"def helicsEndpointSendBytesToAt ( endpoint : HelicsEndpoint , data : bytes , destination : str , time : HelicsTime ) Send a message at a specific time to the specified destination. Parameters endpoint - The endpoint to send the data from. data - The data to send. destination - The target destination. time - The time the message should be sent.","title":"helicsEndpointSendBytesToAt"},{"location":"api/capi-py/#helicsEndpointSendEventRaw","text":"def helicsEndpointSendEventRaw ( endpoint : HelicsEndpoint , destination : str , data : bytes , time : HelicsTime , ) Send a message at a specific time to the specified destination. Parameters endpoint - The endpoint to send the data from. destination - The target destination. data - The data to send. time - The time the message should be sent. DEPRECATED Use helicsEndpointSendBytesToAt instead.","title":"helicsEndpointSendEventRaw"},{"location":"api/capi-py/#helicsEndpointSendMessage","text":"def helicsEndpointSendMessage ( endpoint : HelicsEndpoint , message : HelicsMessage ) Send a message object from a specific endpoint. Parameters endpoint - The endpoint to send the data from. message - The actual message to send which will be copied.","title":"helicsEndpointSendMessage"},{"location":"api/capi-py/#helicsEndpointSendMessageObject","text":"def helicsEndpointSendMessageObject ( endpoint : HelicsEndpoint , message : HelicsMessage ) Send a message object from a specific endpoint. Parameters endpoint - The endpoint to send the data from. message - The actual message to send which will be copied. DEPRECATED","title":"helicsEndpointSendMessageObject"},{"location":"api/capi-py/#helicsEndpointSendMessageObjectZeroCopy","text":"def helicsEndpointSendMessageObjectZeroCopy ( endpoint : HelicsEndpoint , message : HelicsMessage ) Send a message object from a specific endpoint. Parameters endpoint - The endpoint to send the data from. message - The actual message to send which will be copied. DEPRECATED","title":"helicsEndpointSendMessageObjectZeroCopy"},{"location":"api/capi-py/#helicsEndpointSendMessageRaw","text":"def helicsEndpointSendMessageRaw ( endpoint : HelicsEndpoint , destination : str , data : bytes ) Send a message to the specified destination. Parameters endpoint - The endpoint to send the data from. destination - The target destination. data - The data to send. DEPRECATED Use helicsEndpointSendBytesTo instead","title":"helicsEndpointSendMessageRaw"},{"location":"api/capi-py/#helicsEndpointSetDefaultDestination","text":"def helicsEndpointSetDefaultDestination ( endpoint : HelicsEndpoint , destination : str ) Set the default destination for an endpoint if no other endpoint is given. Parameters endpoint - The endpoint to set the destination for. destination - A string naming the desired default endpoint.","title":"helicsEndpointSetDefaultDestination"},{"location":"api/capi-py/#helicsEndpointSetInfo","text":"def helicsEndpointSetInfo ( endpoint : HelicsEndpoint , info : str ) Set the data in the info field for a filter. Parameters endpoint - The endpoint to query. info - The string to set.","title":"helicsEndpointSetInfo"},{"location":"api/capi-py/#helicsEndpointSetOption","text":"def helicsEndpointSetOption ( endpoint : HelicsEndpoint , option : HelicsHandleOption , value : int ) Set a handle option on an endpoint. Parameters endpoint - The endpoint to modify. option - Integer code for the option to set helics.HelicsHandleOption . value - The value to set the option to.","title":"helicsEndpointSetOption"},{"location":"api/capi-py/#helicsEndpointSubscribe","text":"def helicsEndpointSubscribe ( endpoint : HelicsEndpoint , name : str ) Subscribe an endpoint to a publication. Parameters endpoint - The endpoint to use. name - The name of the publication.","title":"helicsEndpointSubscribe"},{"location":"api/capi-py/#helicsErrorClear","text":"def helicsErrorClear ( err : HelicsError ) Clear an error object.","title":"helicsErrorClear"},{"location":"api/capi-py/#helicsErrorInitialize","text":"def helicsErrorInitialize () -> HelicsError Return an initialized error object.","title":"helicsErrorInitialize"},{"location":"api/capi-py/#helicsFederateAddDependency","text":"def helicsFederateAddDependency ( fed : HelicsFederate , name : str ) Add a time dependency for a federate. The federate will depend on the given named federate for time synchronization. Parameters fed - The federate to add the dependency for. name - The name of the federate to depend on.","title":"helicsFederateAddDependency"},{"location":"api/capi-py/#helicsFederateClearMessages","text":"def helicsFederateClearMessages ( fed : HelicsFederate ) Clear all stored messages from a federate. This clears messages retrieved through helics.helicsFederateGetMessage or helics.helicsFederateGetMessageObject . Parameters fed - The federate to clear the message for.","title":"helicsFederateClearMessages"},{"location":"api/capi-py/#helicsFederateClearUpdates","text":"def helicsFederateClearUpdates ( fed : HelicsFederate ) Clear all the update flags from a federates inputs. Parameters fed - The value helics.HelicsFederate for which to clear update flags.","title":"helicsFederateClearUpdates"},{"location":"api/capi-py/#helicsFederateClone","text":"def helicsFederateClone ( fed : HelicsFederate ) -> HelicsFederate Create a new reference to an existing federate. This will create a new helics.HelicsFederate object that references the existing federate. The new object must be freed as well. Parameters fed - An existing helics.HelicsFederate . Returns : helics.HelicsFederate .","title":"helicsFederateClone"},{"location":"api/capi-py/#helicsFederateCreateMessage","text":"def helicsFederateCreateMessage ( fed : HelicsFederate ) -> HelicsMessage Create a new empty message object. The message is empty and isValid will return false since there is no data associated with the message yet. Parameters fed - the helics.HelicsFederate to associate the message with.","title":"helicsFederateCreateMessage"},{"location":"api/capi-py/#helicsFederateCreateMessageObject","text":"def helicsFederateCreateMessageObject ( fed : HelicsFederate ) -> HelicsMessage Create a new empty message object. The message is empty and isValid will return false since there is no data associated with the message yet. Parameters fed - the helics.HelicsFederate to associate the message with. DEPRECATED","title":"helicsFederateCreateMessageObject"},{"location":"api/capi-py/#helicsFederateDestroy","text":"def helicsFederateDestroy ( fed : HelicsFederate ) Disconnect and free a federate.","title":"helicsFederateDestroy"},{"location":"api/capi-py/#helicsFederateEnterExecutingMode","text":"def helicsFederateEnterExecutingMode ( fed : HelicsFederate ) Request that the federate enter the Execution mode. This call is blocking until granted entry by the helics.HelicsCore . On return from this call the federate will be at time 0. For an asynchronous alternative call see helics.helicsFederateEnterExecutingModeAsync Parameters fed - A federate to change modes.","title":"helicsFederateEnterExecutingMode"},{"location":"api/capi-py/#helicsFederateEnterExecutingModeAsync","text":"def helicsFederateEnterExecutingModeAsync ( fed : HelicsFederate ) Request that the federate enter the Execution mode. This call is non-blocking and will return immediately. Call helics.helicsFederateEnterExecutingModeComplete to finish the call sequence Parameters fed - The helics.HelicsFederate to complete the call.","title":"helicsFederateEnterExecutingModeAsync"},{"location":"api/capi-py/#helicsFederateEnterExecutingModeComplete","text":"def helicsFederateEnterExecutingModeComplete ( fed : HelicsFederate ) Complete the call to helics.helicsFederateEnterExecutingModeAsync . Parameters fed - The helics.HelicsFederate to complete the call.","title":"helicsFederateEnterExecutingModeComplete"},{"location":"api/capi-py/#helicsFederateEnterExecutingModeIterative","text":"def helicsFederateEnterExecutingModeIterative ( fed : HelicsFederate , iterate : HelicsIterationRequest ) -> HelicsIterationResult Request an iterative time. This call allows for finer grain control of the iterative process than helics.helicsFederateRequestTime . It takes a time and iteration request, and returns a time and iteration status. Parameters fed - The federate to make the request of. iterate - helics.HelicsIterationRequest , i.e. the requested iteration mode. Returns : helics.HelicsIterationResult .","title":"helicsFederateEnterExecutingModeIterative"},{"location":"api/capi-py/#helicsFederateEnterExecutingModeIterativeAsync","text":"def helicsFederateEnterExecutingModeIterativeAsync ( fed : HelicsFederate , iterate : HelicsIterationRequest ) Request an iterative entry to the execution mode. This call allows for finer grain control of the iterative process than helics.helicsFederateRequestTime . It takes a time and iteration request, and returns a time and iteration status. Parameters fed - The federate to make the request of. iterate - helics.HelicsIterationRequest , i.e. the requested iteration mode.","title":"helicsFederateEnterExecutingModeIterativeAsync"},{"location":"api/capi-py/#helicsFederateEnterExecutingModeIterativeComplete","text":"def helicsFederateEnterExecutingModeIterativeComplete ( fed : HelicsFederate ,) -> HelicsIterationResult Complete the asynchronous iterative call into ExecutionMode. Parameters fed - The federate to make the request of. Returns : helics.HelicsIterationResult .","title":"helicsFederateEnterExecutingModeIterativeComplete"},{"location":"api/capi-py/#helicsFederateEnterInitializingMode","text":"def helicsFederateEnterInitializingMode ( fed : HelicsFederate ) Initialization, execution, and time requests. Enter the initialization state of a federate. The initialization state allows initial values to be set and received if the iteration is requested on entry to the execution state. This is a blocking call and will block until the core allows it to proceed. Parameters fed - The federate to operate on.","title":"helicsFederateEnterInitializingMode"},{"location":"api/capi-py/#helicsFederateEnterInitializingModeAsync","text":"def helicsFederateEnterInitializingModeAsync ( fed : HelicsFederate ) Non blocking alternative to helics.helicsFederateEnterInitializingMode . The function helicsFederateEnterInitializationModeFinalize must be called to finish the operation. Parameters fed - The federate to operate on.","title":"helicsFederateEnterInitializingModeAsync"},{"location":"api/capi-py/#helicsFederateEnterInitializingModeComplete","text":"def helicsFederateEnterInitializingModeComplete ( fed : HelicsFederate ) Finalize the entry to initialize mode that was initiated with helics.helicsEnterInitializingModeAsync . Parameters fed - The federate desiring to complete the initialization step.","title":"helicsFederateEnterInitializingModeComplete"},{"location":"api/capi-py/#helicsFederateFinalize","text":"def helicsFederateFinalize ( fed : HelicsFederate ) Finalize the federate. This function halts all communication in the federate and disconnects it from the core.","title":"helicsFederateFinalize"},{"location":"api/capi-py/#helicsFederateFinalizeAsync","text":"def helicsFederateFinalizeAsync ( fed : HelicsFederate ) Finalize the federate in an async call.","title":"helicsFederateFinalizeAsync"},{"location":"api/capi-py/#helicsFederateFinalizeComplete","text":"def helicsFederateFinalizeComplete ( fed : HelicsFederate ) Complete the asynchronous finalize call.","title":"helicsFederateFinalizeComplete"},{"location":"api/capi-py/#helicsFederateFree","text":"def helicsFederateFree ( fed : HelicsFederate ) Release the memory associated with a federate.","title":"helicsFederateFree"},{"location":"api/capi-py/#helicsFederateGetCommand","text":"def helicsFederateGetCommand ( fed : HelicsFederate ) -> str","title":"helicsFederateGetCommand"},{"location":"api/capi-py/#helicsFederateGetCommandSource","text":"def helicsFederateGetCommandSource ( fed : HelicsFederate ) -> str","title":"helicsFederateGetCommandSource"},{"location":"api/capi-py/#helicsFederateGetCore","text":"def helicsFederateGetCore ( fed : HelicsFederate ) -> HelicsCore Get the helics.HelicsCore associated with a federate. Parameters fed - helics.HelicsFederate . Returns : helics.HelicsCore .","title":"helicsFederateGetCore"},{"location":"api/capi-py/#helicsFederateGetCoreObject","text":"def helicsFederateGetCoreObject ( fed : HelicsFederate ) -> HelicsCore Get the helics.HelicsCore associated with a federate. Parameters fed - helics.HelicsFederate . Returns : helics.HelicsCore .","title":"helicsFederateGetCoreObject"},{"location":"api/capi-py/#helicsFederateGetCurrentTime","text":"def helicsFederateGetCurrentTime ( fed : HelicsFederate ) -> HelicsTime Get the current time of the federate. Parameters fed - The helics.HelicsFederate to query. Returns : helics.HelicsTime .","title":"helicsFederateGetCurrentTime"},{"location":"api/capi-py/#helicsFederateGetEndpoint","text":"def helicsFederateGetEndpoint ( fed : HelicsFederate , name : str ) -> HelicsEndpoint Get an endpoint object from a name. Parameters fed - The message helics.HelicsFederate to use to get the endpoint. name - The name of the endpoint. Returns : helics.HelicsEndpoint .","title":"helicsFederateGetEndpoint"},{"location":"api/capi-py/#helicsFederateGetEndpointByIndex","text":"def helicsFederateGetEndpointByIndex ( fed : HelicsFederate , index : int ) -> HelicsEndpoint Get an endpoint by its index, typically already created via registerInterfaces file or something of that nature. Parameters fed - The helics.HelicsFederate in which to create a publication. index - The index of the publication to get. Returns : helics.HelicsEndpoint .","title":"helicsFederateGetEndpointByIndex"},{"location":"api/capi-py/#helicsFederateGetEndpointCount","text":"def helicsFederateGetEndpointCount ( fed : HelicsFederate ) -> int Get the number of endpoints in a federate. Parameters fed - The message federate to query. Returns : (-1) if fed was not a valid federate, otherwise returns the number of endpoints.","title":"helicsFederateGetEndpointCount"},{"location":"api/capi-py/#helicsFederateGetFilter","text":"def helicsFederateGetFilter ( fed : HelicsFederate , name : str ) -> HelicsFilter Get a filter by its name, typically already created via registerInterfaces file or something of that nature. Parameters fed - The helics.HelicsFederate to use to get the filter. name - The name of the filter. Returns : helics.HelicsFilter .","title":"helicsFederateGetFilter"},{"location":"api/capi-py/#helicsFederateGetFilterByIndex","text":"def helicsFederateGetFilterByIndex ( fed : HelicsFederate , index : int ) -> HelicsFilter Get a filter by its index, typically already created via registerInterfaces file or something of that nature. Parameters fed - The helics.HelicsFederate in which to create a publication. index - The index of the publication to get. Returns : helics.HelicsFilter .","title":"helicsFederateGetFilterByIndex"},{"location":"api/capi-py/#helicsFederateGetFilterCount","text":"def helicsFederateGetFilterCount ( fed : HelicsFederate ) -> int Get the number of filters registered through a federate. Parameters fed - The helics.HelicsFederate to use to get the filter. Returns : A count of the number of filters registered through a federate.","title":"helicsFederateGetFilterCount"},{"location":"api/capi-py/#helicsFederateGetFlagOption","text":"def helicsFederateGetFlagOption ( fed : HelicsFederate , flag : HelicsFederateFlag ) -> bool Get a flag value for a federate. Parameters fed - The federate to get the flag for. flag - The helics.HelicsFederateFlag to query.","title":"helicsFederateGetFlagOption"},{"location":"api/capi-py/#helicsFederateGetInput","text":"def helicsFederateGetInput ( fed : HelicsFederate , name : str ) -> HelicsInput Get an input object from a name. Parameters fed - The value helics.HelicsFederate to use to get the publication. name - The name of the input. Returns : helics.HelicsInput .","title":"helicsFederateGetInput"},{"location":"api/capi-py/#helicsFederateGetInputByIndex","text":"def helicsFederateGetInputByIndex ( fed : HelicsFederate , index : int ) -> HelicsInput Get an input by its index, typically already created via registerInterfaces file or something of that nature. Parameters fed - The helics.HelicsFederate in which to create a publication. index - The index of the publication to get. Returns : helics.HelicsInput","title":"helicsFederateGetInputByIndex"},{"location":"api/capi-py/#helicsFederateGetInputCount","text":"def helicsFederateGetInputCount ( fed : HelicsFederate ) -> int Get the number of subscriptions in a federate. Returns : (-1) if fed was not a valid federate otherwise returns the number of subscriptions.","title":"helicsFederateGetInputCount"},{"location":"api/capi-py/#helicsFederateGetIntegerProperty","text":"def helicsFederateGetIntegerProperty ( fed : HelicsFederate , property : HelicsProperty ) -> int Get the current value of an integer property (such as a logging level). Parameters fed - The federate to get the flag for. property - A code for the property to set helics.HelicsProperty .","title":"helicsFederateGetIntegerProperty"},{"location":"api/capi-py/#helicsFederateGetMessage","text":"def helicsFederateGetMessage ( fed : HelicsFederate ) -> HelicsMessage Receive a communication message for any endpoint in the federate. The return order will be in order of endpoint creation. So all messages that are available for the first endpoint.handle, then all for the second, and so on. Within a single endpoint.handle, the messages are ordered by time, then source_id, then order of arrival. Returns : A helics.HelicsMessage which references the data in the message.","title":"helicsFederateGetMessage"},{"location":"api/capi-py/#helicsFederateGetMessageObject","text":"def helicsFederateGetMessageObject ( fed : HelicsFederate ) -> HelicsMessage Receive a communication message for any endpoint in the federate. The return order will be in order of endpoint creation. So all messages that are available for the first endpoint.handle, then all for the second, and so on. Within a single endpoint.handle, the messages are ordered by time, then source_id, then order of arrival. Returns : A helics.HelicsMessage which references the data in the message. DEPRECATED","title":"helicsFederateGetMessageObject"},{"location":"api/capi-py/#helicsFederateGetName","text":"def helicsFederateGetName ( fed : HelicsFederate ) -> str Get the name of the federate. Parameters fed - The helics.HelicsFederate to query. Returns : A string with the name.","title":"helicsFederateGetName"},{"location":"api/capi-py/#helicsFederateGetPublication","text":"def helicsFederateGetPublication ( fed : HelicsFederate , name : str ) -> HelicsPublication Get a helics.HelicsPublication from a name. Parameters fed - The value helics.HelicsFederate to use to get the publication. name - The name of the publication. Returns : helics.HelicsPublication .","title":"helicsFederateGetPublication"},{"location":"api/capi-py/#helicsFederateGetPublicationByIndex","text":"def helicsFederateGetPublicationByIndex ( fed : HelicsFederate , index : int ) -> HelicsPublication Get a publication by its index, typically already created via registerInterfaces file or something of that nature. Parameters fed - The helics.HelicsFederate in which to create a publication. index - The index of the publication to get. Returns : helics.HelicsPublication .","title":"helicsFederateGetPublicationByIndex"},{"location":"api/capi-py/#helicsFederateGetPublicationCount","text":"def helicsFederateGetPublicationCount ( fed : HelicsFederate ) -> int Get the number of publications in a federate. Returns : (-1) if fed was not a valid federate otherwise returns the number of publications.","title":"helicsFederateGetPublicationCount"},{"location":"api/capi-py/#helicsFederateGetState","text":"def helicsFederateGetState ( fed : HelicsFederate ) -> HelicsFederateState Get the current state of a federate. Parameters fed - The federate to query. Returns : helics.HelicsFederateState .","title":"helicsFederateGetState"},{"location":"api/capi-py/#helicsFederateGetSubscription","text":"def helicsFederateGetSubscription ( fed : HelicsFederate , name : str ) -> HelicsInput Get an input object from a subscription target. Parameters fed - The value helics.HelicsFederate to use to get the publication. name - The name of the publication that a subscription is targeting. Returns : helics.HelicsInput","title":"helicsFederateGetSubscription"},{"location":"api/capi-py/#helicsFederateGetTimeProperty","text":"def helicsFederateGetTimeProperty ( fed : HelicsFederate , time_property : int ) -> HelicsTime Get the current value of a time based property in a federate. Parameters fed - The federate query. time_property - The property to query. Returns : helics.HelicsTime .","title":"helicsFederateGetTimeProperty"},{"location":"api/capi-py/#helicsFederateGlobalError","text":"def helicsFederateGlobalError ( fed : HelicsFederate , error_code : int , error_string : str ) Generate a global error from a federate. A global error halts the co-simulation completely. Parameters fed - The federate to create an error in. error_code - The integer code for the error. error_string - A string describing the error.","title":"helicsFederateGlobalError"},{"location":"api/capi-py/#helicsFederateHasMessage","text":"def helicsFederateHasMessage ( fed : HelicsFederate ) -> bool Check if the federate has any outstanding messages. Parameters fed - The federate to check. Returns : True if the federate has a message waiting, False otherwise.","title":"helicsFederateHasMessage"},{"location":"api/capi-py/#helicsFederateInfoClone","text":"def helicsFederateInfoClone ( fi : HelicsFederateInfo ) -> HelicsFederateInfo Create helics.HelicsFederateInfo from an existing one and clone the information. Parameters fi - A federateInfo object to duplicate. Returns : helics.HelicsFederateInfo .","title":"helicsFederateInfoClone"},{"location":"api/capi-py/#helicsFederateInfoFree","text":"def helicsFederateInfoFree ( fi : HelicsFederateInfo ) Delete the memory associated with helics.HelicsFederateInfo .","title":"helicsFederateInfoFree"},{"location":"api/capi-py/#helicsFederateInfoLoadFromArgs","text":"def helicsFederateInfoLoadFromArgs ( fi : HelicsFederateInfo , arguments : List [ str ]) Load federate info from command line arguments. Parameters fi - A federateInfo object. argc - The number of command line arguments. argv - An array of strings from the command line.","title":"helicsFederateInfoLoadFromArgs"},{"location":"api/capi-py/#helicsFederateInfoSetBroker","text":"def helicsFederateInfoSetBroker ( fi : HelicsFederateInfo , broker_string : str ) Set the name or connection information for a broker. This is only used if the core is automatically created, the broker information will be transferred to the core for connection. Parameters fi - The federate info object to alter. broker_string - A string which defines the connection information for a broker either a name or an address.","title":"helicsFederateInfoSetBroker"},{"location":"api/capi-py/#helicsFederateInfoSetBrokerInitString","text":"def helicsFederateInfoSetBrokerInitString ( fi : HelicsFederateInfo , broker_init_string : str ) Set the initialization string that a core will pass to a generated broker usually in the form of command line arguments. Parameters fi - The federate info object to alter. broker_init_string - A string with command line arguments for a generated broker.","title":"helicsFederateInfoSetBrokerInitString"},{"location":"api/capi-py/#helicsFederateInfoSetBrokerKey","text":"def helicsFederateInfoSetBrokerKey ( fi : HelicsFederateInfo , broker_key : str ) Set the key for a broker connection. This is only used if the core is automatically created, the broker information will be transferred to the core for connection. Parameters fi - The federate info object to alter. broker_key - A string containing a key for the broker to connect.","title":"helicsFederateInfoSetBrokerKey"},{"location":"api/capi-py/#helicsFederateInfoSetBrokerPort","text":"def helicsFederateInfoSetBrokerPort ( fi : HelicsFederateInfo , broker_port : Union [ int , str ]) Set the port to use for the broker. This is only used if the core is automatically created, the broker information will be transferred to the core for connection. This will only be useful for network broker connections. Parameters fi - The federate info object to alter. broker_port - The integer port number to use for connection with a broker.","title":"helicsFederateInfoSetBrokerPort"},{"location":"api/capi-py/#helicsFederateInfoSetCoreInitString","text":"def helicsFederateInfoSetCoreInitString ( fi : HelicsFederateInfo , core_init_string : str ) Set the initialization string for the core usually in the form of command line arguments. Parameters fi - The federate info object to alter. core_init_string - A string containing command line arguments to be passed to the core.","title":"helicsFederateInfoSetCoreInitString"},{"location":"api/capi-py/#helicsFederateInfoSetCoreName","text":"def helicsFederateInfoSetCoreName ( fi : HelicsFederateInfo , core_name : str ) Set the name of the core to link to for a federate. Parameters fi - The federate info object to alter. core_name - The identifier for a core to link to.","title":"helicsFederateInfoSetCoreName"},{"location":"api/capi-py/#helicsFederateInfoSetCoreType","text":"def helicsFederateInfoSetCoreType ( fi : HelicsFederateInfo , core_type : HelicsCoreType ) Set the core type by integer code. Valid values available by definitions in api-data.h . Parameters fi - The federate info object to alter. core_type - An numerical code for a core type see helics.HelicsCoreType .","title":"helicsFederateInfoSetCoreType"},{"location":"api/capi-py/#helicsFederateInfoSetCoreTypeFromString","text":"def helicsFederateInfoSetCoreTypeFromString ( fi : HelicsFederateInfo , core_type : str ) Set the core type from a string. Parameters fi - The federate info object to alter. core_type - A string naming a core type.","title":"helicsFederateInfoSetCoreTypeFromString"},{"location":"api/capi-py/#helicsFederateInfoSetFlagOption","text":"def helicsFederateInfoSetFlagOption ( fi : HelicsFederateInfo , flag : HelicsFederateFlag , value : bool ) Set a flag in the info structure Valid flags are available helics.HelicsFederateFlag . Parameters fi - The federate info object to alter. flag - A numerical index for a flag. value - The desired value of the flag True or False .","title":"helicsFederateInfoSetFlagOption"},{"location":"api/capi-py/#helicsFederateInfoSetIntegerProperty","text":"def helicsFederateInfoSetIntegerProperty ( fi : HelicsFederateInfo , property : HelicsProperty , value : int ) Set an integer property for a federate. Set known properties. Parameters fi - The federateInfo object to alter. property - helics.HelicsProperty . value - The value to set the property to.","title":"helicsFederateInfoSetIntegerProperty"},{"location":"api/capi-py/#helicsFederateInfoSetLocalPort","text":"def helicsFederateInfoSetLocalPort ( fi : HelicsFederateInfo , local_port : Union [ int , str ]) Set the local port to use. This is only used if the core is automatically created, the port information will be transferred to the core for connection. Parameters fi - The federate info object to alter. local_port - A string with the port information to use as the local server port can be a number or \u201cauto\u201d or \u201cos_local\u201d.","title":"helicsFederateInfoSetLocalPort"},{"location":"api/capi-py/#helicsFederateInfoSetSeparator","text":"def helicsFederateInfoSetSeparator ( fi : HelicsFederateInfo , separator : str ) Set the separator character in the info structure. The separator character is the separation character for local publications/endpoints in creating their global name. For example if the separator character is \u2018/\u2019 then a local endpoint would have a globally reachable name of fedName/localName. Parameters fi - The federate info object to alter. separator - The character to use as a separator.","title":"helicsFederateInfoSetSeparator"},{"location":"api/capi-py/#helicsFederateInfoSetTimeProperty","text":"def helicsFederateInfoSetTimeProperty ( fi : HelicsFederateInfo , time_property : HelicsProperty , value : HelicsTime ) Set the output delay for a federate. Parameters fi - The federate info object to alter. time_property - An integer representation of the time based property to set see helics.HelicsProperty . propertyValue - The value of the property to set the timeProperty to.","title":"helicsFederateInfoSetTimeProperty"},{"location":"api/capi-py/#helicsFederateIsAsyncOperationCompleted","text":"def helicsFederateIsAsyncOperationCompleted ( fed : HelicsFederate ) -> bool Check if the current Asynchronous operation has completed. Parameters fed - The federate to operate on. Returns : True if current operation has completed, else False .","title":"helicsFederateIsAsyncOperationCompleted"},{"location":"api/capi-py/#helicsFederateIsValid","text":"def helicsFederateIsValid ( fed : HelicsFederate ) -> bool Check if a helics.HelicsFederate is valid. Returns : True if the federate is a valid active federate, False otherwise.","title":"helicsFederateIsValid"},{"location":"api/capi-py/#helicsFederateLocalError","text":"def helicsFederateLocalError ( fed : HelicsFederate , error_code : int , error_string : str ) Generate a local error in a federate. This will propagate through the co-simulation but not necessarily halt the co-simulation, it has a similar effect to finalize but does allow some interaction with a core for a brief time. Parameters fed - The federate to create an error in. error_code - The integer code for the error. error_string - A string describing the error.","title":"helicsFederateLocalError"},{"location":"api/capi-py/#helicsFederateLogDebugMessage","text":"def helicsFederateLogDebugMessage ( fed : HelicsFederate , log_message : str ) Log a debug message through a federate. Parameters fed - The federate to log the debug message through. log_message - The message to put in the log.","title":"helicsFederateLogDebugMessage"},{"location":"api/capi-py/#helicsFederateLogErrorMessage","text":"def helicsFederateLogErrorMessage ( fed : HelicsFederate , log_message : str ) Log an error message through a federate. Parameters fed - The federate to log the error message through. log_message - The message to put in the log.","title":"helicsFederateLogErrorMessage"},{"location":"api/capi-py/#helicsFederateLogInfoMessage","text":"def helicsFederateLogInfoMessage ( fed : HelicsFederate , log_message : str ) Log an info message through a federate. Parameters fed - The federate to log the info message through. log_message - The message to put in the log.","title":"helicsFederateLogInfoMessage"},{"location":"api/capi-py/#helicsFederateLogLevelMessage","text":"def helicsFederateLogLevelMessage ( fed : HelicsFederate , log_level : HelicsLogLevel , log_message : str ) Log a message through a federate. Parameters fed - The federate to log the message through. log_level - The level of the message to log see helics.HelicsLogLevel . log_message - The message to put in the log.","title":"helicsFederateLogLevelMessage"},{"location":"api/capi-py/#helicsFederateLogWarningMessage","text":"def helicsFederateLogWarningMessage ( fed : HelicsFederate , log_message : str ) Log a warning message through a federate. Parameters fed - The federate to log the warning message through. log_message - The message to put in the log.","title":"helicsFederateLogWarningMessage"},{"location":"api/capi-py/#helicsFederatePendingMessages","text":"def helicsFederatePendingMessages ( fed : HelicsFederate ) -> int Returns the number of pending receives for the specified destination endpoint. Parameters fed - The federate to get the number of waiting messages from. DEPRECATED","title":"helicsFederatePendingMessages"},{"location":"api/capi-py/#helicsFederatePendingMessagesCount","text":"def helicsFederatePendingMessagesCount ( fed : HelicsFederate ) -> int Returns the number of pending receives for the specified destination endpoint. Parameters fed - The federate to get the number of waiting messages from.","title":"helicsFederatePendingMessagesCount"},{"location":"api/capi-py/#helicsFederatePublishJSON","text":"def helicsFederatePublishJSON ( fed : HelicsFederate , json : str ) Publish data contained in a JSON file or string. Parameters fed - The value helics.HelicsFederate through which to publish the data. json - The publication file name or literal JSON data string.","title":"helicsFederatePublishJSON"},{"location":"api/capi-py/#helicsFederateRegisterCloningFilter","text":"def helicsFederateRegisterCloningFilter ( fed : HelicsFederate , name : str ) -> HelicsFilter Create a cloning Filter on the specified federate. Cloning filters copy a message and send it to multiple locations, source and destination can be added through other functions. Parameters fed - The federate to register through. name - The name of the filter (can be NULL). Returns : helics.HelicsFilter .","title":"helicsFederateRegisterCloningFilter"},{"location":"api/capi-py/#helicsFederateRegisterEndpoint","text":"def helicsFederateRegisterEndpoint ( fed : HelicsFederate , name : str , type : str ) -> HelicsEndpoint MessageFederate Calls. Create an endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints. Parameters fed - The helics.HelicsFederate in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate. name - The identifier for the endpoint. This will be prepended with the federate name for the global identifier. type - A string describing the expected type of the publication (optional). Returns : helics.HelicsEndpoint .","title":"helicsFederateRegisterEndpoint"},{"location":"api/capi-py/#helicsFederateRegisterFilter","text":"def helicsFederateRegisterFilter ( fed : HelicsFederate , type : HelicsFilterType , name : str ) -> HelicsFilter Create a source Filter on the specified federate. Filters can be created through a federate or a core.handle, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior. Parameters fed - The federate to register through. type - The type of filter to create helics.HelicsFilterType . name - The name of the filter (can be NULL). Returns : helics.HelicsFilter .","title":"helicsFederateRegisterFilter"},{"location":"api/capi-py/#helicsFederateRegisterFromPublicationJSON","text":"def helicsFederateRegisterFromPublicationJSON ( fed : HelicsFederate , json : str ) Register the publications via JSON publication string. Parameters fed - The value helics.HelicsFederate to use to register the publications. json - The JSON publication string.","title":"helicsFederateRegisterFromPublicationJSON"},{"location":"api/capi-py/#helicsFederateRegisterGlobalCloningFilter","text":"def helicsFederateRegisterGlobalCloningFilter ( fed : HelicsFederate , name : str ) -> HelicsFilter Create a global cloning Filter on the specified federate. Cloning filters copy a message and send it to multiple locations, source and destination can be added through other functions. Parameters fed - The federate to register through. name - The name of the filter (can be NULL). Returns : helics.HelicsFilter .","title":"helicsFederateRegisterGlobalCloningFilter"},{"location":"api/capi-py/#helicsFederateRegisterGlobalEndpoint","text":"def helicsFederateRegisterGlobalEndpoint ( fed : HelicsFederate , name : str , type : str = \"\" ) -> HelicsEndpoint Create an endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints. Parameters fed - The helics.HelicsFederate in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate. name - The identifier for the endpoint.handle, the given name is the global identifier. type - A string describing the expected type of the publication (optional). Returns : helics.HelicsEndpoint .","title":"helicsFederateRegisterGlobalEndpoint"},{"location":"api/capi-py/#helicsFederateRegisterGlobalFilter","text":"def helicsFederateRegisterGlobalFilter ( fed : HelicsFederate , type : HelicsFilterType , name : str ) -> HelicsFilter Create a global source filter through a federate. Filters can be created through a federate or a core.handle, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior. Parameters fed - The federate to register through. type - The type of filter to create helics.HelicsFilterType . name - The name of the filter (can be NULL). Returns : helics.HelicsFilter .","title":"helicsFederateRegisterGlobalFilter"},{"location":"api/capi-py/#helicsFederateRegisterGlobalInput","text":"def helicsFederateRegisterGlobalInput ( fed : HelicsFederate , name : str , type : HelicsDataType , units : str ) -> HelicsPublication Register a global named input. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication. type - A code identifying the type of the input see helics.HelicsDataType for available options. units - A string listing the units of the subscription maybe NULL. Returns : helics.HelicsPublication .","title":"helicsFederateRegisterGlobalInput"},{"location":"api/capi-py/#helicsFederateRegisterGlobalPublication","text":"def helicsFederateRegisterGlobalPublication ( fed : HelicsFederate , name : str , type : HelicsDataType , units : str = \"\" ) -> HelicsPublication Register a global named publication with an arbitrary type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication. type - A code identifying the type of the input see helics.HelicsDataType for available options. units - A string listing the units of the subscription (optional). Returns : helics.HelicsPublication .","title":"helicsFederateRegisterGlobalPublication"},{"location":"api/capi-py/#helicsFederateRegisterGlobalTargetedEndpoint","text":"def helicsFederateRegisterGlobalTargetedEndpoint ( fed : HelicsFederate , name : str , type : str ) Create a globally targeted endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints.","title":"helicsFederateRegisterGlobalTargetedEndpoint"},{"location":"api/capi-py/#parameters_6","text":"fed - The helics.HelicsFederate in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate. name - The identifier for the endpoint. This will be prepended with the federate name for the global identifier. type - A string describing the expected type of the publication (optional). Returns : helics.HelicsEndpoint .","title":"Parameters"},{"location":"api/capi-py/#helicsFederateRegisterGlobalTypeInput","text":"def helicsFederateRegisterGlobalTypeInput ( fed : HelicsFederate , name : str , type : str , units : str ) -> HelicsInput Register a global publication with an arbitrary type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication. type - A string defining the type of the input. units - A string listing the units of the subscription maybe NULL. Returns : helics.HelicsPublication .","title":"helicsFederateRegisterGlobalTypeInput"},{"location":"api/capi-py/#helicsFederateRegisterGlobalTypePublication","text":"def helicsFederateRegisterGlobalTypePublication ( fed : HelicsFederate , name : str , type : str , units : str ) -> HelicsPublication Register a global publication with a defined type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication. type - A string describing the expected type of the publication. units - A string listing the units of the subscription (optional). Returns : helics.HelicsPublication .","title":"helicsFederateRegisterGlobalTypePublication"},{"location":"api/capi-py/#helicsFederateRegisterInput","text":"def helicsFederateRegisterInput ( fed : HelicsFederate , name : str , type : HelicsDataType , units : str ) -> HelicsInput Register a named input. The input becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions, inputs, and publications. Parameters fed - The helics.HelicsFederate in which to create an input. name - The identifier for the publication the global input name will be prepended with the federate name. type - A code identifying the type of the input see helics.HelicsDataType for available options. units - A string listing the units of the input (optional). Returns : helics.HelicsInput .","title":"helicsFederateRegisterInput"},{"location":"api/capi-py/#helicsFederateRegisterInterfaces","text":"def helicsFederateRegisterInterfaces ( fed : HelicsFederate , file : str ) Load interfaces from a file. Parameters fed - The federate to which to load interfaces. file - The name of a file to load the interfaces from either JSON, or TOML.","title":"helicsFederateRegisterInterfaces"},{"location":"api/capi-py/#helicsFederateRegisterPublication","text":"def helicsFederateRegisterPublication ( fed : HelicsFederate , name : str , type : HelicsDataType , units : str ) -> HelicsPublication Register a publication with a known type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication the global publication name will be prepended with the federate name. type - A code identifying the type of the input see helics.HelicsDataType for available options. units - A string listing the units of the subscription (optional). Returns : helics.HelicsPublication .","title":"helicsFederateRegisterPublication"},{"location":"api/capi-py/#helicsFederateRegisterSubscription","text":"def helicsFederateRegisterSubscription ( fed : HelicsFederate , name : str , units : str = \"\" ) -> HelicsInput Functions related to value federates for the C api. Create a subscription. The subscription becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a subscription, must have been created with helics.helicsCreateValueFederate or helics.helicsCreateCombinationFederate . name - The identifier matching a publication to get a subscription for. units - A string listing the units of the subscription (optional). Returns : helics.HelicsSubscription .","title":"helicsFederateRegisterSubscription"},{"location":"api/capi-py/#helicsFederateRegisterTargetedEndpoint","text":"def helicsFederateRegisterTargetedEndpoint ( fed : HelicsFederate , name : str , type : str ) Create an targeted endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints.","title":"helicsFederateRegisterTargetedEndpoint"},{"location":"api/capi-py/#parameters_7","text":"fed - The helics.HelicsFederate in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate. name - The identifier for the endpoint. This will be prepended with the federate name for the global identifier. type - A string describing the expected type of the publication (optional). Returns : helics.HelicsEndpoint .","title":"Parameters"},{"location":"api/capi-py/#helicsFederateRegisterTypeInput","text":"def helicsFederateRegisterTypeInput ( fed : HelicsFederate , name : str , type : str , units : str ) -> HelicsInput Register an input with a defined type. The input becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions, inputs, and publications. Parameters fed - The helics.HelicsFederate in which to create an input. name - The identifier for the input. type - A string describing the expected type of the input. units - A string listing the units of the input maybe NULL. Returns : helics.HelicsPublication .","title":"helicsFederateRegisterTypeInput"},{"location":"api/capi-py/#helicsFederateRegisterTypePublication","text":"def helicsFederateRegisterTypePublication ( fed : HelicsFederate , name : str , type : str , units : str ) -> HelicsPublication Register a publication with a defined type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications. Parameters fed - The helics.HelicsFederate in which to create a publication. name - The identifier for the publication. type - A string labeling the type of the publication. units - A string listing the units of the subscription (optional). Returns : helics.HelicsPublication .","title":"helicsFederateRegisterTypePublication"},{"location":"api/capi-py/#helicsFederateRequestNextStep","text":"def helicsFederateRequestNextStep ( fed : HelicsFederate ) -> HelicsTime Request the next time step for federate execution. Feds should have setup the period or minDelta for this to work well but it will request the next time step which is the current time plus the minimum time step. Parameters fed - The federate to make the request of. Returns : helics.HelicsTime .","title":"helicsFederateRequestNextStep"},{"location":"api/capi-py/#helicsFederateRequestTime","text":"def helicsFederateRequestTime ( fed : HelicsFederate , request_time : HelicsTime ) -> HelicsTime Request the next time for federate execution. Parameters fed - The federate to make the request of. request_time - The next requested time. Returns : helics.HelicsTime .","title":"helicsFederateRequestTime"},{"location":"api/capi-py/#helicsFederateRequestTimeAdvance","text":"def helicsFederateRequestTimeAdvance ( fed : HelicsFederate , time_delta : HelicsTime ) -> HelicsTime Request the next time for federate execution. Parameters fed - The federate to make the request of. time_delta - The requested amount of time to advance. Returns : helics.HelicsTime .","title":"helicsFederateRequestTimeAdvance"},{"location":"api/capi-py/#helicsFederateRequestTimeAsync","text":"def helicsFederateRequestTimeAsync ( fed : HelicsFederate , request_time : HelicsTime ) Request the next time for federate execution in an asynchronous call. Call helics.helicsFederateRequestTimeComplete to finish the call. Parameters fed - The federate to make the request of. request_time - The next requested time.","title":"helicsFederateRequestTimeAsync"},{"location":"api/capi-py/#helicsFederateRequestTimeComplete","text":"def helicsFederateRequestTimeComplete ( fed : HelicsFederate ) -> HelicsTime Complete an asynchronous requestTime call. Parameters fed - The federate to make the request of.","title":"helicsFederateRequestTimeComplete"},{"location":"api/capi-py/#helicsFederateRequestTimeIterative","text":"def helicsFederateRequestTimeIterative ( fed : HelicsFederate , request_time : HelicsTime , iterate : HelicsIterationRequest ) -> Tuple [ HelicsTime , HelicsIterationResult ] Request an iterative time. This call allows for finer grain control of the iterative process than helics.helicsFederateRequestTime . It takes a time and iteration request, and returns a time and iteration status. Parameters fed - The federate to make the request of. request_time - The next desired time. iterate - helics.HelicsIterationRequest , i.e. the requested iteration mode. Returns : (helics.HelicsTime, helics.HelicsIterationResult) .","title":"helicsFederateRequestTimeIterative"},{"location":"api/capi-py/#helicsFederateRequestTimeIterativeAsync","text":"def helicsFederateRequestTimeIterativeAsync ( fed : HelicsFederate , request_time : HelicsTime , iterate : HelicsIterationRequest ) Request an iterative time through an asynchronous call. This call allows for finer grain control of the iterative process than helics.helicsFederateRequestTime . It takes a time and iteration request, and returns a time and iteration status. Call helics.helicsFederateRequestTimeIterativeComplete to finish the process. Parameters fed - The federate to make the request of. request_time - The next desired time. iterate - helics.HelicsIterationRequest , i.e. the requested iteration mode.","title":"helicsFederateRequestTimeIterativeAsync"},{"location":"api/capi-py/#helicsFederateRequestTimeIterativeComplete","text":"def helicsFederateRequestTimeIterativeComplete ( fed : HelicsFederate ) -> Tuple [ HelicsTime , HelicsIterationResult ] Complete an iterative time request asynchronous call. Parameters fed - The federate to make the request of. Returns : The iteration specification of the result.","title":"helicsFederateRequestTimeIterativeComplete"},{"location":"api/capi-py/#helicsFederateSendCommand","text":"def helicsFederateSendCommand ( fed : HelicsFederate , target : str , command : str )","title":"helicsFederateSendCommand"},{"location":"api/capi-py/#helicsFederateSetFlagOption","text":"def helicsFederateSetFlagOption ( fed : HelicsFederate , flag : int , value : bool ) Set a flag for the federate. Parameters fed - The federate to alter a flag for. flag - The flag to change. value - The new value of the flag. 0 for false, !=0 for true.","title":"helicsFederateSetFlagOption"},{"location":"api/capi-py/#helicsFederateSetGlobal","text":"def helicsFederateSetGlobal ( fed : HelicsFederate , name : str , value : str ) Set a federation global value through a federate. This overwrites any previous value for this name. Parameters fed - The federate to set the global through. name - The name of the global to set. value - The value of the global.","title":"helicsFederateSetGlobal"},{"location":"api/capi-py/#helicsFederateSetIntegerProperty","text":"def helicsFederateSetIntegerProperty ( fed : HelicsFederate , property : HelicsProperty , value : int ) Set an integer based property of a federate. Parameters fed - The federate to change the property for. property - helics.HelicsProperty . value - The value of the property.","title":"helicsFederateSetIntegerProperty"},{"location":"api/capi-py/#helicsFederateSetLogFile","text":"def helicsFederateSetLogFile ( fed : HelicsFederate , log_file : str ) Set the logging file for a federate (actually on the core associated with a federate). Parameters fed - The federate to set the log file for. log_file - The name of the log file.","title":"helicsFederateSetLogFile"},{"location":"api/capi-py/#helicsFederateSetLoggingCallback","text":"def helicsFederateSetLoggingCallback ( fed : HelicsFederate , logger , user_data ) Set the logging callback for a helics.HelicsFederate Add a logging callback function for the C. The logging callback will be called when a message flows into a helics.HelicsFederate from the core or from a federate.","title":"helicsFederateSetLoggingCallback"},{"location":"api/capi-py/#parameters_8","text":"fed : the helics.HelicsFederate that is created with helics.helicsCreateValueFederate , helics.helicsCreateMessageFederate or helics.helicsCreateCombinationFederate logger : a callback with signature void(int, const char *, const char *, void *); the function arguments are loglevel, an identifier string, and a message string, and a pointer to user data user_data : a pointer to user data that is passed to the function when executing","title":"Parameters"},{"location":"api/capi-py/#helicsFederateSetSeparator","text":"def helicsFederateSetSeparator ( fed : HelicsFederate , separator : str ) Set the separator character in a federate. The separator character is the separation character for local publications/endpoints in creating their global name. For example if the separator character is \u2018/\u2019 then a local endpoint would have a globally reachable name of fedName/localName. Parameters fed - The federate info object to alter. separator - The character to use as a separator.","title":"helicsFederateSetSeparator"},{"location":"api/capi-py/#helicsFederateSetTimeProperty","text":"def helicsFederateSetTimeProperty ( fed : HelicsFederate , time_property : int , time : HelicsTime ) Set a time based property for a federate. Parameters fed - The helics.HelicsFederate to set the property for. time_property - A integer code for a time property. time - The requested value of the property.","title":"helicsFederateSetTimeProperty"},{"location":"api/capi-py/#helicsFederateWaitCommand","text":"def helicsFederateWaitCommand ( fed : HelicsFederate ) -> str","title":"helicsFederateWaitCommand"},{"location":"api/capi-py/#helicsFilterAddDeliveryEndpoint","text":"def helicsFilterAddDeliveryEndpoint ( filter : HelicsFilter , delivery_endpoint : str ) Clone filter functions. Functions that manipulate cloning filters in some way. Add a delivery endpoint to a cloning filter. All cloned messages are sent to the delivery address(es). Parameters filter - The given filter. delivery_endpoint - The name of the endpoint to deliver messages to.","title":"helicsFilterAddDeliveryEndpoint"},{"location":"api/capi-py/#helicsFilterAddDestinationTarget","text":"def helicsFilterAddDestinationTarget ( filter : HelicsFilter , destination : str ) Add a destination target to a filter. All messages going to a destination are copied to the delivery address(es). Parameters filter - The given filter to add a destination target to. destination - The name of the endpoint to add as a destination target.","title":"helicsFilterAddDestinationTarget"},{"location":"api/capi-py/#helicsFilterAddSourceTarget","text":"def helicsFilterAddSourceTarget ( filter : HelicsFilter , source_name : str ) Add a source target to a filter. All messages coming from a source are copied to the delivery address(es). Parameters filter - The given filter. source_name - The name of the endpoint to add as a source target.","title":"helicsFilterAddSourceTarget"},{"location":"api/capi-py/#helicsFilterGetInfo","text":"def helicsFilterGetInfo ( filter : HelicsFilter ) -> str Get the data in the info field of a filter. Parameters filter - The given filter. Returns : A string with the info field string.","title":"helicsFilterGetInfo"},{"location":"api/capi-py/#helicsFilterGetName","text":"def helicsFilterGetName ( filter : HelicsFilter ) -> str Get the name of the filter and store in the given string. Parameters filter - The given filter. Returns : A string with the name of the filter.","title":"helicsFilterGetName"},{"location":"api/capi-py/#helicsFilterGetOption","text":"def helicsFilterGetOption ( filter : HelicsFilter , option : HelicsHandleOption ) -> int Get a handle option for the filter. Parameters filter - The given filter to query. option - The option to query helics.HelicsHandleOption . Returns : int .","title":"helicsFilterGetOption"},{"location":"api/capi-py/#helicsFilterIsValid","text":"def helicsFilterIsValid ( filter : HelicsFilter ) -> bool Check if a filter is valid. Parameters filter - The filter object to check. Returns : True if the Filter object represents a valid filter.","title":"helicsFilterIsValid"},{"location":"api/capi-py/#helicsFilterRemoveDeliveryEndpoint","text":"def helicsFilterRemoveDeliveryEndpoint ( filter : HelicsFilter , delivery_endpoint : str ) Remove a delivery destination from a cloning filter. Parameters filter - The given filter (must be a cloning filter). delivery_endpoint - A string with the delivery endpoint to remove.","title":"helicsFilterRemoveDeliveryEndpoint"},{"location":"api/capi-py/#helicsFilterRemoveTarget","text":"def helicsFilterRemoveTarget ( filter : HelicsFilter , target_name : str ) Remove a destination target from a filter. Parameters filter - The given filter. target_name - The named endpoint to remove as a target.","title":"helicsFilterRemoveTarget"},{"location":"api/capi-py/#helicsFilterSet","text":"def helicsFilterSet ( filter : HelicsFilter , property : str , value : float ) Set a property on a filter. Parameters filter - The filter to modify. property - A string containing the property to set. value - A numerical value for the property.","title":"helicsFilterSet"},{"location":"api/capi-py/#helicsFilterSetCustomCallback","text":"def helicsFilterSetCustomCallback ( filter : HelicsFilter , callback , userdata )","title":"helicsFilterSetCustomCallback"},{"location":"api/capi-py/#helicsFilterSetInfo","text":"def helicsFilterSetInfo ( filter : HelicsFilter , info : str ) Set the data in the info field for a filter Parameters filter - The given filter. info - The string to set.","title":"helicsFilterSetInfo"},{"location":"api/capi-py/#helicsFilterSetOption","text":"def helicsFilterSetOption ( filter : HelicsFilter , option : HelicsHandleOption , value : int ) Set the data in the info field for a filter. Parameters filter - The given filter. option - The option to set helics.HelicsHandleOption . value - The value of the option commonly 0 for false 1 for true.","title":"helicsFilterSetOption"},{"location":"api/capi-py/#helicsFilterSetString","text":"def helicsFilterSetString ( filter : HelicsFilter , property : str , value : str ) Set a string property on a filter. Parameters filter - The filter to modify. property - A string containing the property to set. value - A string containing the new value.","title":"helicsFilterSetString"},{"location":"api/capi-py/#helicsGetBuildFlags","text":"def helicsGetBuildFlags () -> str Get the build flags used to compile HELICS.","title":"helicsGetBuildFlags"},{"location":"api/capi-py/#helicsGetCompilerVersion","text":"def helicsGetCompilerVersion () -> str Get the compiler version used to compile HELICS.","title":"helicsGetCompilerVersion"},{"location":"api/capi-py/#helicsGetFederateByName","text":"def helicsGetFederateByName ( fed_name : str ) -> HelicsFederate Get an existing helics.HelicsFederate from a core by name. The federate must have been created by one of the other functions and at least one of the objects referencing the created federate must still be active in the process. Parameters fed_name - The name of the federate to retrieve. Returns : helics.HelicsFederate .","title":"helicsGetFederateByName"},{"location":"api/capi-py/#helicsGetFlagIndex","text":"def helicsGetFlagIndex ( value : str ) -> HelicsFederateFlag Get a property index for use in helics.helicsFederateInfoSetFlagOption , helics.helicsFederateSetFlagOption . Parameters value - A string with the option name. Returns : An int with the property code or (-1) if not a valid property.","title":"helicsGetFlagIndex"},{"location":"api/capi-py/#helicsGetOptionIndex","text":"def helicsGetOptionIndex ( value : str ) -> HelicsHandleOption Get an option index for use in helics.helicsPublicationSetOption , helics.helicsInputSetOption , helics.helicsEndpointSetOption , helics.helicsFilterSetOption , and the corresponding get functions Parameters value - A string with the option name Returns : An int with the option index or (-1) if not a valid property.","title":"helicsGetOptionIndex"},{"location":"api/capi-py/#helicsGetOptionValue","text":"def helicsGetOptionValue ( value : str ) -> int Get an option value for use in helics.helicsPublicationSetOption , helics.helicsInputSetOption , helics.helicsEndpointSetOption , helics.helicsFilterSetOption . Parameters value - A string representing the value Returns : An int with the option value or (-1) if not a valid value.","title":"helicsGetOptionValue"},{"location":"api/capi-py/#helicsGetPropertyIndex","text":"def helicsGetPropertyIndex ( value : str ) -> HelicsProperty Get a property index for use in helics.helicsFederateInfoSetFlagOption , helics.helicsFederateInfoSetTimeProperty , or helics.helicsFederateInfoSetIntegerProperty . Parameters value - A string with the property name. Returns : An int with the property code or (-1) if not a valid property.","title":"helicsGetPropertyIndex"},{"location":"api/capi-py/#helicsGetVersion","text":"def helicsGetVersion () -> str Get a version string for HELICS.","title":"helicsGetVersion"},{"location":"api/capi-py/#helicsInputAddTarget","text":"def helicsInputAddTarget ( ipt : HelicsInput , target_name : str ) Add a publication to the list of data that an input subscribes to. Parameters ipt - The named input to modify. target_name - The name of a publication that an input should subscribe to.","title":"helicsInputAddTarget"},{"location":"api/capi-py/#helicsInputClearUpdate","text":"def helicsInputClearUpdate ( ipt : HelicsInput ) Clear the updated flag from an input.","title":"helicsInputClearUpdate"},{"location":"api/capi-py/#helicsInputGetBoolean","text":"def helicsInputGetBoolean ( ipt : HelicsInput ) -> bool Get a boolean value from a subscription. Parameters ipt - The input to get the data for. Returns : A boolean value of current input value.","title":"helicsInputGetBoolean"},{"location":"api/capi-py/#helicsInputGetByteCount","text":"def helicsInputGetByteCount ( ipt : HelicsInput ) -> int Data can be returned in a number of formats, for instance if data is published as a double it can be returned as a string and vice versa, not all translations make that much sense but they do work. Get the size of the raw value for subscription. Returns : The size of the raw data/string in bytes.","title":"helicsInputGetByteCount"},{"location":"api/capi-py/#helicsInputGetBytes","text":"def helicsInputGetBytes ( ipt : HelicsInput ) -> bytes Get the raw data for the latest value of a subscription. Parameters ipt - The input to get the data for. Returns : Raw string data.","title":"helicsInputGetBytes"},{"location":"api/capi-py/#helicsInputGetChar","text":"def helicsInputGetChar ( ipt : HelicsInput ) -> str Get a single character value from an input. Parameters ipt - The input to get the data for. Returns : The resulting character value.","title":"helicsInputGetChar"},{"location":"api/capi-py/#helicsInputGetComplex","text":"def helicsInputGetComplex ( ipt : HelicsInput ) -> Tuple [ float , float ] Get a pair of double forming a complex number from a subscriptions. Parameters ipt - The input to get the data for. Returns : a pair of floating point values that represent the real and imag values","title":"helicsInputGetComplex"},{"location":"api/capi-py/#helicsInputGetComplexObject","text":"def helicsInputGetComplexObject ( ipt : HelicsInput ) -> Tuple [ float , float ] Get a complex object from an input object. Parameters ipt - The input to get the data for. Returns : complex .","title":"helicsInputGetComplexObject"},{"location":"api/capi-py/#helicsInputGetDouble","text":"def helicsInputGetDouble ( ipt : HelicsInput ) -> float Get a double value from a subscription.. Parameters ipt - The input to get the data for. Returns : The double value of the input.","title":"helicsInputGetDouble"},{"location":"api/capi-py/#helicsInputGetExtractionUnits","text":"def helicsInputGetExtractionUnits ( ipt : HelicsInput ) -> str Get the units of an input. The same as helics.helicsInputGetUnits . Parameters ipt - The input to query. Returns : A string with the units information.","title":"helicsInputGetExtractionUnits"},{"location":"api/capi-py/#helicsInputGetInfo","text":"def helicsInputGetInfo ( ipt : HelicsInput ) -> str Get the data in the info field of an input. Parameters ipt - The input to query. Returns : A string with the info field string.","title":"helicsInputGetInfo"},{"location":"api/capi-py/#helicsInputGetInjectionUnits","text":"def helicsInputGetInjectionUnits ( ipt : HelicsInput ) -> str Get the units of the publication that an input is linked to. Parameters ipt - The input to query. Returns : A string with the units information.","title":"helicsInputGetInjectionUnits"},{"location":"api/capi-py/#helicsInputGetInteger","text":"def helicsInputGetInteger ( ipt : HelicsInput ) -> int Get an integer value from a subscription. Parameters ipt - The input to get the data for. Returns : An int64_t value with the current value of the input.","title":"helicsInputGetInteger"},{"location":"api/capi-py/#helicsInputGetKey","text":"def helicsInputGetKey ( ipt : HelicsInput ) -> str Get the name of an input. Parameters ipt - The input to query Returns : A string with the name information.","title":"helicsInputGetKey"},{"location":"api/capi-py/#helicsInputGetName","text":"def helicsInputGetName ( ipt : HelicsInput ) -> str Get the name of an input. Parameters ipt - The input to query Returns : A string with the name information.","title":"helicsInputGetName"},{"location":"api/capi-py/#helicsInputGetNamedPoint","text":"def helicsInputGetNamedPoint ( ipt : HelicsInput ) -> Tuple [ str , float ] Get a named point from a subscription. Parameters ipt - The input to get the result for. Returns : a string and a double value for the named point","title":"helicsInputGetNamedPoint"},{"location":"api/capi-py/#helicsInputGetOption","text":"def helicsInputGetOption ( ipt : HelicsInput , option : HelicsHandleOption ) -> int Get the current value of an input handle option. Parameters ipt - The input to query. option - Integer representation of the option in question see helics.HelicsHandleOption . Returns : An integer value with the current value of the given option.","title":"helicsInputGetOption"},{"location":"api/capi-py/#helicsInputGetPublicationType","text":"def helicsInputGetPublicationType ( ipt : HelicsInput ) -> str Get the type the publisher to an input is sending. Parameters ipt - The input to query Returns : A string with the type information.","title":"helicsInputGetPublicationType"},{"location":"api/capi-py/#helicsInputGetRawValue","text":"def helicsInputGetRawValue ( ipt : HelicsInput ) -> bytes Get the raw data for the latest value of a subscription. Parameters ipt - The input to get the data for. Returns : Raw string data. DEPRECATED","title":"helicsInputGetRawValue"},{"location":"api/capi-py/#helicsInputGetRawValueSize","text":"def helicsInputGetRawValueSize ( ipt : HelicsInput ) -> int Data can be returned in a number of formats, for instance if data is published as a double it can be returned as a string and vice versa, not all translations make that much sense but they do work. Get the size of the raw value for subscription. Returns : The size of the raw data/string in bytes. DEPRECATED","title":"helicsInputGetRawValueSize"},{"location":"api/capi-py/#helicsInputGetString","text":"def helicsInputGetString ( ipt : HelicsInput ) -> str Get a string value from a subscription. Parameters ipt - The input to get the data for. Returns : A string data","title":"helicsInputGetString"},{"location":"api/capi-py/#helicsInputGetStringSize","text":"def helicsInputGetStringSize ( ipt : HelicsInput ) -> int Get the size of a value for subscription assuming return as a string. Returns : The size of the string.","title":"helicsInputGetStringSize"},{"location":"api/capi-py/#helicsInputGetTime","text":"def helicsInputGetTime ( ipt : HelicsInput ) -> HelicsTime Get a time value from a subscription. Parameters ipt - The input to get the data for. Returns : The resulting time value.","title":"helicsInputGetTime"},{"location":"api/capi-py/#helicsInputGetType","text":"def helicsInputGetType ( ipt : HelicsInput ) -> str Get the type of an input. Parameters ipt - The input to query Returns : A string with the type information.","title":"helicsInputGetType"},{"location":"api/capi-py/#helicsInputGetUnits","text":"def helicsInputGetUnits ( ipt : HelicsInput ) -> str Get the units of an input. Parameters ipt - The input to query. Returns : A string with the units information.","title":"helicsInputGetUnits"},{"location":"api/capi-py/#helicsInputGetVector","text":"def helicsInputGetVector ( ipt : HelicsInput ) -> List [ float ] Get a vector from a subscription. Parameters ipt - The input to get the result for. Returns : a list of floating point values","title":"helicsInputGetVector"},{"location":"api/capi-py/#helicsInputGetVectorSize","text":"def helicsInputGetVectorSize ( ipt : HelicsInput ) -> int Get the size of a value for subscription assuming return as an array of doubles. Returns : The number of doubles in a returned vector.","title":"helicsInputGetVectorSize"},{"location":"api/capi-py/#helicsInputIsUpdated","text":"def helicsInputIsUpdated ( ipt : HelicsInput ) -> bool Check if a particular subscription was updated. Returns : True if it has been updated since the last value retrieval.","title":"helicsInputIsUpdated"},{"location":"api/capi-py/#helicsInputIsValid","text":"def helicsInputIsValid ( ipt : HelicsInput ) -> bool Check if an input is valid. Parameters ipt - The input to check Returns : True if the Input object represents a valid input.","title":"helicsInputIsValid"},{"location":"api/capi-py/#helicsInputLastUpdateTime","text":"def helicsInputLastUpdateTime ( ipt : HelicsInput ) -> HelicsTime Get the last time a subscription was updated.","title":"helicsInputLastUpdateTime"},{"location":"api/capi-py/#helicsInputSetDefaultBoolean","text":"def helicsInputSetDefaultBoolean ( ipt : HelicsInput , value : bool ) Set the default as a boolean. Parameters ipt - The input to set the default for. value - The default boolean value.","title":"helicsInputSetDefaultBoolean"},{"location":"api/capi-py/#helicsInputSetDefaultBytes","text":"def helicsInputSetDefaultBytes ( ipt : HelicsInput , data : bytes ) Default Value functions. These functions set the default value for a subscription. That is the value returned if nothing was published from elsewhere. Set the default as a raw data array. Parameters ipt - The input to set the default for. data - A pointer to the raw data to use for the default.","title":"helicsInputSetDefaultBytes"},{"location":"api/capi-py/#helicsInputSetDefaultChar","text":"def helicsInputSetDefaultChar ( ipt : HelicsInput , value : str ) Set the default as a char. Parameters ipt - The input to set the default for. value - The default char value.","title":"helicsInputSetDefaultChar"},{"location":"api/capi-py/#helicsInputSetDefaultComplex","text":"def helicsInputSetDefaultComplex ( ipt : HelicsInput , real : float , imag : float = 0 ) Set the default as a complex number. Parameters ipt - The input to set the default for. real - The default real value. imag - The default imaginary value.","title":"helicsInputSetDefaultComplex"},{"location":"api/capi-py/#helicsInputSetDefaultDouble","text":"def helicsInputSetDefaultDouble ( ipt : HelicsInput , value : float ) Set the default as a double. Parameters ipt - The input to set the default for. value - The default double value.","title":"helicsInputSetDefaultDouble"},{"location":"api/capi-py/#helicsInputSetDefaultInteger","text":"def helicsInputSetDefaultInteger ( ipt : HelicsInput , value : int ) Set the default as an integer. Parameters ipt - The input to set the default for. value - The default integer.","title":"helicsInputSetDefaultInteger"},{"location":"api/capi-py/#helicsInputSetDefaultNamedPoint","text":"def helicsInputSetDefaultNamedPoint ( ipt : HelicsInput , string : str , value : float ) Set the default as a NamedPoint . Parameters ipt - The input to set the default for. string - A pointer to a string representing the name. value - A double value for the value of the named point.","title":"helicsInputSetDefaultNamedPoint"},{"location":"api/capi-py/#helicsInputSetDefaultRaw","text":"def helicsInputSetDefaultRaw ( ipt : HelicsInput , data : bytes ) Default Value functions. These functions set the default value for a subscription. That is the value returned if nothing was published from elsewhere. Set the default as a raw data array. Parameters ipt - The input to set the default for. data - A pointer to the raw data to use for the default. DEPRECATED","title":"helicsInputSetDefaultRaw"},{"location":"api/capi-py/#helicsInputSetDefaultString","text":"def helicsInputSetDefaultString ( ipt : HelicsInput , string : str ) Set the default as a string. Parameters ipt - The input to set the default for. string - A pointer to the default string.","title":"helicsInputSetDefaultString"},{"location":"api/capi-py/#helicsInputSetDefaultTime","text":"def helicsInputSetDefaultTime ( ipt : HelicsInput , value : HelicsTime ) Set the default as a time. Parameters ipt - The input to set the default for. value - The default time value.","title":"helicsInputSetDefaultTime"},{"location":"api/capi-py/#helicsInputSetDefaultVector","text":"def helicsInputSetDefaultVector ( ipt : HelicsInput , vectorInput : List [ float ]) Set the default as a vector of doubles. Parameters ipt - The input to set the default for. vectorInput - A pointer to an array of double data.","title":"helicsInputSetDefaultVector"},{"location":"api/capi-py/#helicsInputSetInfo","text":"def helicsInputSetInfo ( ipt : HelicsInput , info : str ) Set the data in the info field for an input. Parameters ipt - The input to query. info - The string to set.","title":"helicsInputSetInfo"},{"location":"api/capi-py/#helicsInputSetMinimumChange","text":"def helicsInputSetMinimumChange ( ipt : HelicsInput , tolerance : float ) Set the minimum change detection tolerance. Parameters ipt - The input to modify. tolerance - The tolerance level for registering an update, values changing less than this value will not show asbeing updated.","title":"helicsInputSetMinimumChange"},{"location":"api/capi-py/#helicsInputSetOption","text":"def helicsInputSetOption ( ipt : HelicsInput , option : HelicsHandleOption , value : int ) Set an option on an input. Parameters ipt - The input to query. option - The option to set for the input helics.HelicsHandleOption . value - The value to set the option to.","title":"helicsInputSetOption"},{"location":"api/capi-py/#helicsIsCoreTypeAvailable","text":"def helicsIsCoreTypeAvailable ( type : str ) -> bool Returns True if core/broker type specified is available in current compilation. Parameters type - A string representing a core type. Options include \u201czmq\u201d, \u201cudp\u201d, \u201cipc\u201d, \u201cinterprocess\u201d, \u201ctcp\u201d, \u201cdefault\u201d, \u201cmpi\u201d. Returns : True if type is available, False if type is not available.","title":"helicsIsCoreTypeAvailable"},{"location":"api/capi-py/#helicsMessageAppendData","text":"def helicsMessageAppendData ( message : HelicsMessage , data : bytes ) Append data to the payload. Parameters message - The message object in question. data - A string containing the message data to append.","title":"helicsMessageAppendData"},{"location":"api/capi-py/#helicsMessageCheckFlag","text":"def helicsMessageCheckFlag ( message : HelicsMessage , flag : int ) -> bool Check if a flag is set on a message. Parameters message - The message object in question. flag - The flag to check should be between [0,15]. Returns : The flags associated with a message. DEPRECATED","title":"helicsMessageCheckFlag"},{"location":"api/capi-py/#helicsMessageClearFlags","text":"def helicsMessageClearFlags ( message : HelicsMessage ) Clear the flags of a message. Parameters message - The message object in question.","title":"helicsMessageClearFlags"},{"location":"api/capi-py/#helicsMessageClone","text":"def helicsMessageClone ( message : HelicsMessage ) -> HelicsMessage Clone a message object. Parameters message - The message object to copy from. Returns : helics.HelicsMessage .","title":"helicsMessageClone"},{"location":"api/capi-py/#helicsMessageCopy","text":"def helicsMessageCopy ( source_message : HelicsMessage , destination_message : HelicsMessage ) Copy a message object. Parameters source_message - The message object to copy from. destination_message - The message object to copy to.","title":"helicsMessageCopy"},{"location":"api/capi-py/#helicsMessageFree","text":"def helicsMessageFree ( message : HelicsMessage ) Free a message object from memory. Memory for message is managed so not using this function does not create memory leaks, this is an indication to the system that the memory for this message is done being used and can be reused for a new message. helics.helicsFederateClearMessages can also be used to clear up all stored messages at once.","title":"helicsMessageFree"},{"location":"api/capi-py/#helicsMessageGetByteCount","text":"def helicsMessageGetByteCount ( message : HelicsMessage ) -> int Get the size of the data payload in bytes. Parameters message - The message object in question. Returns : The size of the data payload.","title":"helicsMessageGetByteCount"},{"location":"api/capi-py/#helicsMessageGetBytes","text":"def helicsMessageGetBytes ( message : HelicsMessage ) -> bytes Get the raw data for a message object. Parameters message - A message object to get the data for. Returns : Raw string data.","title":"helicsMessageGetBytes"},{"location":"api/capi-py/#helicsMessageGetBytesPointer","text":"def helicsMessageGetBytesPointer ( message : HelicsMessage ) -> pointer Get a pointer to the raw data of a message. Parameters message - A message object to get the data for. Returns : A pointer to the raw data in memory, the pointer may be NULL if the message is not a valid message.","title":"helicsMessageGetBytesPointer"},{"location":"api/capi-py/#helicsMessageGetDestination","text":"def helicsMessageGetDestination ( message : HelicsMessage ) -> str Get the destination endpoint of a message. Parameters message - The message object in question. Returns : A string with the destination endpoint.","title":"helicsMessageGetDestination"},{"location":"api/capi-py/#helicsMessageGetFlagOption","text":"def helicsMessageGetFlagOption ( message : HelicsMessage , flag : int ) -> bool Get flag on a message. Parameters message - The message object in question. flag - The flag to check should be between [0,15]. Returns : The flags associated with a message.","title":"helicsMessageGetFlagOption"},{"location":"api/capi-py/#helicsMessageGetMessageID","text":"def helicsMessageGetMessageID ( message : HelicsMessage ) -> int Get the messageID of a message. Parameters message - The message object in question. Returns : The messageID.","title":"helicsMessageGetMessageID"},{"location":"api/capi-py/#helicsMessageGetOriginalDestination","text":"def helicsMessageGetOriginalDestination ( message : HelicsMessage ) -> str Get the original destination endpoint of a message, the destination may have been modified by filters or other actions. Parameters message - The message object in question. Returns : A string with the original destination of a message.","title":"helicsMessageGetOriginalDestination"},{"location":"api/capi-py/#helicsMessageGetOriginalSource","text":"def helicsMessageGetOriginalSource ( message : HelicsMessage ) -> str Get the original source endpoint of a message, the source may have been modified by filters or other actions. Parameters message - The message object in question. Returns : A string with the source of a message.","title":"helicsMessageGetOriginalSource"},{"location":"api/capi-py/#helicsMessageGetRawData","text":"def helicsMessageGetRawData ( message : HelicsMessage ) -> bytes Get the raw data for a message object. Parameters message - A message object to get the data for. Returns : Raw string data. DEPRECATED","title":"helicsMessageGetRawData"},{"location":"api/capi-py/#helicsMessageGetRawDataPointer","text":"def helicsMessageGetRawDataPointer ( message : HelicsMessage ) -> pointer Get a pointer to the raw data of a message. Parameters message - A message object to get the data for. Returns : A pointer to the raw data in memory, the pointer may be NULL if the message is not a valid message. DEPRECATED","title":"helicsMessageGetRawDataPointer"},{"location":"api/capi-py/#helicsMessageGetRawDataSize","text":"def helicsMessageGetRawDataSize ( message : HelicsMessage ) -> int Get the size of the data payload in bytes. Parameters message - The message object in question. Returns : The size of the data payload. DEPRECATED","title":"helicsMessageGetRawDataSize"},{"location":"api/capi-py/#helicsMessageGetSource","text":"def helicsMessageGetSource ( message : HelicsMessage ) -> str Message operation functions. Functions for working with helics message envelopes. Get the source endpoint of a message. Parameters message - The message object in question. Returns : A string with the source endpoint.","title":"helicsMessageGetSource"},{"location":"api/capi-py/#helicsMessageGetString","text":"def helicsMessageGetString ( message : HelicsMessage ) -> str Get the payload of a message as a string. Parameters message - The message object in question. Returns : A string representing the payload of a message.","title":"helicsMessageGetString"},{"location":"api/capi-py/#helicsMessageGetTime","text":"def helicsMessageGetTime ( message : HelicsMessage ) -> HelicsTime Get the helics time associated with a message. Parameters message - The message object in question. Returns : The time associated with a message.","title":"helicsMessageGetTime"},{"location":"api/capi-py/#helicsMessageIsValid","text":"def helicsMessageIsValid ( message : HelicsMessage ) -> bool A check if the message contains a valid payload. Parameters message - The message object in question. Returns : True if the message contains a payload.","title":"helicsMessageIsValid"},{"location":"api/capi-py/#helicsMessageReserve","text":"def helicsMessageReserve ( message : HelicsMessage , reserve_size : int ) Reserve space in a buffer but don\u2019t actually resize. The message data buffer will be reserved but not resized. Parameters message - The message object in question. reserve_size - The number of bytes to reserve in the message object.","title":"helicsMessageReserve"},{"location":"api/capi-py/#helicsMessageResize","text":"def helicsMessageResize ( message : HelicsMessage , new_size : int ) Resize the data buffer for a message. The message data buffer will be resized. There are no guarantees on what is in the buffer in newly allocated space. If the allocated space is not sufficient new allocations will occur Parameters message - The message object in question. new_size - The new size in bytes of the buffer.","title":"helicsMessageResize"},{"location":"api/capi-py/#helicsMessageSetData","text":"def helicsMessageSetData ( message : HelicsMessage , data : bytes ) Set the data payload of a message as raw data. Parameters message - The message object in question. data - A string containing the message data.","title":"helicsMessageSetData"},{"location":"api/capi-py/#helicsMessageSetDestination","text":"def helicsMessageSetDestination ( message : HelicsMessage , destination : str ) Set the destination of a message. Parameters message - The message object in question. destination - A string containing the new destination.","title":"helicsMessageSetDestination"},{"location":"api/capi-py/#helicsMessageSetFlagOption","text":"def helicsMessageSetFlagOption ( message : HelicsMessage , flag : int , value : bool ) Set a flag on a message. Parameters message - The message object in question. flag - An index of a flag to set on the message. value - The desired value of the flag.","title":"helicsMessageSetFlagOption"},{"location":"api/capi-py/#helicsMessageSetMessageID","text":"def helicsMessageSetMessageID ( message : HelicsMessage , message_id : int ) Set the message ID for the message. Normally this is not needed and the core of HELICS will adjust as needed. Parameters message - The message object in question. message_id - A new message ID.","title":"helicsMessageSetMessageID"},{"location":"api/capi-py/#helicsMessageSetOriginalDestination","text":"def helicsMessageSetOriginalDestination ( message : HelicsMessage , destination : str ) Set the original destination of a message. Parameters message - The message object in question. destination - A string containing the new original source.","title":"helicsMessageSetOriginalDestination"},{"location":"api/capi-py/#helicsMessageSetOriginalSource","text":"def helicsMessageSetOriginalSource ( message : HelicsMessage , source : str ) Set the original source of a message. Parameters message - The message object in question. source - A string containing the new original source.","title":"helicsMessageSetOriginalSource"},{"location":"api/capi-py/#helicsMessageSetSource","text":"def helicsMessageSetSource ( message : HelicsMessage , source : str ) Set the source of a message. Parameters message - The message object in question. source - A string containing the source.","title":"helicsMessageSetSource"},{"location":"api/capi-py/#helicsMessageSetString","text":"def helicsMessageSetString ( message : HelicsMessage , string : str ) Set the data payload of a message as a string. Parameters message - The message object in question. string - A string containing the message data.","title":"helicsMessageSetString"},{"location":"api/capi-py/#helicsMessageSetTime","text":"def helicsMessageSetTime ( message : HelicsMessage , time : HelicsTime ) Set the delivery time for a message. Parameters message - The message object in question. time - The time the message should be delivered.","title":"helicsMessageSetTime"},{"location":"api/capi-py/#helicsPublicationAddTarget","text":"def helicsPublicationAddTarget ( pub : HelicsPublication , target_name : str ) Add a named input to the list of targets a publication publishes to. Parameters pub - The publication to add the target for. target_name - The name of an input that the data should be sent to.","title":"helicsPublicationAddTarget"},{"location":"api/capi-py/#helicsPublicationGetInfo","text":"def helicsPublicationGetInfo ( pub : HelicsPublication ) -> str Get the data in the info field of an publication. Parameters pub - The publication to query. Returns : A string with the info field string.","title":"helicsPublicationGetInfo"},{"location":"api/capi-py/#helicsPublicationGetKey","text":"def helicsPublicationGetKey ( pub : HelicsPublication ) -> str Get the name of a publication. This will be the global name used to identify the publication to the federation. Parameters pub - The publication to query. Returns : A string with the units information.","title":"helicsPublicationGetKey"},{"location":"api/capi-py/#helicsPublicationGetName","text":"def helicsPublicationGetName ( pub : HelicsPublication ) -> str Get the name of a publication. This will be the global name used to identify the publication to the federation. Parameters pub - The publication to query. Returns : A string with the units information.","title":"helicsPublicationGetName"},{"location":"api/capi-py/#helicsPublicationGetOption","text":"def helicsPublicationGetOption ( pub : HelicsPublication , option : HelicsHandleOption ) -> int Get the value of an option for a publication. Parameters pub - The publication to query. option - The value to query see helics.HelicsHandleOption . Returns : A string with the info field string.","title":"helicsPublicationGetOption"},{"location":"api/capi-py/#helicsPublicationGetType","text":"def helicsPublicationGetType ( pub : HelicsPublication ) -> str Get the type of a publication. Parameters pub - The publication to query Returns : A string with the publication type information.","title":"helicsPublicationGetType"},{"location":"api/capi-py/#helicsPublicationGetUnits","text":"def helicsPublicationGetUnits ( pub : HelicsPublication ) -> str Get the units of a publication. Parameters pub - The publication to query. Returns : A string with the units information.","title":"helicsPublicationGetUnits"},{"location":"api/capi-py/#helicsPublicationIsValid","text":"def helicsPublicationIsValid ( pub : HelicsPublication ) -> bool Publication functions. Functions for publishing data of various kinds. The data will get translated to the type specified when the publication was constructed automatically regardless of the function used to publish the data. Check if a publication is valid. Parameters pub - The publication to check Returns : True if the publication is a valid publication.","title":"helicsPublicationIsValid"},{"location":"api/capi-py/#helicsPublicationPublishBoolean","text":"def helicsPublicationPublishBoolean ( pub : HelicsPublication , value : bool ) Publish a Boolean Value. Parameters pub - The publication to publish for. value - The boolean value to publish.","title":"helicsPublicationPublishBoolean"},{"location":"api/capi-py/#helicsPublicationPublishBytes","text":"def helicsPublicationPublishBytes ( pub : HelicsPublication , data : bytes ) Publish raw data from a char * and length. Parameters pub - The publication to publish for. data - A pointer to the raw data.","title":"helicsPublicationPublishBytes"},{"location":"api/capi-py/#helicsPublicationPublishChar","text":"def helicsPublicationPublishChar ( pub : HelicsPublication , value : str ) Publish a single character. Parameters pub - The publication to publish for. value - The numerical value to publish.","title":"helicsPublicationPublishChar"},{"location":"api/capi-py/#helicsPublicationPublishComplex","text":"def helicsPublicationPublishComplex ( pub : HelicsPublication , real : float , imag : float = 0 ) Publish a complex value (or pair of values). Parameters pub - The publication to publish for. real - float number or complex number imag - float number","title":"helicsPublicationPublishComplex"},{"location":"api/capi-py/#helicsPublicationPublishDouble","text":"def helicsPublicationPublishDouble ( pub : HelicsPublication , value : float ) Publish a double floating point value. Parameters pub - The publication to publish for. value - The numerical value to publish.","title":"helicsPublicationPublishDouble"},{"location":"api/capi-py/#helicsPublicationPublishInteger","text":"def helicsPublicationPublishInteger ( pub : HelicsPublication , value : int ) Publish an integer value. Parameters pub - The publication to publish for. value - The numerical value to publish.","title":"helicsPublicationPublishInteger"},{"location":"api/capi-py/#helicsPublicationPublishNamedPoint","text":"def helicsPublicationPublishNamedPoint ( pub : HelicsPublication , string : str , value : float ) Publish a named point. Parameters pub - The publication to publish for. string - A string for the name to publish. value - A double for the value to publish.","title":"helicsPublicationPublishNamedPoint"},{"location":"api/capi-py/#helicsPublicationPublishRaw","text":"def helicsPublicationPublishRaw ( pub : HelicsPublication , data : bytes ) Publish raw data from a char * and length. Parameters pub - The publication to publish for. data - A pointer to the raw data. DEPRECATED","title":"helicsPublicationPublishRaw"},{"location":"api/capi-py/#helicsPublicationPublishString","text":"def helicsPublicationPublishString ( pub : HelicsPublication , string : str ) Publish a string. Parameters pub - The publication to publish for. string - The string to publish.","title":"helicsPublicationPublishString"},{"location":"api/capi-py/#helicsPublicationPublishTime","text":"def helicsPublicationPublishTime ( pub : HelicsPublication , value : HelicsTime ) Publish a time value. Parameters pub - The publication to publish for. value - The numerical value to publish.","title":"helicsPublicationPublishTime"},{"location":"api/capi-py/#helicsPublicationPublishVector","text":"def helicsPublicationPublishVector ( pub : HelicsPublication , vectorInput : List [ float ]) Publish a vector of doubles. Parameters pub - The publication to publish for. vectorInput - A pointer to an array of double data.","title":"helicsPublicationPublishVector"},{"location":"api/capi-py/#helicsPublicationSetInfo","text":"def helicsPublicationSetInfo ( pub : HelicsPublication , info : str ) Set the data in the info field for a publication. Parameters pub - The publication to set the info field for. info - The string to set.","title":"helicsPublicationSetInfo"},{"location":"api/capi-py/#helicsPublicationSetMinimumChange","text":"def helicsPublicationSetMinimumChange ( pub : HelicsPublication , tolerance : float ) Set the minimum change detection tolerance. Parameters pub - The publication to modify. tolerance - The tolerance level for publication, values changing less than this value will not be published.","title":"helicsPublicationSetMinimumChange"},{"location":"api/capi-py/#helicsPublicationSetOption","text":"def helicsPublicationSetOption ( pub : HelicsPublication , option : HelicsHandleOption , value : int ) Set the value of an option for a publication. Parameters pub - The publication to query. option - Integer code for the option to set helics.HelicsHandleOption . value - The value to set the option to.","title":"helicsPublicationSetOption"},{"location":"api/capi-py/#helicsQueryBrokerExecute","text":"def helicsQueryBrokerExecute ( query : HelicsQuery , broker : HelicsBroker ) -> JSONType Execute a query directly on a broker. The call will block until the query finishes which may require communication or other delays. Parameters query - The query object to use in the query. broker - The broker to send the query to. Returns : String that contains the result of the query that was executed.","title":"helicsQueryBrokerExecute"},{"location":"api/capi-py/#helicsQueryCoreExecute","text":"def helicsQueryCoreExecute ( query : HelicsQuery , core : HelicsCore ) -> JSONType Execute a query directly on a core. The call will block until the query finishes which may require communication or other delays. Parameters query - The query object to use in the query. core - The core to send the query to. Returns : String that contains the result of the query that was executed.","title":"helicsQueryCoreExecute"},{"location":"api/capi-py/#helicsQueryExecute","text":"def helicsQueryExecute ( query : HelicsQuery , fed : HelicsFederate ) -> JSONType Execute a query. The call will block until the query finishes which may require communication or other delays. Parameters query - The query object to use in the query. fed - A federate to send the query through. Returns : String that contains the result of the query that was executed.","title":"helicsQueryExecute"},{"location":"api/capi-py/#helicsQueryExecuteAsync","text":"def helicsQueryExecuteAsync ( query : HelicsQuery , fed : HelicsFederate ) Execute a query in a non-blocking call. Parameters query - The query object to use in the query. fed - A federate to send the query through.","title":"helicsQueryExecuteAsync"},{"location":"api/capi-py/#helicsQueryExecuteComplete","text":"def helicsQueryExecuteComplete ( query : HelicsQuery ) -> JSONType Complete the return from a query called with helics.helicsExecuteQueryAsync . The function will block until the query completes isQueryComplete can be called to determine if a query has completed or not. Parameters query - The query object to complete execution of. Returns : String that contains the result of the query that was executed.","title":"helicsQueryExecuteComplete"},{"location":"api/capi-py/#helicsQueryFree","text":"def helicsQueryFree ( query : HelicsQuery ) Free the memory associated with a query object.","title":"helicsQueryFree"},{"location":"api/capi-py/#helicsQueryIsCompleted","text":"def helicsQueryIsCompleted ( query : HelicsQuery ) -> bool Check if an asynchronously executed query has completed. This function should usually be called after a QueryExecuteAsync function has been called. Parameters query - The query object to check if completed Returns : Will return True if an asynchronous query has completed or a regular query call was made with a result, and false if an asynchronous query has not completed or is invalid.","title":"helicsQueryIsCompleted"},{"location":"api/capi-py/#helicsQuerySetQueryString","text":"def helicsQuerySetQueryString ( query : HelicsQuery , query_string : str ) Update the queryString of a query. Parameters query - The query object to change the target of. query_string - the new queryString.","title":"helicsQuerySetQueryString"},{"location":"api/capi-py/#helicsQuerySetTarget","text":"def helicsQuerySetTarget ( query : HelicsQuery , target_name : str ) Update the target of a query. Parameters query - The query object to change the target of. target_name - the name of the target to query.","title":"helicsQuerySetTarget"},{"location":"api/capi-py/#helicsSubscriptionGetKey","text":"def helicsSubscriptionGetKey ( ipt : HelicsInput ) -> str Get the name of a subscription. Returns : A string with the subscription name.","title":"helicsSubscriptionGetKey"},{"location":"api/capi-py/#helicsSubscriptionGetTarget","text":"def helicsSubscriptionGetTarget ( ipt : HelicsInput ) -> str Get the target of a subscription. Returns : A string with the subscription target.","title":"helicsSubscriptionGetTarget"},{"location":"api/capi-py/#loadSym","text":"def loadSym ( s )","title":"loadSym"},{"location":"api/capi-py/#signal_handler","text":"def signal_handler ( sig , frame )","title":"signal_handler"},{"location":"api/helics-broker-cli-py/","text":"Module helics.helics-broker-cli \u00b6 Functions \u00b6 create_broker \u00b6 def create_broker ( number_of_federates : int = 2 ) main \u00b6 def main () print_help \u00b6 def print_help ()","title":"Module helics.helics-broker-cli"},{"location":"api/helics-broker-cli-py/#module-helicshelics-broker-cli","text":"","title":"Module helics.helics-broker-cli"},{"location":"api/helics-broker-cli-py/#functions","text":"","title":"Functions"},{"location":"api/helics-broker-cli-py/#create_broker","text":"def create_broker ( number_of_federates : int = 2 )","title":"create_broker"},{"location":"api/helics-broker-cli-py/#main","text":"def main ()","title":"main"},{"location":"api/helics-broker-cli-py/#print_help","text":"def print_help ()","title":"print_help"},{"location":"api/helics_build-py/","text":"Module helics.helics_build \u00b6","title":"Module helics.helics_build"},{"location":"api/helics_build-py/#module-helicshelics_build","text":"","title":"Module helics.helics_build"},{"location":"api/vcredist-py/","text":"Module helics.vcredist \u00b6 Classes \u00b6 VcRedist \u00b6 class VcRedist ( self , version = \"2015\" , arch = \"amd64\" ) Initialize self. See help(type(self)) for accurate signature. Methods \u00b6 download_and_run def download_and_run ( self ) Functions \u00b6 download_file \u00b6 def download_file ( url , filepath ) Download the file from url and store it in the given filepath. filename_from_url \u00b6 def filename_from_url ( url ) Return the filename from a given url.","title":"Module helics.vcredist"},{"location":"api/vcredist-py/#module-helicsvcredist","text":"","title":"Module helics.vcredist"},{"location":"api/vcredist-py/#classes","text":"","title":"Classes"},{"location":"api/vcredist-py/#VcRedist","text":"class VcRedist ( self , version = \"2015\" , arch = \"amd64\" ) Initialize self. See help(type(self)) for accurate signature.","title":"VcRedist"},{"location":"api/vcredist-py/#functions","text":"","title":"Functions"},{"location":"api/vcredist-py/#download_file","text":"def download_file ( url , filepath ) Download the file from url and store it in the given filepath.","title":"download_file"},{"location":"api/vcredist-py/#filename_from_url","text":"def filename_from_url ( url ) Return the filename from a given url.","title":"filename_from_url"}]}